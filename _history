{"entries":[{"timestamp":1749438682899,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":47358,"diffs":[[1," "]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":32,"length1":79,"diffs":[[1,"    \"description\": \"\",\n"]]},{"start1":163,"length1":54,"diffs":[[1,""]]},{"start1":213,"length1":114,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]},{"type":"added","filename":"main-temp.ts","value":"\nnamespace Renfont {\n\n    export function _mainfont(tid: number = 0) {\n        setCharFromSheet(\n            tid,\n            _loadImg(\"image|img.1|111|112|514|1|1|15|1|1|1|15|8|1|1|15|3|1|1|15|43|1|1|15|1|1|1|15|14|1|1|15|23|1|1|15|9|1|1|15|3|1|1|15|8|1|1|15|1|1|1|15|37|1|1|15|6|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|4|1|5|15|2|1|3|15|3|1|1|15|3|1|1|15|8|1|1|15|9|1|1|15|3|1|1|15|7|1|5|15|25|1|3|15|1|1|1|15|1|1|1|15|4|1|1|15|14|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|1|1|1|15|16|1|1|15|5|1|1|15|7|1|1|15|1|1|1|15|6|1|1|15|20|1|1|15|2|1|3|15|4|1|1|15|13|1|5|15|2|1|1|15|2|1|1|15|4|1|2|15|2|1|1|15|4|1|1|15|1|1|1|15|16|1|1|15|5|1|1|15|6|1|1|15|3|1|1|15|5|1|1|15|20|1|1|15|2|1|1|15|1|1|1|15|4|1|1|15|14|1|1|15|1|1|1|15|4|1|5|15|5|1|1|15|6|1|1|15|17|1|1|15|5|1|1|15|14|1|5|15|11|1|5|15|2|1|1|15|2|1|1|15|1|1|1|15|4|1|1|15|13|1|5|15|5|1|1|15|2|1|1|15|3|1|1|15|2|1|2|15|2|1|1|15|1|1|1|15|1|1|1|15|14|1|1|15|5|1|1|15|16|1|1|15|45|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|15|1|1|15|5|1|1|15|16|1|1|15|7|1|1|15|22|1|1|15|14|1|1|15|1|1|1|15|4|1|5|15|2|1|1|15|3|1|3|15|3|1|2|15|1|1|1|15|15|1|1|15|3|1|1|15|25|1|1|15|46|1|1|15|33|1|1|15|3|1|1|15|24|1|1|15|82|1|1|15|1|1|1|15|828|1|1|15|4|1|3|15|6|1|1|15|6|1|3|15|5|1|3|15|7|1|1|15|4|1|5|15|4|1|3|15|4|1|5|15|4|1|3|15|5|1|3|15|30|1|1|15|4|1|1|15|3|1|1|15|4|1|2|15|5|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|2|15|4|1|1|15|7|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|29|1|1|15|4|1|2|15|2|1|1|15|5|1|1|15|9|1|1|15|7|1|1|15|4|1|1|15|1|1|1|15|4|1|1|15|7|1|1|15|10|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|1|15|14|1|1|15|5|1|1|15|1|1|1|15|1|1|1|15|5|1|1|15|8|1|1|15|6|1|2|15|4|1|1|15|2|1|1|15|4|1|4|15|4|1|4|15|7|1|1|15|5|1|3|15|5|1|4|15|5|1|1|15|7|1|1|15|13|1|1|15|6|1|1|15|2|1|2|15|5|1|1|15|7|1|1|15|9|1|1|15|3|1|5|15|7|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|5|1|1|15|3|1|1|15|7|1|1|15|20|1|1|15|6|1|1|15|6|1|1|15|3|1|1|15|5|1|1|15|6|1|1|15|6|1|1|15|3|1|1|15|6|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|5|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|1|15|6|1|1|15|5|1|1|15|8|1|3|15|5|1|3|15|4|1|5|15|4|1|3|15|7|1|1|15|5|1|3|15|5|1|3|15|5|1|1|15|7|1|3|15|5|1|3|15|6|1|1|15|7|1|1|15|109|1|1|15|918|1|3|15|5|1|4|15|4|1|3|15|4|1|4|15|5|1|3|15|4|1|4|15|4|1|5|15|3|1|5|15|4|1|3|15|4|1|1|15|3|1|1|15|4|1|3|15|6|1|2|15|11|1|2|15|6|1|1|15|3|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|5|1|2|15|5|1|5|15|5|1|2|15|8|1|1|15|2|1|1|15|2|1|2|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|7|1|1|15|7|1|1|15|3|1|1|15|5|1|1|15|4|1|1|15|19|1|1|15|6|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|5|15|3|1|4|15|4|1|1|15|7|1|1|15|3|1|1|15|3|1|3|15|5|1|3|15|5|1|1|15|2|1|2|15|3|1|5|15|5|1|1|15|5|1|2|15|5|1|5|15|5|1|2|15|6|1|1|15|4|1|1|15|2|1|3|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|2|15|11|1|2|15|14|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|30|1|1|15|6|1|5|15|2|1|1|15|3|1|1|15|3|1|4|15|5|1|3|15|4|1|4|15|4|1|5|15|3|1|1|15|8|1|3|15|4|1|1|15|3|1|1|15|4|1|3|15|1006|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|4|1|4|15|5|1|3|15|4|1|4|15|5|1|3|15|4|1|5|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|6|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|7|1|2|15|1|1|2|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|5|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|6|1|1|15|3|1|1|15|1|1|1|15|5|1|1|15|7|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|9|1|1|15|5|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|6|1|1|15|3|1|2|15|6|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|2|1|2|15|3|1|1|15|3|1|1|15|3|1|4|15|4|1|1|15|3|1|1|15|3|1|4|15|5|1|3|15|6|1|1|15|5|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|5|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|5|1|1|15|5|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|5|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|4|1|3|15|4|1|1|15|3|1|1|15|3|1|5|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|4|1|1|15|8|1|2|15|1|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|6|1|1|15|6|1|3|15|6|1|1|15|6|1|1|15|1|1|1|15|807|1|3|15|9|1|3|15|8|1|1|15|14|1|1|15|72|1|1|15|13|1|1|15|7|1|1|15|1|1|1|15|14|1|1|15|44|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|5|15|6|1|1|15|4|1|1|15|8|1|1|15|6|1|1|15|3|1|1|15|27|1|1|15|19|1|1|15|11|1|1|15|1|1|1|15|4|1|1|15|3|1|1|15|7|1|1|15|6|1|1|15|5|1|1|15|7|1|1|15|38|1|1|15|19|1|1|15|11|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|7|1|1|15|7|1|1|15|5|1|1|15|7|1|1|15|30|1|4|15|4|1|1|15|1|1|2|15|5|1|3|15|5|1|2|15|1|1|1|15|4|1|3|15|5|1|1|15|6|1|1|15|1|1|1|15|6|1|1|15|8|1|1|15|6|1|1|15|6|1|1|15|34|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|2|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|6|1|1|15|6|1|1|15|9|1|1|15|7|1|1|15|5|1|1|15|31|1|4|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|3|1|5|15|3|1|1|15|1|1|1|15|6|1|1|15|5|1|1|15|10|1|1|15|7|1|1|15|5|1|1|15|30|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|6|1|1|15|3|1|1|15|5|1|1|15|5|1|5|15|6|1|1|15|8|1|1|15|4|1|1|15|31|1|4|15|3|1|4|15|5|1|3|15|5|1|4|15|4|1|4|15|29|1|1|15|13|1|1|15|96|1|3|15|9|1|3|15|14|1|5|15|830|1|2|15|11|1|1|15|9|1|1|15|7|1|1|15|5|1|1|15|8|1|1|15|63|1|1|15|13|1|1|15|9|1|1|15|7|1|1|15|5|1|1|15|8|1|1|15|62|1|3|15|5|1|2|15|1|1|1|15|3|1|1|15|1|1|2|15|20|1|1|15|2|1|1|15|5|1|1|15|6|1|2|15|1|1|1|15|4|1|1|15|1|1|2|15|5|1|3|15|4|1|1|15|1|1|2|15|5|1|4|15|3|1|1|15|1|1|2|15|5|1|4|15|4|1|1|15|5|1|1|15|2|1|2|15|3|1|2|15|2|1|1|15|5|1|1|15|7|1|1|15|5|1|1|15|1|1|1|15|6|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|8|1|1|15|5|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|1|15|5|1|2|15|7|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|8|1|3|15|5|1|1|15|6|1|4|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|1|15|5|1|1|15|1|1|1|15|6|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|4|15|5|1|4|15|3|1|1|15|11|1|1|15|4|1|1|15|9|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|1|15|5|1|1|15|2|1|1|15|6|1|1|15|5|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|4|1|1|15|11|1|1|15|3|1|1|15|7|1|4|15|11|1|4|15|21|1|1|15|46|1|1|15|11|1|1|15|98|1|1|15|11|1|1|15|551|1|3|15|79|1|2|15|4|1|1|15|5|1|2|15|15|1|1|15|1|1|1|15|78|1|1|15|6|1|1|15|7|1|1|15|14|1|3|15|20|1|1|15|57|1|1|15|6|1|1|15|7|1|1|15|21|1|5|15|3|1|5|15|3|1|1|15|57|1|1|15|6|1|1|15|7|1|1|15|20|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|4|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|5|15|6|1|1|15|6|1|1|15|7|1|1|15|7|1|2|15|1|1|1|15|9|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|2|1|1|15|6|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|4|1|1|15|3|1|1|15|6|1|1|15|5|1|2|15|7|1|1|15|8|1|2|15|4|1|1|15|1|1|2|15|10|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|1|15|2|1|1|15|6|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|5|1|1|15|6|1|1|15|1|1|1|15|6|1|1|15|8|1|1|15|6|1|1|15|7|1|1|15|20|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|6|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|9|1|1|15|6|1|1|15|7|1|1|15|20|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|3|1|2|15|5|1|4|15|5|1|1|15|6|1|1|15|1|1|1|15|4|1|1|15|3|1|1|15|5|1|1|15|5|1|5|15|6|1|1|15|6|1|1|15|7|1|1|15|21|1|5|15|3|1|5|15|43|1|1|15|17|1|1|15|6|1|1|15|7|1|1|15|76|1|1|15|19|1|2|15|4|1|1|15|5|1|2|15|147|1|ENDimg|\"),\n            \"™!\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°©®\",\n            \"\",\n            \"\",\n            \"\",\n            8,\n            16,\n            1,\n            0,\n            15,\n            3\n        )\n        setCharFromSheet(\n            tid,\n            _loadImg(\"image|img.1|111|96|668|1|3|15|4|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|3|15|5|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|2|1|1|15|5|1|2|15|4|1|3|15|4|1|3|15|5|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|4|1|3|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|3|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|3|15|2|1|1|15|6|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|3|1|3|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|7|1|1|15|6|1|1|15|6|1|2|15|6|1|2|15|4|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|3|1|3|15|1|1|1|15|3|1|3|15|1|1|1|15|5|1|1|15|2|1|1|15|3|1|1|15|2|1|1|15|4|1|2|15|1|1|1|15|2|1|2|15|2|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|1|1|1|15|5|1|2|15|5|1|1|15|1|1|1|15|3|1|1|15|1|1|3|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|4|15|2|1|2|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|2|1|1|15|3|1|1|15|4|1|3|15|5|1|3|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|2|15|1|1|2|15|6|1|1|15|6|1|2|15|3|1|2|15|1|1|2|15|4|1|3|15|5|1|3|15|3|1|1|15|1|1|2|15|1|1|1|15|2|1|2|15|1|1|3|15|3|1|2|15|2|1|1|15|110|1|1|15|99|1|1|3|2|1|1|3|3|1|5|15|99|1|3|3|4|1|3|15|1|1|1|15|435|1|1|15|110|1|1|15|110|1|1|15|11|1|3|15|5|1|3|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|4|1|3|15|5|1|1|15|1|1|1|15|5|1|3|15|3|1|2|15|1|1|2|15|5|1|4|15|2|1|2|15|2|1|1|15|3|1|2|15|3|1|1|15|2|1|2|15|3|1|1|15|3|1|2|15|2|1|1|15|2|1|1|15|3|1|1|15|3|1|3|15|4|1|4|15|2|1|1|15|1|1|4|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|6|1|1|15|5|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|4|1|4|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|3|1|2|15|1|1|1|15|5|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|3|15|1|1|1|15|3|1|3|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|2|1|2|15|2|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|3|1|1|15|1|1|1|15|1|1|4|15|2|1|2|15|1|1|4|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|1|1|3|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|2|15|2|1|2|15|2|1|1|15|4|1|2|15|6|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|1|1|1|15|2|1|2|15|1|1|1|15|1|1|2|15|2|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|4|1|4|15|3|1|2|15|1|1|2|15|3|1|5|15|3|1|5|15|3|1|1|15|3|1|1|15|6|1|1|15|106|1|2|15|1|1|2|15|3|1|2|3|1|1|1|3|99|1|1|15|1|1|1|15|1|1|1|15|3|1|1|3|1|1|2|3|436|1|1|15|15|1|1|15|94|1|1|15|15|1|1|15|88|1|1|15|5|1|1|15|15|1|1|15|55|1|1|15|15|1|1|15|15|1|1|15|2|1|2|15|2|1|1|15|2|1|2|15|3|1|1|15|2|1|2|15|3|1|1|15|4|1|3|15|3|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|5|1|2|15|6|1|3|15|5|1|3|15|5|1|3|15|3|1|2|15|3|1|1|15|4|1|3|15|3|1|2|15|2|1|2|15|2|1|2|15|2|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|10|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|7|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|2|1|1|15|4|1|2|15|1|1|1|15|6|1|1|15|6|1|2|15|1|1|1|15|7|1|1|15|3|1|3|15|1|1|1|15|3|1|1|15|1|1|4|15|3|1|2|15|1|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|4|1|1|15|2|1|1|15|3|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|6|1|1|15|5|1|1|15|2|1|2|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|2|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|2|15|2|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|3|1|2|15|2|1|1|15|2|1|3|15|1|1|1|15|3|1|1|15|3|1|1|15|6|1|1|15|5|1|1|15|3|1|1|15|6|1|2|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|2|1|1|15|2|1|2|15|1|1|2|15|3|1|5|15|5|1|2|15|5|1|2|15|2|1|1|15|6|1|2|15|3|1|1|15|3|1|1|15|3|1|5|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|495|1|3|15|5|1|2|15|5|1|1|15|2|1|1|15|91|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|1|1|2|15|40|1|1|15|51|1|1|15|6|1|1|15|2|1|1|15|5|1|1|15|1|1|1|15|28|1|1|15|3|1|1|15|3|1|4|15|53|1|1|15|6|1|1|15|1|1|1|15|7|1|1|15|28|1|4|15|4|1|2|15|1|1|2|15|14|1|1|15|37|1|1|15|8|1|1|15|7|1|1|15|44|1|3|15|4|1|4|15|13|1|3|15|7|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|5|1|3|15|5|1|3|15|5|1|3|15|19|1|1|15|3|1|1|15|3|1|3|15|1|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|6|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|22|1|1|15|7|1|1|15|4|1|3|15|8|1|1|15|6|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|7|1|1|15|18|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|15|1|1|15|6|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|4|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|7|1|1|15|18|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|2|1|1|15|7|1|1|15|6|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|4|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|7|1|1|15|18|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|8|1|1|15|6|1|2|15|3|1|2|15|1|1|2|15|5|1|2|15|7|1|2|15|6|1|2|15|3|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|7|1|1|15|18|1|5|15|3|1|5|15|15|1|1|15|6|1|2|15|3|1|2|15|1|1|2|15|5|1|2|15|7|1|2|15|6|1|2|15|3|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|7|1|1|15|94|1|1|15|7|1|1|15|7|1|1|15|94|1|1|15|7|1|1|15|7|1|1|15|94|1|1|15|7|1|1|15|7|1|1|15|298|1|2|15|6|1|1|15|6|1|2|15|5|1|3|15|1|1|1|15|5|1|1|15|21|1|2|15|17|1|1|15|6|1|2|15|5|1|1|15|1|1|1|15|21|1|1|15|7|1|1|15|7|1|2|15|4|1|1|15|1|1|2|15|5|1|3|15|3|1|2|15|15|1|2|15|5|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|53|1|1|15|4|1|2|15|120|1|1|15|103|1|3|15|2|1|4|15|101|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|104|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|104|1|1|15|1|1|4|15|105|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|104|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|104|1|1|15|1|1|4|15|109|1|1|15|45|1|2|15|6|1|1|15|1|1|1|15|101|1|1|15|7|1|2|15|518|1|1|15|111|1|1|15|110|1|1|15|18|1|1|15|5|1|1|15|1|1|1|15|4|1|1|15|12|1|1|15|6|1|1|15|7|1|1|15|34|1|4|15|4|1|4|15|4|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|1|1|1|15|4|1|3|15|5|1|3|15|6|1|1|15|6|1|1|15|1|1|1|15|2|1|1|15|3|1|3|15|7|1|1|15|34|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|1|1|3|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|7|1|1|15|10|1|2|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|7|1|3|15|35|1|1|15|4|1|1|15|2|1|1|15|1|1|2|15|1|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|7|1|1|15|12|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|7|1|1|15|2|1|1|15|35|1|1|15|4|1|1|15|2|1|1|15|1|1|2|15|1|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|1|1|2|15|4|1|1|15|1|1|2|15|5|1|2|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|34|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|6|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|35|1|4|15|4|1|2|15|2|1|1|15|3|1|5|15|2|1|2|15|1|1|1|15|1|1|1|15|3|1|4|15|4|1|4|15|5|1|3|15|3|1|1|15|1|1|1|15|1|1|2|15|3|1|1|15|1|1|2|15|3|1|2|15|3|1|1|15|366|1|ENDimg|\"),\n            \"กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรลวศษสหฬอฮะาเแโใไฤฦๅั็ํิีึืุู์่้๊๋ำ฿๐๑๒๓๔๕๖๗๘๙\",\n            \"ั็ํิีึืุู์่้๊๋\",\n            \"ั็ํิีึื์่้๊๋\",\n            \"ำ\",\n            8,\n            16,\n            1,\n            0,\n            15,\n            3\n        )\n        setCharArrFromSheet(\n            tid,\n            _loadImg(\"image|img.1|111|48|3|1|1|15|7|1|2|15|6|1|2|15|7|1|1|15|7|1|1|15|6|1|2|15|6|1|2|15|7|1|1|15|6|1|1|15|6|1|2|15|6|1|2|15|7|1|1|15|7|1|1|15|7|1|2|15|5|1|1|15|8|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|6|1|1|15|7|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|5|1|1|15|7|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|6|1|1|15|8|1|2|15|29|1|1|15|31|1|1|15|7|1|1|15|8|1|1|15|7|1|1|15|5|1|1|15|1|1|1|15|18|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|3|1|4|15|5|1|4|15|4|1|4|15|4|1|4|15|19|1|4|15|4|1|4|15|4|1|4|15|4|1|4|15|6|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|3|1|2|15|1|1|2|15|4|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|2|1|5|15|4|1|5|15|1225|1|2|15|6|1|1|15|7|1|1|15|6|1|2|15|6|1|2|15|7|1|1|15|8|1|1|15|6|1|2|15|6|1|2|15|6|1|1|15|7|1|1|15|6|1|2|15|6|1|2|15|7|1|1|15|6|1|1|15|1|1|1|15|4|1|3|15|6|1|1|15|7|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|7|1|1|15|7|1|2|15|5|1|1|15|1|1|1|15|4|1|3|15|6|1|1|15|7|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|13|1|1|15|31|1|1|15|31|1|1|15|31|1|1|15|23|1|1|15|7|1|1|15|7|1|1|15|7|1|1|15|7|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|4|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|3|1|5|15|2|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|4|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|2|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|1225|1|1|15|5|1|2|15|6|1|2|15|7|1|1|15|26|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|35|1|1|15|6|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|25|1|1|15|7|1|1|15|7|1|1|15|7|1|1|15|59|1|1|15|86|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|34|1|1|15|6|1|2|15|5|1|1|15|1|1|1|15|34|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|22|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|149|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|2|1|3|15|1|1|2|15|2|1|3|15|1|1|2|15|68|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|2|15|3|1|1|15|2|1|2|15|3|1|1|15|2|1|1|15|70|1|1|15|7|1|1|15|7|1|1|15|7|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|70|1|1|15|7|1|1|15|7|1|1|15|7|1|2|15|3|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|70|1|1|15|7|1|1|15|7|1|1|15|7|1|2|15|3|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|70|1|1|15|7|1|1|15|7|1|1|15|7|1|3|15|2|1|1|15|2|1|3|15|2|1|1|15|2|1|1|15|70|1|1|15|7|1|1|15|7|1|1|15|7|1|3|15|2|1|1|15|2|1|3|15|2|1|1|15|2|1|1|15|99|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|99|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|99|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|63|1|ENDimg|\"),\n            [\n                \"ั่\",\n                \"ั้\",\n                \"ั๊\",\n                \"ั๋\",\n                \"ํ่\",\n                \"ํ้\",\n                \"ํ๊\",\n                \"ํ๋\",\n                \"็่\",\n                \"็้\",\n                \"็๊\",\n                \"็๋\",\n                \"ิ่\",\n                \"ิ้\",\n                \"ิ๊\",\n                \"ิ๋\",\n                \"ี่\",\n                \"ี้\",\n                \"ี๊\",\n                \"ี๋\",\n                \"ึ่\",\n                \"ึ้\",\n                \"ึ๊\",\n                \"ึ๋\",\n                \"ื่\",\n                \"ื้\",\n                \"ื๊\",\n                \"ื๋\",\n                \"่ำ\",\n                \"้ำ\",\n                \"๊ำ\",\n                \"๋ำ\",\n                \"ฤๅ\",\n                \"ฦๅ\",\n                \"ิ์\",\n                \"ี์\",\n                \"ึ์\",\n                \"ื์\"\n            ],\n            [\n                \"ั่\",\n                \"ั้\",\n                \"ั๊\",\n                \"ั๋\",\n                \"ํ่\",\n                \"ํ้\",\n                \"ํ๊\",\n                \"ํ๋\",\n                \"็่\",\n                \"็้\",\n                \"็๊\",\n                \"็๋\",\n                \"ิ่\",\n                \"ิ้\",\n                \"ิ๊\",\n                \"ิ๋\",\n                \"ี่\",\n                \"ี้\",\n                \"ี๊\",\n                \"ี๋\",\n                \"ึ่\",\n                \"ึ้\",\n                \"ึ๊\",\n                \"ึ๋\",\n                \"ื่\",\n                \"ื้\",\n                \"ื๊\",\n                \"ื๋\",\n                \"ิ์\",\n                \"ี์\",\n                \"ึ์\",\n                \"ื์\"\n            ],\n            [\n                \"ั่\",\n                \"ั้\",\n                \"ั๊\",\n                \"ั๋\",\n                \"ํ่\",\n                \"ํ้\",\n                \"ํ๊\",\n                \"ํ๋\",\n                \"็่\",\n                \"็้\",\n                \"็๊\",\n                \"็๋\",\n                \"ิ่\",\n                \"ิ้\",\n                \"ิ๊\",\n                \"ิ๋\",\n                \"ี่\",\n                \"ี้\",\n                \"ี๊\",\n                \"ี๋\",\n                \"ึ่\",\n                \"ึ้\",\n                \"ึ๊\",\n                \"ึ๋\",\n                \"ื่\",\n                \"ื้\",\n                \"ื๊\",\n                \"ื๋\",\n                \"ิ์\",\n                \"ี์\",\n                \"ึ์\",\n                \"ื์\"\n            ],\n            [\n                \"่ำ\",\n                \"้ำ\",\n                \"๊ำ\",\n                \"๋ำ\"\n            ],\n            8,\n            16,\n            1,\n            0,\n            0,\n            0\n        )\n    }\n\n    export function _arcadefont(tid: number = 0) {\n        setCharFromSheet(\n            tid,\n            _loadImg(\"image|img.1|111|56|9|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|6|1|1|15|5|1|2|15|2|1|1|15|12|1|1|15|7|1|1|15|6|1|1|15|7|1|1|15|3|1|1|15|35|1|1|15|7|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|4|15|3|1|2|15|1|1|1|15|4|1|2|15|7|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|1|1|1|15|36|1|1|15|14|1|5|15|3|1|1|15|1|1|1|15|8|1|1|15|4|1|1|15|1|1|1|15|13|1|1|15|8|1|1|15|6|1|5|15|5|1|1|15|29|1|1|15|15|1|1|15|1|1|1|15|5|1|3|15|6|1|1|15|6|1|1|15|14|1|1|15|8|1|1|15|7|1|1|15|1|1|1|15|6|1|1|15|29|1|1|15|14|1|5|15|5|1|1|15|1|1|1|15|4|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|11|1|1|15|8|1|1|15|6|1|1|15|3|1|1|15|3|1|5|15|11|1|5|15|27|1|1|15|1|1|1|15|4|1|4|15|5|1|1|15|1|1|2|15|3|1|1|15|2|1|1|15|12|1|1|15|8|1|1|15|16|1|1|15|5|1|2|15|14|1|2|15|6|1|1|15|15|1|1|15|1|1|1|15|6|1|1|15|5|1|1|15|2|1|2|15|4|1|2|15|1|1|1|15|12|1|1|15|6|1|1|15|17|1|1|15|6|1|1|15|14|1|2|15|93|1|1|15|26|1|1|15|109|1|1|15|5|1|2|15|6|1|1|15|7|1|2|15|6|1|2|15|8|1|1|15|4|1|4|15|5|1|2|15|5|1|4|15|5|1|2|15|6|1|2|15|31|1|1|15|4|1|1|15|2|1|1|15|4|1|2|15|6|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|6|1|2|15|4|1|1|15|7|1|1|15|2|1|1|15|7|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|2|15|6|1|2|15|9|1|2|15|4|1|1|15|5|1|1|15|1|1|2|15|5|1|1|15|9|1|1|15|6|1|1|15|6|1|1|15|1|1|1|15|4|1|3|15|5|1|3|15|8|1|1|15|5|1|2|15|5|1|1|15|2|1|1|15|4|1|2|15|6|1|2|15|7|1|2|15|5|1|1|15|6|1|2|15|1|1|1|15|5|1|1|15|8|1|1|15|8|1|1|15|4|1|1|15|2|1|1|15|7|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|5|1|1|15|2|1|1|15|5|1|3|15|20|1|1|15|7|1|1|15|6|1|1|15|2|1|1|15|5|1|1|15|7|1|1|15|6|1|1|15|2|1|1|15|4|1|5|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|5|1|1|15|6|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|2|15|6|1|2|15|7|1|2|15|4|1|1|15|8|1|2|15|5|1|3|15|5|1|4|15|5|1|2|15|8|1|1|15|5|1|2|15|6|1|2|15|6|1|1|15|7|1|2|15|6|1|2|15|5|1|2|15|7|1|1|15|9|1|2|15|98|1|1|15|142|1|3|15|5|1|3|15|5|1|2|15|5|1|3|15|6|1|2|15|5|1|3|15|5|1|4|15|4|1|4|15|5|1|2|15|5|1|1|15|2|1|1|15|4|1|3|15|8|1|1|15|11|1|2|15|6|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|5|1|1|15|9|1|1|15|3|1|5|15|5|1|2|15|7|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|3|15|5|1|1|15|7|1|1|15|2|1|1|15|4|1|3|15|5|1|3|15|5|1|1|15|7|1|4|15|5|1|1|15|9|1|1|15|15|1|1|15|5|1|1|15|5|1|1|15|1|1|2|15|4|1|4|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|7|1|1|15|1|1|2|15|4|1|1|15|2|1|1|15|5|1|1|15|9|1|1|15|3|1|5|15|5|1|2|15|12|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|5|1|1|15|6|1|1|15|2|1|1|15|11|1|2|15|8|1|1|15|6|1|4|15|3|1|1|15|2|1|1|15|4|1|3|15|6|1|2|15|5|1|3|15|5|1|4|15|4|1|1|15|8|1|2|15|5|1|1|15|2|1|1|15|4|1|3|15|6|1|2|15|226|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|5|1|2|15|5|1|3|15|6|1|2|15|5|1|3|15|6|1|2|15|5|1|5|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|5|1|1|15|7|1|2|15|1|1|2|15|3|1|2|15|1|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|3|1|2|15|6|1|1|15|7|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|2|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|5|1|1|15|8|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|5|1|1|15|4|1|2|15|6|1|1|15|7|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|3|15|5|1|2|15|1|1|1|15|4|1|3|15|7|1|1|15|7|1|1|15|5|1|1|15|2|1|1|15|5|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|5|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|1|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|5|1|1|15|2|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|4|15|4|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|5|1|2|15|5|1|1|15|8|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|5|1|2|15|7|1|1|15|6|1|2|15|7|1|1|15|6|1|1|15|1|1|1|15|4|1|1|15|3|1|1|15|129|1|2|15|6|1|1|15|7|1|2|15|15|1|1|15|6|1|1|15|54|1|1|15|3|1|1|15|3|1|4|15|4|1|1|15|8|1|1|15|7|1|1|15|14|1|1|15|1|1|1|15|6|1|1|15|14|1|1|15|18|1|1|15|14|1|1|15|4|1|1|15|3|1|1|15|6|1|1|15|4|1|1|15|8|1|1|15|7|1|1|15|14|1|1|15|1|1|1|15|21|1|1|15|18|1|1|15|13|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|6|1|1|15|5|1|1|15|9|1|1|15|6|1|1|15|31|1|3|15|4|1|3|15|6|1|3|15|5|1|3|15|5|1|2|15|6|1|1|15|7|1|1|15|6|1|1|15|6|1|1|15|10|1|1|15|5|1|1|15|30|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|1|1|2|15|4|1|3|15|6|1|1|15|5|1|1|15|7|1|1|15|10|1|1|15|5|1|1|15|30|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|2|1|1|15|4|1|2|15|7|1|1|15|7|1|1|15|5|1|4|15|4|1|2|15|10|1|1|15|3|1|2|15|6|1|5|15|20|1|3|15|4|1|3|15|6|1|3|15|5|1|3|15|5|1|3|15|5|1|1|15|244|1|1|15|8|1|1|15|5|1|1|15|7|1|2|15|63|1|1|15|6|1|3|15|28|1|1|15|8|1|1|15|30|1|3|15|6|1|3|15|21|1|1|15|5|1|1|15|2|1|1|15|4|1|3|15|5|1|2|15|7|1|2|15|5|1|1|15|1|1|1|15|6|1|1|15|6|1|2|15|1|1|1|15|4|1|3|15|6|1|2|15|5|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|1|1|1|15|6|1|3|15|4|1|3|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|5|1|1|15|8|1|1|15|5|1|2|15|7|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|2|15|1|1|1|15|4|1|2|15|7|1|1|15|6|1|3|15|4|1|1|15|2|1|1|15|5|1|1|15|6|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|6|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|3|15|6|1|3|15|4|1|1|15|9|1|2|15|5|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|3|15|6|1|1|15|6|1|1|15|2|1|1|15|4|1|3|15|5|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|5|1|2|15|5|1|1|15|10|1|1|15|4|1|1|15|7|1|3|15|7|1|1|15|5|1|2|15|69|1|1|15|10|1|1|15|76|1|2|15|5|1|1|15|7|1|2|15|94|1|1|15|6|1|1|15|8|1|1|15|77|1|1|15|2|1|1|15|13|1|1|15|6|1|1|15|8|1|1|15|45|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|4|15|4|1|2|15|6|1|1|15|8|1|2|15|6|1|2|15|1|1|1|15|34|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|2|15|5|1|1|15|2|1|1|15|6|1|1|15|6|1|1|15|6|1|1|15|8|1|1|15|6|1|1|15|1|1|2|15|35|1|1|15|2|1|1|15|5|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|4|1|2|15|6|1|3|15|5|1|1|15|7|1|1|15|6|1|1|15|8|1|1|15|46|1|3|15|6|1|1|15|6|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|4|15|5|1|2|15|5|1|1|15|7|1|2|15|78|1|2|15|76|1|ENDimg|\"),\n            \"!\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\",\n            \"\",\n            \"\",\n            \"\",\n            8,\n            8,\n            1,\n            0,\n            0,\n            0\n        )\n    }\n\n    export function _latinmini(tid: number = 0) {\n        setCharFromSheet(\n            tid,\n            _loadImg(\"image|img.1|79|32|80|1|1|15|2|1|2|15|3|1|2|15|1|1|2|15|2|1|3|15|1|1|3|15|2|1|2|15|1|1|1|15|1|1|1|15|1|1|3|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|2|1|3|15|1|1|2|15|2|1|3|15|2|1|2|15|1|1|4|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|3|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|1|1|3|15|1|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|2|1|1|15|1|1|1|15|1|1|3|15|2|1|1|15|4|1|1|15|1|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|2|15|1|1|2|15|2|1|3|15|1|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|2|15|2|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|2|15|1|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|1|15|80|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|72|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|3|15|2|1|1|15|2|1|2|15|2|1|2|15|4|1|1|15|1|1|3|15|2|1|2|15|1|1|3|15|1|1|2|15|3|1|2|15|10|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|2|15|4|1|1|15|3|1|1|15|2|1|2|15|1|1|1|15|3|1|1|15|5|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|6|1|1|15|1|1|1|15|3|1|2|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|3|15|6|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|5|1|1|15|1|1|3|15|3|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|10|1|1|15|3|1|2|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|3|15|1|1|3|15|1|1|3|15|1|1|3|15|1|1|2|15|4|1|1|15|1|1|2|15|2|1|2|15|2|1|1|15|4|1|2|15|1|1|2|15|14|1|1|15|81|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|37|1|1|15|7|1|1|15|35|1|1|15|1|1|1|15|4|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|14|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|2|15|3|1|1|15|2|1|2|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|2|15|2|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|4|1|1|15|1|1|3|15|2|1|2|15|1|1|2|15|3|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|2|15|3|1|2|15|1|1|1|15|9|1|1|15|6|1|1|15|7|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|10|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|2|15|8|1|1|15|2|1|1|15|2|1|1|15|3|1|3|15|1|1|2|15|2|1|2|15|19|1|1|15|1|1|1|15|4|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|20|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|54|1|1|15|33|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|238|1|1|15|3|1|1|15|153|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|70|1|1|15|7|1|1|15|65|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|ENDimg|\"),\n            \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-*/()[]{}<=>^\\\\|%#$_!?'\\\":;.,\",\n            \"\",\n            \"\",\n            \"\",\n            4,\n            8,\n            1,\n            2,\n            15,\n            15\n        )\n        setCharFromSheet(\n            tid,\n            _loadImg(\"image|img.1|79|32|80|1|1|15|2|1|2|15|3|1|2|15|1|1|2|15|2|1|3|15|1|1|3|15|2|1|2|15|1|1|1|15|1|1|1|15|1|1|3|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|2|1|3|15|1|1|2|15|2|1|3|15|2|1|2|15|1|1|4|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|3|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|1|1|3|15|1|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|2|1|1|15|1|1|1|15|1|1|3|15|2|1|1|15|4|1|1|15|1|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|2|15|1|1|2|15|2|1|3|15|1|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|2|15|2|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|2|15|1|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|1|15|80|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|72|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|3|15|2|1|1|15|2|1|2|15|2|1|2|15|4|1|1|15|1|1|3|15|2|1|2|15|1|1|3|15|1|1|2|15|3|1|2|15|10|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|2|15|4|1|1|15|3|1|1|15|2|1|2|15|1|1|1|15|3|1|1|15|5|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|6|1|1|15|1|1|1|15|3|1|2|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|3|15|6|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|5|1|1|15|1|1|3|15|3|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|10|1|1|15|3|1|2|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|3|15|1|1|3|15|1|1|3|15|1|1|3|15|1|1|2|15|4|1|1|15|1|1|2|15|2|1|2|15|2|1|1|15|4|1|2|15|1|1|2|15|14|1|1|15|81|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|37|1|1|15|7|1|1|15|35|1|1|15|1|1|1|15|4|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|14|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|2|15|3|1|1|15|2|1|2|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|2|15|2|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|4|1|1|15|1|1|3|15|2|1|2|15|1|1|2|15|3|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|2|15|3|1|2|15|1|1|1|15|9|1|1|15|6|1|1|15|7|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|10|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|2|15|8|1|1|15|2|1|1|15|2|1|1|15|3|1|3|15|1|1|2|15|2|1|2|15|19|1|1|15|1|1|1|15|4|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|20|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|54|1|1|15|33|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|238|1|1|15|3|1|1|15|153|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|70|1|1|15|7|1|1|15|65|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|ENDimg|\"),\n            \"abcdefghijklmnopqrstuvwxyz\",\n            \"\",\n            \"\",\n            \"\",\n            4,\n            8,\n            1,\n            2,\n            15,\n            15\n        )\n    }\n\n}\n"},{"type":"added","filename":"main-dataserial.ts","value":"\nnamespace Renfont {\n\n    let cidk: { [key: string]: number } = {}\n\n    export function _indexKeyShadow(name: string) {\n        return name\n    }\n\n    export function _startIdxKey(name: string, start: number) {\n        cidk[name] = start\n    }\n\n    export function _getIdxKey(name: string) {\n        return cidk[name]\n    }\n\n    export function _write(strval: string) {\n        let oval = \"\", curc = \"\"\n        for (let i = 0; i < strval.length; i++) {\n            curc = strval.charAt(i)\n            if (\"\\\\|\".includes(curc)) {\n                oval = \"\" + oval + \"\\\\\"\n            }\n            oval = \"\" + oval + curc\n        }\n        oval = \"\" + oval + \"|\"\n        return oval\n    }\n\n    export function _read(txt: string, name: string) {\n        if (cidk[name] == null) return \"\";\n        let idx = cidk[name]\n        let oval = \"\", curc = \"\"\n        while (idx < txt.length) {\n            curc = txt.charAt(idx)\n            if (\"|\".includes(curc)) {\n                break\n            } else if (\"\\\\\".includes(curc)) {\n                idx += 1\n                curc = txt.charAt(idx)\n            }\n            oval = \"\" + oval + curc\n            idx += 1\n        }\n        idx += 1, cidk[name] = idx\n        return oval\n    }\n\n    export function _saveImg(InputImg: Image) {\n        let OutputStr = \"\"\n        OutputStr = \"\" + OutputStr + _write(\"image\")\n        OutputStr = \"\" + OutputStr + _write(\"img.1\")\n        OutputStr = \"\" + OutputStr + _write(convertToText(InputImg.width))\n        OutputStr = \"\" + OutputStr + _write(convertToText(InputImg.height))\n        let NumVal = InputImg.getPixel(0, 0), Count = 1, Ix = 0, Iy = 0\n        for (let index = 0; index <= InputImg.width * InputImg.height - 2; index++) {\n            Ix = (index + 1) % InputImg.width, Iy = Math.floor((index + 1) / InputImg.width)\n            if (NumVal == InputImg.getPixel(Ix, Iy)) {\n                Count += 1\n            } else {\n                OutputStr = \"\" + OutputStr + _write(convertToText(Count)), OutputStr = \"\" + OutputStr + _write(convertToText(NumVal))\n                NumVal = InputImg.getPixel(Ix, Iy), Count = 1\n            }\n        }\n        OutputStr = \"\" + OutputStr + _write(convertToText(Count)), OutputStr = \"\" + OutputStr + _write(convertToText(NumVal)), OutputStr = \"\" + OutputStr + _write(\"ENDimg\")\n        return OutputStr\n    }\n\n    export function _loadImg(DataStr: string) {\n        if (DataStr.isEmpty()) return undefined;\n        _startIdxKey(\"_ImgData\", 0)\n        let StrVal = _read(DataStr, \"_ImgData\")\n        let NumVal = 0, Ix = 0, Iy = 0\n        if (!(StrVal.includes(\"image\"))) return undefined;\n        StrVal = _read(DataStr, \"_ImgData\")\n        if (!(StrVal.includes(\"img.\"))) return undefined;\n        let Widt = parseFloat(_read(DataStr, \"_ImgData\")), Heig = parseFloat(_read(DataStr, \"_ImgData\"))\n        let OutputImg = image.create(Widt, Heig)\n        let I = 0, CountStr = _read(DataStr, \"_ImgData\"), Count = parseFloat(CountStr)\n        while (_getIdxKey(\"_ImgData\") < DataStr.length) {\n            Ix = I % Widt\n            Iy = Math.floor(I / Widt)\n            NumVal = parseFloat(_read(DataStr, \"_ImgData\"))\n            for (let index = 0; index < Count; index++) {\n                OutputImg.setPixel(Ix, Iy, NumVal)\n                I += 1\n                Ix = I % Widt\n                Iy = Math.floor(I / Widt)\n            }\n            CountStr = _read(DataStr, \"_ImgData\")\n            if (CountStr.includes(\"END\")) break;\n            Count = parseFloat(CountStr)\n        }\n        return OutputImg\n    }\n}\n"}]},{"timestamp":1749439192100,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":36799,"length1":30,"diffs":[[1,""]]},{"start1":38583,"length1":45,"diffs":[[1,"        //% block=\" $this=variables_get set align to $alg\"\n"]]}]}]},{"timestamp":1749439758380,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5654,"length1":50,"diffs":[[1,""]]},{"start1":5715,"length1":0,"diffs":[[1,"    //% shim=KIND_GET\n    //% kindMemberName=font\n"]]},{"start1":36799,"length1":0,"diffs":[[1,"    //%blockNamespace=Renfont\n"]]},{"start1":38613,"length1":59,"diffs":[[1,"        //% block=\" $this set align to $alg\"\n"]]},{"start1":40660,"length1":49,"diffs":[[1,"        get getSpriteText() {\n            return this.stxt\n        }\n"]]},{"start1":47373,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1749440243764,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1,"length1":0,"diffs":[[1,"namespace RenfontTable {\n    let kindid: number;\n\n    export function create() {\n        if (!(kindid)) kindid = 0\n        return kindid++\n    }\n\n    //% isKind\n    export const myFont = create()\n}\n\n"]]},{"start1":5654,"length1":227,"diffs":[[1,"    //% shim=KIND_GET\n    //% kindMemberName=font\n    //% blockid=fontren_tablenameshadow\n    //% block=\"$arg\"\n    //% kindNamespace=RenfontTable\n    //% kindPromptHint=\"enter your font name here\"\n"]]},{"start1":5891,"length1":73,"diffs":[[1,"    export function tableKindShadow(arg: number) {\n        return arg\n"]]},{"start1":6023,"length1":37,"diffs":[[1,"    //% blockid=fontren_setcharecter\n"]]},{"start1":6322,"length1":43,"diffs":[[1,"    //% gid.shadow=fontren_tablenameshadow\n"]]},{"start1":10757,"length1":44,"diffs":[[1,"    //% blockid=fontren_setcharfromimgsheet\n"]]},{"start1":11085,"length1":43,"diffs":[[1,"    //% tid.shadow=fontren_tablenameshadow\n"]]},{"start1":12237,"length1":47,"diffs":[[1,"    //% blockid=fontren_setchararrfromimgsheet\n"]]},{"start1":12605,"length1":43,"diffs":[[1,"    //% tid.shadow=fontren_tablenameshadow\n"]]},{"start1":13748,"length1":36,"diffs":[[1,"    //% blockid=fontren_numofglyphs\n"]]},{"start1":13834,"length1":43,"diffs":[[1,"    //% gid.shadow=fontren_tablenameshadow\n"]]},{"start1":14121,"length1":36,"diffs":[[1,"    //% blockid=fontren_arrofgypimg\n"]]},{"start1":14212,"length1":43,"diffs":[[1,"    //% gid.shadow=fontren_tablenameshadow\n"]]},{"start1":14489,"length1":36,"diffs":[[1,"    //% blockid=fontren_arrofglyphs\n"]]},{"start1":14574,"length1":43,"diffs":[[1,"    //% gid.shadow=fontren_tablenameshadow\n"]]},{"start1":29792,"length1":39,"diffs":[[1,"    //% blockid=fontren_setimgfromtext\n"]]},{"start1":30016,"length1":43,"diffs":[[1,"    //% tid.shadow=fontren_tablenameshadow\n"]]},{"start1":30597,"length1":44,"diffs":[[1,"    //% blockid=fontren_setimgframefromtext\n"]]},{"start1":30832,"length1":43,"diffs":[[1,"    //% tid.shadow=fontren_tablenameshadow\n"]]},{"start1":31395,"length1":41,"diffs":[[1,"    //% blockid=fontren_stamptexttoframe\n"]]},{"start1":31643,"length1":45,"diffs":[[1,"    //% arrid.shadow=fontren_tablenameshadow\n"]]},{"start1":32600,"length1":44,"diffs":[[1,"    //% blockid=fontren_stamptextarrtoframe\n"]]},{"start1":32863,"length1":45,"diffs":[[1,"    //% arrid.shadow=fontren_tablenameshadow\n"]]},{"start1":33971,"length1":41,"diffs":[[1,"    //% blockid=fontren_setletterspacing\n"]]},{"start1":34240,"length1":44,"diffs":[[1,"    //% blockid=fontren_changeletterspacing\n"]]},{"start1":34513,"length1":35,"diffs":[[1,"    //% blockid=fontren_setlinegap\n"]]},{"start1":34765,"length1":38,"diffs":[[1,"    //% blockid=fontren_changelinegap\n"]]},{"start1":35078,"length1":40,"diffs":[[1,"    //% blockid=fontren_getalignmentval\n"]]},{"start1":35386,"length1":35,"diffs":[[1,"    //% blockid=fontren_presetfont\n"]]},{"start1":35479,"length1":43,"diffs":[[1,"    //% tid.shadow=fontren_tablenameshadow\n"]]},{"start1":36131,"length1":38,"diffs":[[1,"    //% blockid=fontren_sprite_create\n"]]},{"start1":36307,"length1":43,"diffs":[[1,"    //% Tid.shadow=fontren_tablenameshadow\n"]]},{"start1":36799,"length1":23,"diffs":[[1,""]]},{"start1":38207,"length1":43,"diffs":[[1,"        //% blockid=fontren_sprite_readtxt\n"]]},{"start1":38539,"length1":44,"diffs":[[1,"        //% blockid=fontren_sprite_setalign\n"]]},{"start1":39012,"length1":47,"diffs":[[1,"        //% blockid=fontren_sprite_setalignnum\n"]]},{"start1":39464,"length1":45,"diffs":[[1,"        //% blockid=fontren_sprite_setdialog\n"]]},{"start1":40001,"length1":47,"diffs":[[1,"        //% blockid=fontren_sprite_cleardialog\n"]]},{"start1":40446,"length1":43,"diffs":[[1,"        //% blockid=fontren_sprite_readtxt\n"]]},{"start1":40773,"length1":48,"diffs":[[1,"        //% blockid=fontren_sprite_setlinespace\n"]]},{"start1":41557,"length1":55,"diffs":[[1,"        //% blockid=fontren_sprite_setdefaultlinespace\n"]]},{"start1":42362,"length1":47,"diffs":[[1,"        //% blockid=fontren_sprite_settextdata\n"]]},{"start1":42818,"length1":48,"diffs":[[1,"        //% blockid=fontren_sprite_settextcolor\n"]]},{"start1":43668,"length1":46,"diffs":[[1,"        //% blockid=fontren_sprite_settableid\n"]]},{"start1":43762,"length1":47,"diffs":[[1,"        //% Tid.shadow=fontren_tablenameshadow\n"]]},{"start1":44158,"length1":48,"diffs":[[1,"        //% blockid=fontren_sprite_setpagewidth\n"]]},{"start1":44631,"length1":49,"diffs":[[1,"        //% blockid=fontren_sprite_playanimatiom\n"]]},{"start1":47048,"length1":50,"diffs":[[1,"        //% blockid=fontren_sprite_playanimisdone\n"]]}]}]},{"timestamp":1749440831681,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":36633,"length1":41,"diffs":[[1,"    //% fixedInstances\n    export class RenfontSprite extends Sprite {\n"]]},{"start1":37984,"length1":0,"diffs":[[1,"        /**\n         * get text data\n         * from unifont sprite\n         */\n        //% blockid=renfont_sprite_readtxt\n        //% block=\"get $this as text data\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=18\n        get getTextData() { return this.stxt }\n\n        /**\n         * set alignment as enum\n         * to unifont sprite\n         */\n        //% blockid=renfont_sprite_setalign\n        //% block=\" $this=variables_get set align to $alg\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=14\n        set setAlign(alg: align) {\n            if (this.salg == getAlign(alg)) return;\n            this.salg = getAlign(alg);\n            this.spriteUpdate();\n        }\n\n        /**\n         * set alignment as number\n         * to unifont sprite\n         */\n        //% blockid=renfont_sprite_setalignnum\n        //% block=\" $this set align value to $aln\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=12\n        set setAlignNum(aln: number) {\n            if (this.salg == aln) return;\n            this.salg = aln;\n            this.spriteUpdate();\n        }\n\n        /**\n         * add or set dialog frame\n         * to unifont sprite\n         */\n        //% blockid=renfont_sprite_setdialog\n        //% block=\" $this set dialog frame to $DlImg=dialog_image_picker\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=10\n        set setDialogTxt(DlImg: Image) {\n            if (this.sdim && (this.sdim.equals(DlImg) && (this.sdim.equals(image.create(0, 0))))) return;\n            this.sdim = DlImg;\n            this.spriteUpdate();\n        }\n\n        /**\n         * remove dialog frame\n         * at unifont sprite\n         */\n        //% blockid=renfont_sprite_cleardialog\n        //% block=\" $this clear dialog frame\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=9\n        public clearDialog() {\n            if (!(this.sdim)) { return; }\n            this.sdim = image.create(0, 0);\n            this.spriteUpdate();\n        }\n\n        /**\n         * get text data\n         * from unifont sprite\n         */\n        //% blockid=renfont_sprite_readtxt\n        //% block=\"get $this as text data\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=18\n        get getSpriteText() { return this.stxt }\n\n        /**\n         * set gap space \n         * to unifont sprite\n         */\n        //% blockid=renfont_sprite_setlinespace\n        //% block=\" $this set $gaptype to $value\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=8\n        public setGapSpr(gaptype: spacetype, value: number = 0) {\n            switch (gaptype) {\n                case 1:\n                    if (this.spacew == value) return;\n                    this.spacew = value\n                    break;\n                case 2:\n                    if (this.lineh == value) return;\n                    this.lineh = value\n                    break;\n                default:\n                    return;\n            }\n            this.spriteUpdate()\n        }\n\n        /**\n         * clear gap space\n         * at unifont sprite\n         */\n        //% blockid=renfont_sprite_setdefaultlinespace\n        //% block=\" $this set $gaptype to default value\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=7\n        public setDefaultGapSpr(gaptype: spacetype) {\n            switch (gaptype) {\n                case 1:\n                    if (this.spacew == undefined) return;\n                    this.spacew = undefined\n                    break;\n                case 2:\n                    if (this.lineh == undefined) return;\n                    this.lineh = undefined\n                    break;\n                default:\n                    return;\n            }\n            this.spriteUpdate()\n        }\n\n        /**\n         * set text to render\n         * to unifont sprite\n         */\n        //% blockid=renfont_sprite_settextdata\n        //% block=\" $this set text to $Text\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=20\n        public setSpriteText(Text: string = \"\") {\n            if (this.stxt == Text) return;\n            this.stxt = Text;\n            this.spriteUpdate();\n        }\n\n        /**\n         * set text color index\n         * to unifont sprite\n         */\n        //% blockid=renfont_sprite_settextcolor\n        //% block=\" $this set $colortexttype to $ncolor\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% ncolor.shadow=colorindexpicker\n        //% group=\"sprite mode\"\n        //% weight=6\n        public setSpriteTextCol(colortexttype: colortype, ncolor: number = 0) {\n            switch (colortexttype) {\n                case 1:\n                    if (this.scol == ncolor) return;\n                    this.scol = ncolor\n                    break;\n                case 2:\n                    if (this.bcol == ncolor) return;\n                    this.bcol = ncolor\n                    break;\n                default:\n                    return;\n            }\n            this.spriteUpdate()\n        }\n\n        /**\n         * set table id \n         * to unifont sprite\n         */\n        //% blockid=renfont_sprite_settableid\n        //% block=\" $this set Table id to $Tid\"\n        //% Tid.shadow=renfont_tablenameshadow\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=3\n        set setSpriteTableId(Tid: number) {\n            if (this.stid == Tid) return;\n            this.stid = Tid;\n            this.spriteUpdate();\n        }\n\n        /**\n         * set page width\n         * to unifont sprite\n         */\n        //% blockid=renfont_sprite_setpagewidth\n        //% block=\" $this set page width to $PageW\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=4\n        public setSpritePageWidth(PageW: number = 0) {\n            if (this.stxw == PageW) return;\n            this.stxw = PageW;\n            this.spriteUpdate();\n        }\n\n\n\n        /**\n         * play text animation\n         * from unifont sprite\n         */\n        //% blockid=renfont_sprite_playanimatiom\n        //% block=\" $this get animation play for pause type $delaymode in (ms) $secval||and run Background $paused\"\n        //% secval.defl=100\n        //% paused.shadow=toggleYesNo\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=2\n        public getSpriteAnimPlay(delaymode: delaytype, secval: number, paused: boolean = false) {\n            if (this.anim) return;\n            this.scval = 0\n            let umsec = 0, lensec = 0;\n            if (this.sdim) {\n                this.imgarr = stampStrArrToDialog(\n                    this.sdim,\n                    this.stxt,\n                    this.pagew,\n                    this.stid,\n                    this.scol,\n                    this.bcol,\n                    this.salg,\n                    this.spacew,\n                    this.lineh\n                )\n            } else {\n                this.imgarr = setTextImageArray(\n                    this.stxt,\n                    this.pagew,\n                    this.stid,\n                    this.scol,\n                    this.bcol,\n                    this.salg,\n                    this.spacew,\n                    this.lineh\n                )\n            }\n            switch (delaymode) {\n                case 1:\n                    this.scval = secval\n                    umsec = secval\n                    lensec = secval * this.imgarr.length\n                    break;\n                case 2:\n                    this.scval = secval / this.imgarr.length\n                    umsec = secval\n                    lensec = secval\n                    break;\n                default:\n                    return;\n            }\n            this.sidx = 0\n            if (!this.anim && !this.anip) {\n                this.anip = true;\n                this.anim = true;\n                animation.runImageAnimation(this, this.imgarr, this.scval, false)\n            } else if (this.image.equals(this.nimg)) {\n                this.anip = false;\n                this.anim = false;\n            }\n            setTimeout(function () {\n                this.anip = false;\n                this.anim = false;\n                this.setImage(this.nimg);\n            }, lensec)\n            if (paused) pause(lensec);\n        }\n\n        /**\n         * check unifont sprite\n         * playing animation until done\n         */\n        //% blockid=renfont_sprite_playanimisdone\n        //% block=\" $this get animation is stop\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=1\n        public animdone() {\n            return !(this.anim)\n        }\n\n"]]}]}]},{"timestamp":1749441422383,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":37429,"length1":25,"diffs":[[1,"        protected spriteUpdate() {\n"]]},{"start1":37536,"length1":354,"diffs":[[1,"                this.nimg = stampStrToDialog(this.sdim, this.stxt, this.pagew, this.stid, this.scol, this.bcol, this.salg, this.spacew, this.lineh)\n"]]},{"start1":37705,"length1":318,"diffs":[[1,"                this.nimg = setTextImage(this.stxt, this.pagew, this.stid, this.scol, this.bcol, this.salg, this.spacew, this.lineh)\n"]]},{"start1":37960,"length1":7906,"diffs":[[1,""]]}]}]},{"timestamp":1749442021238,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":157,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":1,"length1":199,"diffs":[[1,""]]},{"start1":5495,"length1":157,"diffs":[[1,"    //% block=\"$name\"\n    //% blockHidden=true shim=TD_ID\n    //% name.fieldEditor=\"autocomplete\" name.fieldOptions.decompileLiterals=true\n    //% name.fieldOptions.key=\"tablenameshadow\"\n"]]},{"start1":5722,"length1":70,"diffs":[[1,"    export function _tableKindShadow(name: number) {\n        return name\n"]]},{"start1":36633,"length1":48,"diffs":[[1,"    class RenfontSprite extends Sprite {\n"]]},{"start1":37429,"length1":35,"diffs":[[1,"        spriteUpdate() {\n"]]},{"start1":37526,"length1":148,"diffs":[[1,"                this.nimg = stampStrToDialog(\n                    this.sdim, \n                    this.stxt, \n                    this.pagew, \n                    this.stid, \n                    this.scol, \n                    this.bcol, \n                    this.salg, \n                    this.spacew, \n                    this.lineh\n                )\n"]]},{"start1":37901,"length1":133,"diffs":[[1,"                this.nimg = setTextImage(\n                    this.stxt, \n                    this.pagew, \n                    this.stid, \n                    this.scol, \n                    this.bcol, \n                    this.salg, \n                    this.spacew, \n                    this.lineh\n                )\n"]]},{"start1":38335,"length1":325,"diffs":[[1,"    }\n"]]},{"start1":38342,"length1":470,"diffs":[[1,""]]},{"start1":38343,"length1":451,"diffs":[[1,"    /**\n     * get text data\n     * from unifont sprite\n     */\n    //% blockid=renfont_sprite_readtxt\n    //% block=\"get $me as text data\"\n    //% me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=18\n    export function getTextData(me: RenfontSprite) { return me.stxt }\n"]]},{"start1":38626,"length1":540,"diffs":[[1,"    /**\n     * set alignment as enum\n     * to unifont sprite\n     */\n    //% blockid=renfont_sprite_setalign\n    //% block=\" $me set align to $alg\"\n    //% me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=14\n    export function setAlign(me: RenfontSprite, alg: align) {\n        if (me.salg == getAlign(alg)) return;\n        me.salg = getAlign(alg);\n        me.spriteUpdate();\n    }\n"]]},{"start1":39022,"length1":448,"diffs":[[1,"    /**\n     * set alignment as number\n     * to unifont sprite\n     */\n    //% blockid=renfont_sprite_setalignnum\n    //% block=\" $me set align value to $aln\"\n    //% me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=12\n    export function setAlignNum(me: RenfontSprite, aln: number) {\n        if (me.salg == aln) return;\n        me.salg = aln;\n        me.spriteUpdate();\n    }\n"]]},{"start1":39413,"length1":347,"diffs":[[1,"    /**\n     * add or set dialog frame\n     * to unifont sprite\n     */\n    //% blockid=renfont_sprite_setdialog\n    //% block=\" $me set dialog frame to $DlImg=dialog_image_picker\"\n    //% me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=10\n    export function setDialogTxt(me: RenfontSprite, DlImg: Image) {\n        if (me.sdim && (me.sdim.equals(DlImg) && (me.sdim.equals(image.create(0, 0))))) return;\n        me.sdim = DlImg;\n        me.spriteUpdate();\n    }\n"]]},{"start1":39889,"length1":782,"diffs":[[1,"    /**\n     * remove dialog frame\n     * at unifont sprite\n     */\n    //% blockid=renfont_sprite_cleardialog\n    //% block=\" $me clear dialog frame\"\n    //% me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=9\n    export function clearDialog(me: RenfontSprite) {\n        if (!(me.sdim)) { return; }\n        me.sdim = undefined;\n        me.spriteUpdate();\n    }\n"]]},{"start1":40263,"length1":801,"diffs":[[1,"    /**\n     * get text data\n     * from unifont sprite\n     */\n    //% blockid=renfont_sprite_readtxt\n    //% block=\"get $me as text data\"\n    //% me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=18\n    export function getSpriteText(me: RenfontSprite) { return me.stxt }\n"]]},{"start1":40548,"length1":443,"diffs":[[1,"    /**\n     * set gap space \n     * to unifont sprite\n     */\n    //% blockid=renfont_sprite_setlinespace\n    //% block=\" $me set $gaptype to $value\"\n    //% me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=8\n    export function setGapSpr(me: RenfontSprite, gaptype: spacetype, value: number = 0) {\n        switch (gaptype) {\n            case 1:\n                if (me.spacew == value) return;\n                me.spacew = value\n                break;\n            case 2:\n                if (me.lineh == value) return;\n                me.lineh = value\n                break;\n            default:\n                return;\n"]]},{"start1":41190,"length1":0,"diffs":[[1,"        me.spriteUpdate()\n    }\n"]]},{"start1":41223,"length1":846,"diffs":[[1,"    /**\n     * clear gap space\n     * at unifont sprite\n     */\n    //% blockid=renfont_sprite_setdefaultlinespace\n    //% block=\" $me set $gaptype to default value\"\n    //% me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=7\n    export function setDefaultGapSpr(me: RenfontSprite, gaptype: spacetype) {\n        switch (gaptype) {\n            case 1:\n                if (me.spacew == undefined) return;\n                me.spacew = undefined\n                break;\n            case 2:\n                if (me.lineh == undefined) return;\n                me.lineh = undefined\n                break;\n            default:\n                return;\n"]]},{"start1":41884,"length1":0,"diffs":[[1,"        me.spriteUpdate()\n    }\n"]]},{"start1":41917,"length1":488,"diffs":[[1,"    /**\n     * set text to render\n     * to unifont sprite\n     */\n    //% blockid=renfont_sprite_settextdata\n    //% block=\" $me set text to $Text\"\n    //% me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=20\n    export function setSpriteText(me: RenfontSprite, Text: string = \"\") {\n        if (me.stxt == Text) return;\n        me.stxt = Text;\n        me.spriteUpdate();\n    }\n"]]},{"start1":42307,"length1":453,"diffs":[[1,"    /**\n     * set text color index\n     * to unifont sprite\n     */\n    //% blockid=renfont_sprite_settextcolor\n    //% block=\" $me set $colortexttype to $ncolor\"\n    //% me.defl=myRenfont\n    //% ncolor.shadow=colorindexpicker\n    //% group=\"sprite mode\"\n    //% weight=6\n    export function setSpriteTextCol(me: RenfontSprite, colortexttype: colortype, ncolor: number = 0) {\n        switch (colortexttype) {\n            case 1:\n                if (me.scol == ncolor) return;\n                me.scol = ncolor\n                break;\n            case 2:\n                if (me.bcol == ncolor) return;\n                me.bcol = ncolor\n                break;\n            default:\n                return;\n"]]},{"start1":43019,"length1":0,"diffs":[[1,"        me.spriteUpdate()\n    }\n"]]},{"start1":43052,"length1":0,"diffs":[[1,"    /**\n     * set table id \n     * to unifont sprite\n     */\n    //% blockid=renfont_sprite_settableid\n    //% block=\" $me set Table id to $Tid\"\n    //% Tid.shadow=renfont_tablenameshadow\n    //% me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=3\n    export function setSpriteTableId(me: RenfontSprite, Tid: number) {\n        if (me.stid == Tid) return;\n        me.stid = Tid;\n        me.spriteUpdate();\n    }\n"]]},{"start1":43476,"length1":0,"diffs":[[1,"    /**\n     * set page width\n     * to unifont sprite\n     */\n    //% blockid=renfont_sprite_setpagewidth\n    //% block=\" $me set page width to $PageW\"\n    //% me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=4\n    export function setSpritePageWidth(me: RenfontSprite, PageW: number = 0) {\n        if (me.stxw == PageW) return;\n        me.stxw = PageW;\n        me.spriteUpdate();\n    }\n"]]},{"start1":43876,"length1":2406,"diffs":[[1,""]]},{"start1":43877,"length1":366,"diffs":[[1,"\n    /**\n     * play text animation\n     * from unifont sprite\n     */\n    //% blockid=renfont_sprite_playanimatiom\n    //% block=\" $me get animation play for pause type $delaymode in (ms) $secval||and run Background $paused\"\n    //% secval.defl=100\n    //% paused.shadow=toggleYesNo\n    //% me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=2\n    export function getSpriteAnimPlay(me: RenfontSprite, delaymode: delaytype, secval: number, paused: boolean = false) {\n        if (me.anim) return;\n        me.scval = 0\n        let umsec = 0, lensec = 0;\n        if (me.sdim) {\n            me.imgarr = stampStrArrToDialog(\n                me.sdim,\n                me.stxt,\n                me.pagew,\n                me.stid,\n                me.scol,\n                me.bcol,\n                me.salg,\n                me.spacew,\n                me.lineh\n            )\n        } else {\n            me.imgarr = setTextImageArray(\n                me.stxt,\n                me.pagew,\n                me.stid,\n                me.scol,\n                me.bcol,\n                me.salg,\n                me.spacew,\n                me.lineh\n            )\n"]]},{"start1":45036,"length1":0,"diffs":[[1,"        switch (delaymode) {\n            case 1:\n                me.scval = secval\n                umsec = secval\n                lensec = secval * me.imgarr.length\n                break;\n            case 2:\n                me.scval = secval / me.imgarr.length\n                umsec = secval\n                lensec = secval\n                break;\n            default:\n                return;\n        }\n        me.sidx = 0\n        if (!me.anim && !me.anip) {\n            me.anip = true;\n            me.anim = true;\n            animation.runImageAnimation(me, me.imgarr, me.scval, false)\n        } else if (me.image.equals(me.nimg)) {\n            me.anip = false;\n            me.anim = false;\n        }\n        setTimeout(function () {\n            me.anip = false;\n            me.anim = false;\n            me.setImage(me.nimg);\n        }, lensec)\n        if (paused) pause(lensec);\n    }\n"]]},{"start1":45923,"length1":0,"diffs":[[1,"    /**\n     * check unifont sprite\n     * playing animation until done\n     */\n    //% blockid=renfont_sprite_playanimisdone\n    //% block=\" $from get animation is stop\"\n    //% me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=1\n    export function animdone(me: RenfontSprite) {\n        return !(me.anim)\n"]]},{"start1":46247,"length1":1,"diffs":[[1,"}\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":323,"length1":75,"diffs":[[1,"    \"preferredEditor\": \"tsprj\",\n    \"yotta\": {\n        \"config\": {\n            \"PXT_GC_CHECKS\": 1\n        }\n    }\n"]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1749438682898,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>","main.ts":" ","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"arcade-renfont\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1749440483535,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"\nnamespace SpriteKind {\n    export const Renfont = SpriteKind.create()\n}\n\n//% block=\"Ren font\" color=\"#12d48a\" icon=\"\\uf031\"\nnamespace Renfont {\n\n    let rendering = false, tablename: number[] = [], ligs: string[][] = [], ligages: Image[][] = [], ligwidth: number[][] = [], ligsubw: number[][] = [], ligdir: number[][] = [], ligcol: number[][] = [], ligul: number[][] = [], storeid: number[] = [], letterspace: number = 1, curid: number = 0, lineheight: number = 1;\n\n    function gettableid(name: number) {\n        if (tablename.indexOf(name) < 0) {\n            tablename.push(name); storeid.push(curid); ligs.push([]); ligages.push([]); ligwidth.push([]); ligsubw.push([]); ligdir.push([]); ligcol.push([]); ligul.push([]); curid += 1;\n            return tablename.length - 1\n        }\n        return tablename.indexOf(name)\n    }\n\n    function drawTransparentImage(src: Image, to: Image, x: number, y: number) {\n        if (!src || !to) { return; }\n        to.drawTransparentImage(src, x, y)\n    }\n\n    function findCommand(tvj: string, chj: string = \"\", nvj: number): boolean {\n        if (((nvj < tvj.length && tvj.charAt(nvj)) && (nvj + 1 < tvj.length && tvj.charAt(nvj + 1) == \"\\\\\")) && ((nvj + 2 < tvj.length && chj.length <= 0))) { return true }\n        if (chj.length != 1) { return false }\n        if (((nvj + 1 < tvj.length && tvj.charAt(nvj + 1) == \"\\\\\")) && ((nvj + 2 < tvj.length && tvj.charAt(nvj + 2) == chj))) { return true }\n        return false\n    }\n\n    function deepChar(tid: number = 0, idx: number = 0, charstr: string = \"\", reverse: boolean = false) {\n        let ustr = charstr.charAt(idx)\n        let ic = 1\n        let uc = charstr.charAt(idx + ic)\n        let istr = \"\" + ustr + uc\n        if (ligs[tid].indexOf(istr) < 0) { return ustr }\n        while (ligs[tid].indexOf(istr) >= 0) {\n            ustr = \"\" + ustr + uc\n            if (reverse) ic--;\n            else ic++;\n            uc = charstr.charAt(idx + ic)\n            istr = \"\" + ustr + uc\n            if (idx + ic >= charstr.length) { break }\n        }\n        return ustr\n    }\n\n    function drawOutline(Inputi: Image, color: number, dir8: boolean) {\n        let dxl: number[] = [1, 0, -1, 0]\n        let dyl: number[] = [0, 1, 0, -1]\n        if (dir8) {\n            dxl = [1, 1, 1, 0, -1, -1, -1, 0]\n            dyl = [1, 0, -1, -1, -1, 0, 1, 1]\n        }\n        let Uinputi = Inputi.clone()\n        for (let curcol = 1; curcol < 16; curcol++) {\n            Uinputi.replace(curcol, color)\n        }\n        let Outputi = image.create(Inputi.width + 2, Inputi.height + 2)\n        for (let curdir = 0; curdir < Math.min(dxl.length, dyl.length); curdir++) {\n            drawTransparentImage(Uinputi, Outputi, 1 + dxl[curdir], 1 + dyl[curdir])\n        }\n        drawTransparentImage(Inputi, Outputi, 1, 1)\n        return Outputi\n    }\n\n    function SetImgFrame(ImgF: Image, Wh: number, Ht: number) {\n        let ImgOutput = image.create(Wh, Ht)\n        let Twidt = Math.floor(ImgF.width / 3)\n        let Theig = Math.floor(ImgF.height / 3)\n        let ImgTable: Image[] = []\n        let Uimg: Image = null\n        let sw = 0\n        let sh = 0\n        for (let hj = 0; hj < 3; hj++) {\n            for (let wi = 0; wi < 3; wi++) {\n                Uimg = image.create(Twidt, Theig)\n                drawTransparentImage(ImgF, Uimg, 0 - wi * Twidt, 0 - hj * Theig)\n                ImgTable.push(Uimg.clone())\n            }\n        }\n        for (let wi2 = 0; wi2 < Math.floor(Wh / Twidt); wi2++) {\n            for (let hj2 = 0; hj2 < Math.floor(Ht / Theig); hj2++) {\n                sw = Math.min(wi2 * Twidt, Wh - Twidt)\n                sh = Math.min(hj2 * Theig, Ht - Theig)\n                if (hj2 == 0 && wi2 == 0) {\n                    drawTransparentImage(ImgTable[0], ImgOutput, sw, sh)\n                } else if (hj2 == Math.floor(Ht / Theig) - 1 && wi2 == Math.floor(Wh / Twidt) - 1) {\n                    drawTransparentImage(ImgTable[8], ImgOutput, sw, sh)\n                } else if (hj2 == Math.floor(Ht / Theig) - 1 && wi2 == 0) {\n                    drawTransparentImage(ImgTable[6], ImgOutput, sw, sh)\n                } else if (hj2 == 0 && wi2 == Math.floor(Wh / Twidt) - 1) {\n                    drawTransparentImage(ImgTable[2], ImgOutput, sw, sh)\n                } else {\n                    if (wi2 > 0 && wi2 < Math.floor(Wh / Twidt) - 1) {\n                        if (hj2 == 0) {\n                            drawTransparentImage(ImgTable[1], ImgOutput, sw, sh)\n                        } else if (hj2 == Math.floor(Ht / Theig) - 1) {\n                            drawTransparentImage(ImgTable[7], ImgOutput, sw, sh)\n                        } else {\n                            drawTransparentImage(ImgTable[4], ImgOutput, sw, sh)\n                        }\n                    } else if (hj2 > 0 && hj2 < Math.floor(Ht / Theig) - 1) {\n                        if (wi2 == 0) {\n                            drawTransparentImage(ImgTable[3], ImgOutput, sw, sh)\n                        } else if (wi2 == Math.floor(Wh / Twidt) - 1) {\n                            drawTransparentImage(ImgTable[5], ImgOutput, sw, sh)\n                        } else {\n                            drawTransparentImage(ImgTable[4], ImgOutput, sw, sh)\n                        }\n                    } else {\n                        drawTransparentImage(ImgTable[4], ImgOutput, sw, sh)\n                    }\n                }\n            }\n        }\n        return ImgOutput\n    }\n\n    //% blockid=fontren_tablenameshadow\n    //% block=\"$name\"\n    //% group=\"create\"\n    //% weight=1\n    export function tableKindShadow(name: string) {\n        return name\n    }\n\n    /**\n     * add charcter glyph to the table\n     */\n    //% blockid=fontren_setcharecter\n    //% block=\"set table id $gid and set letter $glyph to img $imgi=screen_image_picker||and the letter can move? $notmove and stay on or under the letter? $onthechar and substract width $inchar erase col $bcol spacebar col $scol base col $mcol guard col $ncol\"\n    //% gid.shadow=fontren_tablenameshadow\n    //% bcol.shadow=colorindexpicker\n    //% scol.shadow=colorindexpicker\n    //% mcol.shadow=colorindexpicker\n    //% ncol.shadow=colorindexpicker\n    //% group=\"create\"\n    //% weight=2\n    export function setCharecter(gid: number, glyph: string = \"\", imgi: Image = image.create(5, 8), notmove: boolean = false, onthechar: boolean = false, inchar: boolean = false, bcol: number = 0, scol: number = 0, mcol: number = 0, ncol: number = 0) {\n        let tid = gettableid(gid), sncol = true, scnwidt = true, scwidt = false, wi3 = 0, wj = 0, si = 0;\n        if (bcol > 0 && bcol < 16) imgi.replace(bcol, 0)\n        let uimg = imgi.clone()\n        let start = false, stop = false\n        let bufv = pins.createBuffer(uimg.height), count = [], i = 0, x0 = 0, x1 = imgi.width, y0 = 0, y1 = imgi.height\n        for (let x = 0; x < uimg.width; x += i) {\n            count = []\n            for (i = 0; x + i < uimg.width; i++) {\n                uimg.getRows(x + i, bufv)\n                let sumif = bufv.toArray(NumberFormat.UInt8LE).filter(val => (val == mcol)).length\n                sumif += bufv.toArray(NumberFormat.UInt8LE).filter(val => (val == ncol && ncol > 0)).length\n                sumif += bufv.toArray(NumberFormat.UInt8LE).filter(val => (val == scol && scol > 0)).length\n                count.push(sumif)\n                if ((stop && (count[i - 1] > 0 && count[i] <= 0)) || (!stop && (start && count[i] <= 0) || (!start && count[i] > 0))) break;\n            }\n            if (start) {\n                if (stop) {\n                    if (x + i < uimg.width) x1 = x + i\n                } else {\n                    x1 = x + i\n                    stop = true\n                }\n            } else {\n                x0 = x + i\n                start = true\n            }\n        }\n        wi3 = x0, wj = x1\n        let vimg = image.create(Math.abs(x0 - x1), Math.abs(y0 - y1))\n        vimg.drawImage(imgi, -x0, -y0)\n        let imgj = vimg.clone()\n        let uwid = 0\n        if (inchar) {\n            for (let xw2 = imgi.width - 1; xw2 >= 0; xw2--) {\n                si = 0\n                for (let yh2 = 0; yh2 < imgi.height; yh2++) {\n                    if (imgi.getPixel(xw2, yh2) > 0) { si += 1 }\n                }\n                if (scnwidt) {\n                    if (scwidt) {\n                        if (si <= 0) { wj = xw2; scnwidt = false; break; }\n                    } else {\n                        if (si > 0) { wi3 = xw2; scwidt = true; }\n                    }\n                }\n            }\n            if (scnwidt) { wj = imgi.width; scnwidt = false; }\n            uwid = Math.abs(wi3 - wj);\n            if (true) uwid = wj\n        }\n\n        if (ligs[tid].indexOf(glyph) < 0) {\n            ligul[tid].push(ncol)\n            ligcol[tid].push(mcol)\n            ligs[tid].push(glyph); ligages[tid].push(imgj);\n            if (notmove) {\n                if (onthechar) {\n                    ligdir[tid].push(10)\n                } else {\n                    ligdir[tid].push(-10)\n                }\n                ligwidth[tid].push(0)\n                ligsubw[tid].push(0)\n            } else {\n                if (uwid == 0) {\n                    ligsubw[tid].push(imgj.width)\n                } else {\n                    ligsubw[tid].push(uwid)\n                }\n                ligwidth[tid].push(imgj.width)\n                ligdir[tid].push(0)\n            }\n        } else {\n            ligul[tid][ligs[tid].indexOf(glyph)] = ncol\n            ligcol[tid][ligs[tid].indexOf(glyph)] = mcol\n            ligages[tid][ligs[tid].indexOf(glyph)] = imgj\n            if (notmove) {\n                if (onthechar) {\n                    ligdir[tid][ligs[tid].indexOf(glyph)] = 10\n                } else {\n                    ligdir[tid][ligs[tid].indexOf(glyph)] = -10\n                }\n                ligwidth[tid][ligs[tid].indexOf(glyph)] = 0\n                ligsubw[tid][ligs[tid].indexOf(glyph)] = 0\n            } else {\n                if (uwid == 0) {\n                    ligsubw[tid][ligs[tid].indexOf(glyph)] = imgj.width\n                } else {\n                    ligsubw[tid][ligs[tid].indexOf(glyph)] = uwid\n                }\n                ligwidth[tid][ligs[tid].indexOf(glyph)] = imgj.width\n                ligdir[tid][ligs[tid].indexOf(glyph)] = 0\n            }\n        }\n    }\n\n    /**\n     * add more glyph\n     * from charcter sheet\n     * to the table\n     */\n    //% blockid=fontren_setcharfromimgsheet\n    //% block=\"set table id $tid and set img sheet $PngSheet=screen_image_picker with letters $GroupChar||and staying letters $StayChar letters on the letters $CharOnChar and Char Substact $CharSubW width $twid height $thei erase col $bcl space col $scl base col $mcl guard col $ncl\"\n    //% tid.shadow=fontren_tablenameshadow\n    //% bcl.shadow=colorindexpicker\n    //% scl.shadow=colorindexpicker\n    //% mcl.shadow=colorindexpicker\n    //% ncl.shadow=colorindexpicker\n    //% group=\"create\"\n    //% weight=4\n    export function setCharFromSheet(tid: number, PngSheet: Image = image.create(10, 16), GroupChar: string = \"\", StayChar: string = \"\", CharOnChar: string = \"\", CharSubW: string = \"\", twid: number = 5, thei: number = 8, bcl: number = 0, scl: number = 0, mcl: number = 0, ncl: number = 0) {\n        let gwid = Math.round(PngSheet.width / twid), uig = image.create(twid, thei), txi = 0, tyi = 0;\n        for (let tvn = 0; tvn < GroupChar.length; tvn++) {\n            uig = image.create(twid, thei); txi = twid * (tvn % gwid); tyi = thei * Math.floor(tvn / gwid); drawTransparentImage(PngSheet, uig, 0 - txi, 0 - tyi); setCharecter(tid, GroupChar.charAt(tvn), uig, StayChar.includes(GroupChar.charAt(tvn)), CharOnChar.includes(GroupChar.charAt(tvn)), CharSubW.includes(GroupChar.charAt(tvn)), bcl, scl, mcl, ncl);\n        }\n    }\n\n    /**\n     * add more long glyph array\n     * from charcter sheet\n     * to the table\n     */\n    //% blockid=fontren_setchararrfromimgsheet\n    //% block=\"set table id $tid and set img sheet $PngSheet=screen_image_picker with array of letters $GroupChar||and  array of staying letters $StayChar array of letters on the letters $CharOnChar and array of Char Substact $CharSubW width $twid height $thei erase col $bcl space col $scl base col $mcl guard col $ncl\"\n    //% tid.shadow=fontren_tablenameshadow\n    //% bcl.shadow=colorindexpicker\n    //% scl.shadow=colorindexpicker\n    //% mcl.shadow=colorindexpicker\n    //% ncl.shadow=colorindexpicker\n    //% group=\"create\"\n    //% weight=6\n    export function setCharArrFromSheet(tid: number, PngSheet: Image = image.create(10, 16), GroupChar: string[] = [], StayChar: string[] = [], CharOnChar: string[] = [], CharSubW: string[] = [], twid: number = 5, thei: number = 8, bcl: number = 0, scl: number = 0, mcl: number = 0, ncl: number = 0) {\n        let gwid2 = Math.round(PngSheet.width / twid), uig2 = image.create(twid, thei), txi2 = 0, tyi2 = 0;\n        for (let tvn2 = 0; tvn2 < GroupChar.length; tvn2++) {\n            uig2 = image.create(twid, thei); txi2 = twid * (tvn2 % gwid2); tyi2 = thei * Math.floor(tvn2 / gwid2); drawTransparentImage(PngSheet, uig2, 0 - txi2, 0 - tyi2); setCharecter(tid, GroupChar[tvn2], uig2, StayChar.indexOf(GroupChar[tvn2]) >= 0, CharOnChar.indexOf(GroupChar[tvn2]) >= 0, CharSubW.indexOf(GroupChar[tvn2]) >= 0, bcl, scl, mcl, ncl);\n        }\n    }\n\n    /**\n     * read the length of\n     * my charcter in table\n     */\n    //% blockid=fontren_numofglyphs\n    //% block=\"number of glyphs in table id $gid\"\n    //% gid.shadow=fontren_tablenameshadow\n    //% group=\"datainfo\"\n    //% weight=2\n    export function numOfGlyphs(gid: number): number {\n        let tid2 = gettableid(gid)\n        return ligs[tid2].length\n    }\n\n    /**\n     * read the array charcter image\n     * of my table\n     */\n    //% blockid=fontren_arrofgypimg\n    //% block=\"array of glyph images in table id $gid\"\n    //% gid.shadow=fontren_tablenameshadow\n    //% group=\"datainfo\"\n    //% weight=4\n    export function imageArray(gid: number): Image[] {\n        let tid3 = gettableid(gid)\n        return ligages[tid3]\n    }\n\n    /**\n     * read the array charcter\n     * of my table\n     */\n    //% blockid=fontren_arrofglyphs\n    //% block=\"array of glyphs in table id $gid\"\n    //% gid.shadow=fontren_tablenameshadow\n    //% group=\"datainfo\"\n    //% weight=6\n    export function glyphArray(gid: number): String[] {\n        let tid4 = gettableid(gid)\n        return ligs[tid4]\n    }\n\n    function findLetter(curstr: string, curidx: number, fromchr: string, tochr: string) {\n        let lenfrom = fromchr.length, lento = tochr.length\n        if (curstr.substr(curidx, lento) == tochr) return true\n        if (curstr.substr(curidx, lenfrom) != fromchr) return false\n        while (curidx < curstr.length) {\n            curidx++\n            if (curstr.substr(curidx, lento) == tochr) return true\n            if (curstr.substr(curidx, lenfrom) != fromchr) return false\n        }\n        return false\n    }\n\n    function setTextImgValue(arrm: boolean, input: string, iwidt: number, lid: number, icol: number = 0, bcol: number = 0, alm: number = 0, spacew: number = undefined, lineh: number = undefined) {\n        let tid5 = gettableid(lid)\n        if (rendering) { if (arrm) { return [image.create(1, 1)] as Image[] } else { return image.create(1, 1) as Image } }\n        rendering = true\n        if (lineh == undefined) { lineh = lineheight }\n        if (spacew == undefined) { spacew = letterspace }\n        let curchar = \"\", curchar2 = \"\", uhei = 0, outputarr: Image[] = [], lnwit: number[] = [], heig = 0, widt = 0, curwidt = 0, uwidt = 0, swidt = 0, nwidt = 0, wie = 0, hie = 0, hvi = 0;\n        for (let currentletter = 0; currentletter < input.length; currentletter++) {\n            curchar = deepChar(tid5, currentletter, input)\n            if (!(ligs[tid5].indexOf(curchar) < 0)) {\n                uwidt = ligwidth[tid5][(ligs[tid5].indexOf(curchar))]\n                if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] <= 0) {\n                    nwidt = ligages[tid5][(ligs[tid5].indexOf(curchar))].width\n                } else {\n                    nwidt = 0\n                }\n                if (uwidt > 0) {\n                    swidt = uwidt\n                } else {\n                    swidt = 0\n                }\n                curchar2 = deepChar(tid5, currentletter + 1, input)\n                if ((curchar2 != curchar) && Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]) > 0) {\n                    wie += Math.abs(ligwidth[tid5][ligs[tid5].indexOf(curchar)] - Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]))\n                } else if (Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar)] - ligwidth[tid5][ligs[tid5].indexOf(curchar)]) > 0) {\n                    wie += ligsubw[tid5][(ligs[tid5].indexOf(curchar))]\n                } else if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] > 0) {\n                    wie += Math.abs(uwidt - nwidt)\n                }\n                if ((iwidt <= 0 || !(findCommand(input, \"n\", currentletter))) && (ligwidth[tid5][(ligs[tid5].indexOf(input.charAt(Math.min(currentletter + Math.max(curchar.length, 1), input.length - 1))))] > 0 || currentletter + (curchar.length - 1) >= input.length - 1)) {\n                    wie += spacew\n                }\n                hvi = ligages[tid5][(ligs[tid5].indexOf(curchar))].height\n            } else if (input.charAt(currentletter) == \" \") {\n                wie += 3 * spacew\n            } else {\n                wie += 2 * spacew\n            }\n            uhei = Math.max(uhei, hvi), heig = Math.max(heig, hie + hvi)\n            if (iwidt > 0) {\n                if (wie >= iwidt || findCommand(input, \"n\", currentletter)) {\n                    if (uhei > hvi) {\n                        hie += uhei\n                    } else {\n                        hie += hvi\n                    }\n                    hie += lineh\n                    wie = 0;\n                    if (findCommand(input, \"n\", currentletter)) {\n                        currentletter += 2\n                    }\n                }\n            } else if (findCommand(input, \"n\", currentletter)) {\n                currentletter += 2\n            }\n            if (curchar.length - 1 > 0) { currentletter += curchar.length - 1 }\n        }\n        wie = 0, widt = 0\n        let hix = 0;\n        for (let currentletter2 = 0; currentletter2 < input.length; currentletter2++) {\n            curchar = deepChar(tid5, currentletter2, input)\n            if (!(ligs[tid5].indexOf(curchar) < 0)) {\n                uwidt = ligwidth[tid5][(ligs[tid5].indexOf(curchar))]\n                if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] <= 0) {\n                    nwidt = ligages[tid5][(ligs[tid5].indexOf(curchar))].width\n                } else {\n                    nwidt = 0\n                }\n                if (ligwidth[tid5][(ligs[tid5].indexOf(input.charAt(Math.min(currentletter2 + curchar.length, input.length - 1))))] <= 0) {\n                    swidt = uwidt\n                } else {\n                    swidt = 0\n                }\n                curchar2 = deepChar(tid5, currentletter2 + 1, input)\n                if ((curchar2 != curchar) && Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]) > 0) {\n                    wie += Math.abs(ligwidth[tid5][ligs[tid5].indexOf(curchar)] - Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]))\n                } else if (Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar)] - ligwidth[tid5][ligs[tid5].indexOf(curchar)]) > 0) {\n                    wie += ligsubw[tid5][(ligs[tid5].indexOf(curchar))]\n                } else if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] > 0) {\n                    wie += Math.abs(uwidt - nwidt)\n                }\n                if ((iwidt <= 0 || !(findCommand(input, \"n\", currentletter2))) && (ligwidth[tid5][(ligs[tid5].indexOf(input.charAt(Math.min(currentletter2 + Math.max(curchar.length, 1), input.length - 1))))] > 0 || currentletter2 + (curchar.length - 1) >= input.length - 1)) {\n                    wie += spacew\n                }\n            } else if (input.charAt(currentletter2) == \" \") {\n                wie += 3 * spacew\n            } else {\n                wie += 2 * spacew\n            }\n            if (false) { widt = Math.max(widt, wie) }\n            if (iwidt > 0) {\n                if (wie >= iwidt || findCommand(input, \"n\", currentletter2)) {\n                    widt = Math.max(widt, wie)\n                    lnwit.push(wie); wie = 0; hix += 1\n                    if (findCommand(input, \"n\", currentletter2)) {\n                        currentletter2 += 2\n                    }\n                } else {\n                    widt = Math.max(widt, wie)\n                }\n            } else if (findCommand(input, \"n\", currentletter2)) {\n                widt = Math.max(widt, wie); currentletter2 += 2;\n            } else {\n                widt = Math.max(widt, wie)\n            }\n            if (curchar.length - 1 > 0) { currentletter2 += curchar.length - 1 }\n        }\n        wie -= letterspace; lnwit.push(wie);\n        let hgi = 0, limg = image.create(lnwit[hgi], heig), scwidt2 = true, underc = false, scnwidt2 = false, rimg = image.create(8, 8), output = image.create(widt, heig), sc = 0; hie = 0; wie = 0; curwidt = 0;\n        let uoutput: Image = image.create(output.width, output.height), uuoutput: Image = image.create(output.width, output.height);\n        if (bcol > 0) { uoutput = image.create(output.width + 2, output.height + 2) }\n        for (let currentletter3 = 0; currentletter3 < input.length; currentletter3++) {\n            wie = 0; curchar = deepChar(tid5, currentletter3, input)\n            if (!(ligs[tid5].indexOf(curchar) < 0)) {\n                hvi = ligages[tid5][(ligs[tid5].indexOf(curchar))].height; uwidt = ligwidth[tid5][(ligs[tid5].indexOf(curchar))];\n                if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] <= 0) {\n                    nwidt = ligages[tid5][(ligs[tid5].indexOf(curchar))].width\n                } else {\n                    nwidt = 0\n                }\n                scwidt2 = false; scnwidt2 = false; wie = 0; rimg = ligages[tid5][(ligs[tid5].indexOf(curchar))].clone()\n                let ccol = ligul[tid5][ligs[tid5].indexOf(input.charAt(currentletter3))];\n                if (ligwidth[tid5][ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + curchar.length, input.length - 1)))] > 0 && ligdir[tid5][ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + curchar.length, input.length - 1)))] == 0) {\n                    rimg.replace(ccol, ligcol[tid5][ligs[tid5].indexOf(curchar)])\n                } else if (ligwidth[tid5][ligs[tid5].indexOf(curchar)] > 0 && ligdir[tid5][ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + curchar.length, input.length - 1)))] < 0) {\n                    rimg.replace(ccol, 0)\n                } else if (ligwidth[tid5][ligs[tid5].indexOf(curchar)] > 0 && ligdir[tid5][ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + curchar.length, input.length - 1)))] > 0) {\n                    rimg.replace(ccol, ligcol[tid5][ligs[tid5].indexOf(curchar)])\n                }\n                if (Math.abs(ligdir[tid5][ligs[tid5].indexOf(curchar)]) > 0 && Math.abs(ligdir[tid5][ligs[tid5].indexOf(input.charAt(Math.max(currentletter3 - 1, 0)))]) == 0) {\n                    sc = 1; wie = 0;\n                    while (sc > 0) {\n                        sc = 0\n                        for (let yh3 = 0; yh3 < rimg.height; yh3++) {\n                            if (limg.getPixel((curwidt - letterspace) - wie, yh3) == rimg.getPixel(rimg.width - 1, yh3) && (limg.getPixel((curwidt - letterspace) - wie, yh3) != 0 && limg.getPixel((curwidt - letterspace) - wie, yh3) != 0)) {\n                                sc += 1\n                            }\n                        }\n                        if (sc > 0 || (sc == 0 && wie > 0)) {\n                            wie += 1\n                        }\n                    }\n                }\n                if (wie < 0) { wie = Math.abs(wie) }\n                drawTransparentImage(rimg, limg, curwidt - (nwidt + wie), 0 + (hvi - ligages[tid5][(ligs[tid5].indexOf(curchar))].height))\n                if (ligwidth[tid5][(ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + curchar.length, input.length - 1))))] == 0) {\n                    swidt = uwidt\n                } else {\n                    swidt = 0\n                }\n                curchar2 = deepChar(tid5, currentletter3 + 1, input)\n                if ((curchar2 != curchar) && Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]) > 0) {\n                    curwidt += Math.abs(ligwidth[tid5][ligs[tid5].indexOf(curchar)] - Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]))\n                } else if (Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar)] - ligwidth[tid5][ligs[tid5].indexOf(curchar)]) > 0) {\n                    curwidt += ligsubw[tid5][(ligs[tid5].indexOf(curchar))]\n                } else if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] > 0) {\n                    curwidt += Math.abs(uwidt - nwidt)\n                }\n                if ((iwidt <= 0 || !(findCommand(input, \"n\", currentletter3))) && (ligwidth[tid5][(ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + Math.max(curchar.length, 1), input.length - 1))))] > 0 || currentletter3 + (curchar.length - 1) >= input.length - 1)) {\n                    curwidt += spacew\n                }\n            } else if (input.charAt(currentletter3) == \" \") {\n                if (iwidt > 0 && findLetter(input, currentletter3, \" \", \"\\\\n\") || findLetter(input, currentletter3, \" \", \"\\n\")) curwidt += 3 * spacew\n            } else {\n                if (iwidt > 0 && findLetter(input, currentletter3, \" \", \"\\\\n\") || findLetter(input, currentletter3, \" \", \"\\n\")) curwidt += 2 * spacew\n            }\n            uhei = Math.max(uhei, hvi)\n            uuoutput = output.clone()\n            if (alm < 0) {\n                drawTransparentImage(limg.clone(), uuoutput, 0, hie)\n            } else if (alm > 0) {\n                drawTransparentImage(limg.clone(), uuoutput, Math.abs(output.width - Math.min(curwidt, limg.width)), hie)\n            } else if (alm == 0) {\n                drawTransparentImage(limg.clone(), uuoutput, Math.abs((output.width / 2) - (Math.min(curwidt, limg.width) / 2)), hie)\n            }\n            if (icol > 0) {\n                for (let ico = 1; ico < 16; ico++) {\n                    uuoutput.replace(ico, icol)\n                }\n            }\n            if (bcol > 0) { uuoutput = drawOutline(uuoutput.clone(), bcol, true) } else { uoutput = uuoutput.clone() }\n            outputarr.push(uuoutput.clone())\n            if (iwidt > 0) {\n                if (curwidt >= iwidt || findCommand(input, \"n\", currentletter3)) {\n                    if (alm < 0) {\n                        drawTransparentImage(limg.clone(), output, 0, hie)\n                    } else if (alm > 0) {\n                        drawTransparentImage(limg.clone(), output, Math.abs(output.width - limg.width), hie)\n                    } else if (alm == 0) {\n                        drawTransparentImage(limg.clone(), output, Math.abs((output.width / 2) - (limg.width / 2)), hie)\n                    }\n                    if (icol > 0) {\n                        for (let ico2 = 1; ico2 < 16; ico2++) {\n                            output.replace(ico2, icol)\n                        }\n                    }\n                    if (bcol > 0) { uoutput = drawOutline(output.clone(), bcol, true) } else { uoutput = output.clone() }\n                    outputarr.push(uoutput.clone())\n                    hgi += 1; limg = image.create(lnwit[hgi], heig); curwidt = 0;\n                    if (uhei > hvi) {\n                        hie += uhei\n                    } else {\n                        hie += hvi\n                    }\n                    hie += lineh\n                    if (findCommand(input, \"n\", currentletter3) || input.charAt(currentletter3) == \"\\n\") {\n                        currentletter3 += 2\n                    }\n                }\n            } else if (findCommand(input, \"n\", currentletter3) || input.charAt(currentletter3) == \"\\n\") {\n                currentletter3 += 2\n            }\n            if (curchar.length - 1 > 0) { currentletter3 += curchar.length - 1 }\n        }\n        if (alm < 0) {\n            drawTransparentImage(limg.clone(), output, 0, hie)\n        } else if (alm > 0) {\n            drawTransparentImage(limg.clone(), output, Math.abs(output.width - limg.width), hie)\n        } else if (alm == 0) {\n            drawTransparentImage(limg.clone(), output, Math.abs((output.width / 2) - (limg.width / 2)), hie)\n        }\n        if (icol > 0) {\n            for (let ico3 = 1; ico3 < 16; ico3++) {\n                output.replace(ico3, icol)\n            }\n        }\n        if (bcol > 0) { uoutput = drawOutline(output, bcol, true) } else { uoutput = output.clone() }\n        outputarr.push(uoutput.clone())\n        rendering = false\n        if (arrm) { return outputarr as Image[] }\n        output = uoutput.clone()\n        return output as Image\n    }\n\n    /**\n     * render text from my table\n     * to the image\n     */\n    //% blockid=fontren_setimgfromtext\n    //% block=\"create the image of text $input in page width $iwidt from table id $tid||and fill col $icol with outline $bcol and got alignment $alm gapwidth $spacew lineheight $lineh\"\n    //% tid.shadow=fontren_tablenameshadow\n    //% alm.min=-1 alm.max=1 alm.defl=0\n    //% icol.shadow=colorindexpicker\n    //% bcol.shadow=colorindexpicker\n    //% group=\"render\"\n    //% weight=4\n    export function setTextImage(input: string = \"\", iwidt: number, tid: number, icol: number = 0, bcol: number = 0, alm: number = 0, spacew: number = 0, lineh: number = 0) {\n        return setTextImgValue(false, input, iwidt, tid, icol, bcol, alm, spacew, lineh) as Image\n    }\n\n    /**\n     * render text from my table\n     * like basic text animation\n     * to image array\n     */\n    //% blockid=fontren_setimgframefromtext\n    //% block=\"create the image frame of text $input in page width $iwidt from table id $tid||and fill col $icol with outline $bcol and got alignment $alm gapwidth $spacew lineheight $lineh\"\n    //% tid.shadow=fontren_tablenameshadow\n    //% alm.min=-1 alm.max=1 alm.defl=0\n    //% icol.shadow=colorindexpicker\n    //% bcol.shadow=colorindexpicker\n    //% group=\"render\"\n    //% weight=2\n    export function setTextImageArray(input: string = \"\", iwidt: number, tid: number, icol: number = 0, bcol: number = 0, alm: number = 0, spacew: number = 0, lineh: number = 0) {\n        return setTextImgValue(true, input, iwidt, tid, icol, bcol, alm, spacew, lineh) as Image[]\n    }\n\n    /** \n     * render text\n     * and stamp to \n     * my dialog frame\n     */\n    //% blockid=fontren_stamptexttoframe\n    //% block=\"StampStrImgToTheDialogFrame $Fimg=dialog_image_picker Text $Txt Text width $Wval TableId $arrid||And text color col $ucol and outline $bcol Alignment $ualm gapwidth $spacew lineheight $lineh\"\n    //% arrid.shadow=fontren_tablenameshadow\n    //% ualm.min=-1 ualm.max=1 ualm.defl=0\n    //% ucol.shadow=colorindexpicker\n    //% bcol.shadow=colorindexpicker\n    //% group=\"Dialog render\"\n    //% weight=4\n    export function stampStrToDialog(Fimg: Image, Txt: string, Wval: number, arrid: number, ucol: number = 0, bcol: number = 0, ualm: number = 0, spacew: number = 0, lineh: number = 0) {\n        let StrImg: Image = setTextImage(Txt, Wval, arrid, ucol, bcol, ualm, spacew, lineh)\n        let gapw = Math.floor(Fimg.width / 3)\n        let gaph = Math.floor(Fimg.height / 3)\n        let UfImg: Image = SetImgFrame(Fimg, StrImg.width + ((gapw * 2) + Math.floor(gapw / 2)), StrImg.height + ((gaph * 2) + Math.floor(gaph / 2)))\n        drawTransparentImage(StrImg.clone(), UfImg, gapw, gaph)\n        return UfImg\n    }\n\n    /**\n     * render text\n     * like basic text animation\n     * and stamp to \n     * my dialog frame\n     * as image array\n     */\n    //% blockid=fontren_stamptextarrtoframe\n    //% block=\"StampStrAnimToDialogFrame $Fimg=dialog_image_picker Text input $Txt In text width $Wval At table id $arrid||and text color $ucol with outline $bcol And alignment $ualm gapwidth $spacew lineheight $lineh\"\n    //% arrid.shadow=fontren_tablenameshadow\n    //% ualm.min=-1 ualm.max=1 ualm.defl=0\n    //% ucol.shadow=colorindexpicker\n    //% bcol.shadow=colorindexpicker\n    //% group=\"Dialog render\"\n    //% weight=2\n    export function stampStrArrToDialog(Fimg: Image, Txt: string, Wval: number, arrid: number, ucol: number = 0, bcol: number = 0, ualm: number = 0, spacew: number = 0, lineh: number = 0) {\n        let StrImg2: Image[] = setTextImageArray(Txt, Wval, arrid, ucol, bcol, ualm, spacew, lineh)\n        let gapw2 = Math.floor(Fimg.width / 3)\n        let gaph2 = Math.floor(Fimg.height / 3)\n        let UfImg2: Image = SetImgFrame(Fimg, StrImg2[0].width + ((gapw2 * 2) + Math.floor(gapw2 / 2)), StrImg2[0].height + ((gaph2 * 2) + Math.floor(gaph2 / 2)))\n        let imgArr: Image[] = []\n        let uimg: Image = null\n        for (let mgi = 0; mgi < StrImg2.length; mgi++) {\n            uimg = UfImg2.clone()\n            drawTransparentImage(StrImg2[mgi].clone(), uimg, gapw2, gaph2)\n            imgArr.push(uimg)\n        }\n        return imgArr\n    }\n\n    /**\n     * set the letterspace by value\n     */\n    //% blockid=fontren_setletterspacing\n    //% block=\"set letter spacing to $input\"\n    //% group=\"main property\"\n    //% weight=8\n    export function setSpace(input: number) {\n        letterspace = input\n    }\n\n    /**\n     * change the letterspace by value\n     */\n    //% blockid=fontren_changeletterspacing\n    //% block=\"change letter spacing by $input\"\n    //% group=\"main property\"\n    //% weight=6\n    export function changeSpace(input: number) {\n        letterspace += input\n    }\n\n    /**\n     * set the line gap by value\n     */\n    //% blockid=fontren_setlinegap\n    //% block=\"set line gap by $input\"\n    //% group=\"main property\"\n    //% weight=4\n    export function setLine(input: number) {\n        lineheight = input\n    }\n\n    /**\n     * change the line gap by value\n     */\n    //% blockid=fontren_changelinegap\n    //% block=\"change line gap by $input\"\n    //% group=\"main property\"\n    //% weight=2\n    export function changeLine(input: number) {\n        lineheight += input\n    }\n\n    export enum align { left = -1, center = 0, right = 1 }\n\n    /**\n     * get alignment value\n     */\n    //% blockid=fontren_getalignmentval\n    //% block=\"get $alg of alignment\"\n    //% group=\"main property\"\n    export function getAlign(alg: align) {\n        return alg\n    }\n\n    export enum tempfont { MainFont = 1, ArcadeFont = 2, LatinMini = 3 }\n\n    /**\n     * set charcter\n     * from template\n     */\n    //% blockid=fontren_presetfont\n    //% block=\"SetupPresetFont $tempf with table id $tid\"\n    //% tid.shadow=fontren_tablenameshadow\n    //% group=\"create\"\n    //% weight=10\n    export function SetupPresetFont(tempf: tempfont, tid: number) {\n        switch (tempf) {\n            case 1: default: _mainfont(tid); break;\n            case 2: _arcadefont(tid); break;\n            case 3: _latinmini(tid); break;\n        }\n    }\n\n    export enum SprDataNumType { Tcol = 1, Bcol = 2, PageW = 3, Talg = 4 }\n\n    export enum spacetype { letterspace = 1, lineheight = 2 }\n\n    export enum colortype { solidcolor = 1, outlinecolor = 2 }\n\n    export enum delaytype { delaypermsec = 1, multisec = 2 }\n\n    /**\n     * create the renfont as sprite\n     */\n    //% blockid=fontren_sprite_create\n    //% block=\"create renfont sprite as $Text in color $Col with outline $Bcol in alignment $alg and tableid $Tid||and page width $PageW\"\n    //% Tid.shadow=fontren_tablenameshadow\n    //% Col.shadow=colorindexpicker\n    //% Bcol.shadow=colorindexpicker\n    //% blockSetVariable=\"myRenfont\"\n    //% group=\"sprite mode\"\n    //% weight=22\n    export function createRenfontSprite(Text: string, Col: number, Bcol: number, alg: align, Tid: number, PageW: number = 0) {\n        let renfontSprite = new RenfontSprite(Text, Col, Bcol, alg, Tid, PageW)\n        renfontSprite.setKind(SpriteKind.Renfont)\n        return renfontSprite\n    }\n\n    export class RenfontSprite extends Sprite {\n        stxt: string\n        scol: number\n        stid: number\n        stxw: number\n        salg: number\n        pagew: number\n        spacew: number\n        lineh: number\n        bcol: number\n        scval: number\n        sidx: number\n        anim: boolean\n        anip: boolean\n        sdim: Image\n        nimg: Image\n        imgarr: Image[]\n\n        constructor(txt: string, tcol: number, bcol: number, alg: align, tid: number, pagew: number = 0) {\n            super(image.create(0, 0))\n            this.stxt = txt, this.scol = tcol, this.bcol = bcol, this.salg = alg, this.stid = tid, this.pagew = pagew\n            this.spriteUpdate()\n            this.setPosition(Math.round(scene.screenWidth() / 2), Math.round(scene.screenHeight() / 2))\n        }\n\n        protected spriteUpdate() {\n            if (this.sdim && !(this.sdim).equals(image.create(0, 0))) {\n                this.nimg = stampStrToDialog(this.sdim, this.stxt, this.pagew, this.stid, this.scol, this.bcol, this.salg, this.spacew, this.lineh)\n            } else {\n                this.nimg = setTextImage(this.stxt, this.pagew, this.stid, this.scol, this.bcol, this.salg, this.spacew, this.lineh)\n            }\n            if (this.image.equals(this.nimg)) return;\n            this.setImage(this.nimg)\n        }\n\n        /**\n         * get text data\n         * from unifont sprite\n         */\n        //% blockid=fontren_sprite_readtxt\n        //% block=\"get $this as text data\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=18\n        get getTextData() { return this.stxt }\n\n        /**\n         * set alignment as enum\n         * to unifont sprite\n         */\n        //% blockid=fontren_sprite_setalign\n        //% block=\" $this=variables_get set align to $alg\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=14\n        set setAlign(alg: align) {\n            if (this.salg == getAlign(alg)) return;\n            this.salg = getAlign(alg);\n            this.spriteUpdate();\n        }\n\n        /**\n         * set alignment as number\n         * to unifont sprite\n         */\n        //% blockid=fontren_sprite_setalignnum\n        //% block=\" $this set align value to $aln\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=12\n        set setAlignNum(aln: number) {\n            if (this.salg == aln) return;\n            this.salg = aln;\n            this.spriteUpdate();\n        }\n\n        /**\n         * add or set dialog frame\n         * to unifont sprite\n         */\n        //% blockid=fontren_sprite_setdialog\n        //% block=\" $this set dialog frame to $DlImg=dialog_image_picker\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=10\n        set setDialogTxt(DlImg: Image) {\n            if (this.sdim && (this.sdim.equals(DlImg) && (this.sdim.equals(image.create(0, 0))))) return;\n            this.sdim = DlImg;\n            this.spriteUpdate();\n        }\n\n        /**\n         * remove dialog frame\n         * at unifont sprite\n         */\n        //% blockid=fontren_sprite_cleardialog\n        //% block=\" $this clear dialog frame\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=9\n        public clearDialog() {\n            if (!(this.sdim)) { return; }\n            this.sdim = image.create(0, 0);\n            this.spriteUpdate();\n        }\n\n        /**\n         * get text data\n         * from unifont sprite\n         */\n        //% blockid=fontren_sprite_readtxt\n        //% block=\"get $this as text data\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=18\n        get getSpriteText() { return this.stxt }\n\n        /**\n         * set gap space \n         * to unifont sprite\n         */\n        //% blockid=fontren_sprite_setlinespace\n        //% block=\" $this set $gaptype to $value\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=8\n        public setGapSpr(gaptype: spacetype, value: number = 0) {\n            switch (gaptype) {\n                case 1:\n                    if (this.spacew == value) return;\n                    this.spacew = value\n                    break;\n                case 2:\n                    if (this.lineh == value) return;\n                    this.lineh = value\n                    break;\n                default:\n                    return;\n            }\n            this.spriteUpdate()\n        }\n\n        /**\n         * clear gap space\n         * at unifont sprite\n         */\n        //% blockid=fontren_sprite_setdefaultlinespace\n        //% block=\" $this set $gaptype to default value\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=7\n        public setDefaultGapSpr(gaptype: spacetype) {\n            switch (gaptype) {\n                case 1:\n                    if (this.spacew == undefined) return;\n                    this.spacew = undefined\n                    break;\n                case 2:\n                    if (this.lineh == undefined) return;\n                    this.lineh = undefined\n                    break;\n                default:\n                    return;\n            }\n            this.spriteUpdate()\n        }\n\n        /**\n         * set text to render\n         * to unifont sprite\n         */\n        //% blockid=fontren_sprite_settextdata\n        //% block=\" $this set text to $Text\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=20\n        public setSpriteText(Text: string = \"\") {\n            if (this.stxt == Text) return;\n            this.stxt = Text;\n            this.spriteUpdate();\n        }\n\n        /**\n         * set text color index\n         * to unifont sprite\n         */\n        //% blockid=fontren_sprite_settextcolor\n        //% block=\" $this set $colortexttype to $ncolor\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% ncolor.shadow=colorindexpicker\n        //% group=\"sprite mode\"\n        //% weight=6\n        public setSpriteTextCol(colortexttype: colortype, ncolor: number = 0) {\n            switch (colortexttype) {\n                case 1:\n                    if (this.scol == ncolor) return;\n                    this.scol = ncolor\n                    break;\n                case 2:\n                    if (this.bcol == ncolor) return;\n                    this.bcol = ncolor\n                    break;\n                default:\n                    return;\n            }\n            this.spriteUpdate()\n        }\n\n        /**\n         * set table id \n         * to unifont sprite\n         */\n        //% blockid=fontren_sprite_settableid\n        //% block=\" $this set Table id to $Tid\"\n        //% Tid.shadow=fontren_tablenameshadow\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=3\n        set setSpriteTableId(Tid: number) {\n            if (this.stid == Tid) return;\n            this.stid = Tid;\n            this.spriteUpdate();\n        }\n\n        /**\n         * set page width\n         * to unifont sprite\n         */\n        //% blockid=fontren_sprite_setpagewidth\n        //% block=\" $this set page width to $PageW\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=4\n        public setSpritePageWidth(PageW: number = 0) {\n            if (this.stxw == PageW) return;\n            this.stxw = PageW;\n            this.spriteUpdate();\n        }\n\n\n\n        /**\n         * play text animation\n         * from unifont sprite\n         */\n        //% blockid=fontren_sprite_playanimatiom\n        //% block=\" $this get animation play for pause type $delaymode in (ms) $secval||and run Background $paused\"\n        //% secval.defl=100\n        //% paused.shadow=toggleYesNo\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=2\n        public getSpriteAnimPlay(delaymode: delaytype, secval: number, paused: boolean = false) {\n            if (this.anim) return;\n            this.scval = 0\n            let umsec = 0, lensec = 0;\n            if (this.sdim) {\n                this.imgarr = stampStrArrToDialog(\n                    this.sdim,\n                    this.stxt,\n                    this.pagew,\n                    this.stid,\n                    this.scol,\n                    this.bcol,\n                    this.salg,\n                    this.spacew,\n                    this.lineh\n                )\n            } else {\n                this.imgarr = setTextImageArray(\n                    this.stxt,\n                    this.pagew,\n                    this.stid,\n                    this.scol,\n                    this.bcol,\n                    this.salg,\n                    this.spacew,\n                    this.lineh\n                )\n            }\n            switch (delaymode) {\n                case 1:\n                    this.scval = secval\n                    umsec = secval\n                    lensec = secval * this.imgarr.length\n                    break;\n                case 2:\n                    this.scval = secval / this.imgarr.length\n                    umsec = secval\n                    lensec = secval\n                    break;\n                default:\n                    return;\n            }\n            this.sidx = 0\n            if (!this.anim && !this.anip) {\n                this.anip = true;\n                this.anim = true;\n                animation.runImageAnimation(this, this.imgarr, this.scval, false)\n            } else if (this.image.equals(this.nimg)) {\n                this.anip = false;\n                this.anim = false;\n            }\n            setTimeout(function () {\n                this.anip = false;\n                this.anim = false;\n                this.setImage(this.nimg);\n            }, lensec)\n            if (paused) pause(lensec);\n        }\n\n        /**\n         * check unifont sprite\n         * playing animation until done\n         */\n        //% blockid=fontren_sprite_playanimisdone\n        //% block=\" $this get animation is stop\"\n        //% this.shadow=variables_get this.defl=myRenfont\n        //% group=\"sprite mode\"\n        //% weight=1\n        public animdone() {\n            return !(this.anim)\n        }\n\n    }\n}\n","main-temp.ts":"\nnamespace Renfont {\n\n    export function _mainfont(tid: number = 0) {\n        setCharFromSheet(\n            tid,\n            _loadImg(\"image|img.1|111|112|514|1|1|15|1|1|1|15|8|1|1|15|3|1|1|15|43|1|1|15|1|1|1|15|14|1|1|15|23|1|1|15|9|1|1|15|3|1|1|15|8|1|1|15|1|1|1|15|37|1|1|15|6|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|4|1|5|15|2|1|3|15|3|1|1|15|3|1|1|15|8|1|1|15|9|1|1|15|3|1|1|15|7|1|5|15|25|1|3|15|1|1|1|15|1|1|1|15|4|1|1|15|14|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|1|1|1|15|16|1|1|15|5|1|1|15|7|1|1|15|1|1|1|15|6|1|1|15|20|1|1|15|2|1|3|15|4|1|1|15|13|1|5|15|2|1|1|15|2|1|1|15|4|1|2|15|2|1|1|15|4|1|1|15|1|1|1|15|16|1|1|15|5|1|1|15|6|1|1|15|3|1|1|15|5|1|1|15|20|1|1|15|2|1|1|15|1|1|1|15|4|1|1|15|14|1|1|15|1|1|1|15|4|1|5|15|5|1|1|15|6|1|1|15|17|1|1|15|5|1|1|15|14|1|5|15|11|1|5|15|2|1|1|15|2|1|1|15|1|1|1|15|4|1|1|15|13|1|5|15|5|1|1|15|2|1|1|15|3|1|1|15|2|1|2|15|2|1|1|15|1|1|1|15|1|1|1|15|14|1|1|15|5|1|1|15|16|1|1|15|45|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|15|1|1|15|5|1|1|15|16|1|1|15|7|1|1|15|22|1|1|15|14|1|1|15|1|1|1|15|4|1|5|15|2|1|1|15|3|1|3|15|3|1|2|15|1|1|1|15|15|1|1|15|3|1|1|15|25|1|1|15|46|1|1|15|33|1|1|15|3|1|1|15|24|1|1|15|82|1|1|15|1|1|1|15|828|1|1|15|4|1|3|15|6|1|1|15|6|1|3|15|5|1|3|15|7|1|1|15|4|1|5|15|4|1|3|15|4|1|5|15|4|1|3|15|5|1|3|15|30|1|1|15|4|1|1|15|3|1|1|15|4|1|2|15|5|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|2|15|4|1|1|15|7|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|29|1|1|15|4|1|2|15|2|1|1|15|5|1|1|15|9|1|1|15|7|1|1|15|4|1|1|15|1|1|1|15|4|1|1|15|7|1|1|15|10|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|1|15|14|1|1|15|5|1|1|15|1|1|1|15|1|1|1|15|5|1|1|15|8|1|1|15|6|1|2|15|4|1|1|15|2|1|1|15|4|1|4|15|4|1|4|15|7|1|1|15|5|1|3|15|5|1|4|15|5|1|1|15|7|1|1|15|13|1|1|15|6|1|1|15|2|1|2|15|5|1|1|15|7|1|1|15|9|1|1|15|3|1|5|15|7|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|5|1|1|15|3|1|1|15|7|1|1|15|20|1|1|15|6|1|1|15|6|1|1|15|3|1|1|15|5|1|1|15|6|1|1|15|6|1|1|15|3|1|1|15|6|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|5|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|1|15|6|1|1|15|5|1|1|15|8|1|3|15|5|1|3|15|4|1|5|15|4|1|3|15|7|1|1|15|5|1|3|15|5|1|3|15|5|1|1|15|7|1|3|15|5|1|3|15|6|1|1|15|7|1|1|15|109|1|1|15|918|1|3|15|5|1|4|15|4|1|3|15|4|1|4|15|5|1|3|15|4|1|4|15|4|1|5|15|3|1|5|15|4|1|3|15|4|1|1|15|3|1|1|15|4|1|3|15|6|1|2|15|11|1|2|15|6|1|1|15|3|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|5|1|2|15|5|1|5|15|5|1|2|15|8|1|1|15|2|1|1|15|2|1|2|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|7|1|1|15|7|1|1|15|3|1|1|15|5|1|1|15|4|1|1|15|19|1|1|15|6|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|5|15|3|1|4|15|4|1|1|15|7|1|1|15|3|1|1|15|3|1|3|15|5|1|3|15|5|1|1|15|2|1|2|15|3|1|5|15|5|1|1|15|5|1|2|15|5|1|5|15|5|1|2|15|6|1|1|15|4|1|1|15|2|1|3|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|2|15|11|1|2|15|14|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|30|1|1|15|6|1|5|15|2|1|1|15|3|1|1|15|3|1|4|15|5|1|3|15|4|1|4|15|4|1|5|15|3|1|1|15|8|1|3|15|4|1|1|15|3|1|1|15|4|1|3|15|1006|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|4|1|4|15|5|1|3|15|4|1|4|15|5|1|3|15|4|1|5|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|6|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|7|1|2|15|1|1|2|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|5|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|6|1|1|15|3|1|1|15|1|1|1|15|5|1|1|15|7|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|9|1|1|15|5|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|6|1|1|15|3|1|2|15|6|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|2|1|2|15|3|1|1|15|3|1|1|15|3|1|4|15|4|1|1|15|3|1|1|15|3|1|4|15|5|1|3|15|6|1|1|15|5|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|5|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|5|1|1|15|5|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|5|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|4|1|3|15|4|1|1|15|3|1|1|15|3|1|5|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|4|1|1|15|8|1|2|15|1|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|6|1|1|15|6|1|3|15|6|1|1|15|6|1|1|15|1|1|1|15|807|1|3|15|9|1|3|15|8|1|1|15|14|1|1|15|72|1|1|15|13|1|1|15|7|1|1|15|1|1|1|15|14|1|1|15|44|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|5|15|6|1|1|15|4|1|1|15|8|1|1|15|6|1|1|15|3|1|1|15|27|1|1|15|19|1|1|15|11|1|1|15|1|1|1|15|4|1|1|15|3|1|1|15|7|1|1|15|6|1|1|15|5|1|1|15|7|1|1|15|38|1|1|15|19|1|1|15|11|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|7|1|1|15|7|1|1|15|5|1|1|15|7|1|1|15|30|1|4|15|4|1|1|15|1|1|2|15|5|1|3|15|5|1|2|15|1|1|1|15|4|1|3|15|5|1|1|15|6|1|1|15|1|1|1|15|6|1|1|15|8|1|1|15|6|1|1|15|6|1|1|15|34|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|2|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|6|1|1|15|6|1|1|15|9|1|1|15|7|1|1|15|5|1|1|15|31|1|4|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|3|1|5|15|3|1|1|15|1|1|1|15|6|1|1|15|5|1|1|15|10|1|1|15|7|1|1|15|5|1|1|15|30|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|6|1|1|15|3|1|1|15|5|1|1|15|5|1|5|15|6|1|1|15|8|1|1|15|4|1|1|15|31|1|4|15|3|1|4|15|5|1|3|15|5|1|4|15|4|1|4|15|29|1|1|15|13|1|1|15|96|1|3|15|9|1|3|15|14|1|5|15|830|1|2|15|11|1|1|15|9|1|1|15|7|1|1|15|5|1|1|15|8|1|1|15|63|1|1|15|13|1|1|15|9|1|1|15|7|1|1|15|5|1|1|15|8|1|1|15|62|1|3|15|5|1|2|15|1|1|1|15|3|1|1|15|1|1|2|15|20|1|1|15|2|1|1|15|5|1|1|15|6|1|2|15|1|1|1|15|4|1|1|15|1|1|2|15|5|1|3|15|4|1|1|15|1|1|2|15|5|1|4|15|3|1|1|15|1|1|2|15|5|1|4|15|4|1|1|15|5|1|1|15|2|1|2|15|3|1|2|15|2|1|1|15|5|1|1|15|7|1|1|15|5|1|1|15|1|1|1|15|6|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|8|1|1|15|5|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|1|15|5|1|2|15|7|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|8|1|3|15|5|1|1|15|6|1|4|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|1|15|5|1|1|15|1|1|1|15|6|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|4|15|5|1|4|15|3|1|1|15|11|1|1|15|4|1|1|15|9|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|1|15|5|1|1|15|2|1|1|15|6|1|1|15|5|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|4|1|1|15|11|1|1|15|3|1|1|15|7|1|4|15|11|1|4|15|21|1|1|15|46|1|1|15|11|1|1|15|98|1|1|15|11|1|1|15|551|1|3|15|79|1|2|15|4|1|1|15|5|1|2|15|15|1|1|15|1|1|1|15|78|1|1|15|6|1|1|15|7|1|1|15|14|1|3|15|20|1|1|15|57|1|1|15|6|1|1|15|7|1|1|15|21|1|5|15|3|1|5|15|3|1|1|15|57|1|1|15|6|1|1|15|7|1|1|15|20|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|4|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|5|15|6|1|1|15|6|1|1|15|7|1|1|15|7|1|2|15|1|1|1|15|9|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|2|1|1|15|6|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|4|1|1|15|3|1|1|15|6|1|1|15|5|1|2|15|7|1|1|15|8|1|2|15|4|1|1|15|1|1|2|15|10|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|1|15|2|1|1|15|6|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|5|1|1|15|6|1|1|15|1|1|1|15|6|1|1|15|8|1|1|15|6|1|1|15|7|1|1|15|20|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|6|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|9|1|1|15|6|1|1|15|7|1|1|15|20|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|3|1|2|15|5|1|4|15|5|1|1|15|6|1|1|15|1|1|1|15|4|1|1|15|3|1|1|15|5|1|1|15|5|1|5|15|6|1|1|15|6|1|1|15|7|1|1|15|21|1|5|15|3|1|5|15|43|1|1|15|17|1|1|15|6|1|1|15|7|1|1|15|76|1|1|15|19|1|2|15|4|1|1|15|5|1|2|15|147|1|ENDimg|\"),\n            \"™!\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°©®\",\n            \"\",\n            \"\",\n            \"\",\n            8,\n            16,\n            1,\n            0,\n            15,\n            3\n        )\n        setCharFromSheet(\n            tid,\n            _loadImg(\"image|img.1|111|96|668|1|3|15|4|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|3|15|5|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|2|1|1|15|5|1|2|15|4|1|3|15|4|1|3|15|5|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|4|1|3|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|3|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|3|15|2|1|1|15|6|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|3|1|3|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|7|1|1|15|6|1|1|15|6|1|2|15|6|1|2|15|4|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|3|1|3|15|1|1|1|15|3|1|3|15|1|1|1|15|5|1|1|15|2|1|1|15|3|1|1|15|2|1|1|15|4|1|2|15|1|1|1|15|2|1|2|15|2|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|1|1|1|15|5|1|2|15|5|1|1|15|1|1|1|15|3|1|1|15|1|1|3|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|4|15|2|1|2|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|2|1|1|15|3|1|1|15|4|1|3|15|5|1|3|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|2|15|1|1|2|15|6|1|1|15|6|1|2|15|3|1|2|15|1|1|2|15|4|1|3|15|5|1|3|15|3|1|1|15|1|1|2|15|1|1|1|15|2|1|2|15|1|1|3|15|3|1|2|15|2|1|1|15|110|1|1|15|99|1|1|3|2|1|1|3|3|1|5|15|99|1|3|3|4|1|3|15|1|1|1|15|435|1|1|15|110|1|1|15|110|1|1|15|11|1|3|15|5|1|3|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|4|1|3|15|5|1|1|15|1|1|1|15|5|1|3|15|3|1|2|15|1|1|2|15|5|1|4|15|2|1|2|15|2|1|1|15|3|1|2|15|3|1|1|15|2|1|2|15|3|1|1|15|3|1|2|15|2|1|1|15|2|1|1|15|3|1|1|15|3|1|3|15|4|1|4|15|2|1|1|15|1|1|4|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|6|1|1|15|5|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|4|1|4|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|3|1|2|15|1|1|1|15|5|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|3|15|1|1|1|15|3|1|3|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|2|1|2|15|2|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|3|1|1|15|1|1|1|15|1|1|4|15|2|1|2|15|1|1|4|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|1|1|3|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|2|15|2|1|2|15|2|1|1|15|4|1|2|15|6|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|1|1|1|15|2|1|2|15|1|1|1|15|1|1|2|15|2|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|4|1|4|15|3|1|2|15|1|1|2|15|3|1|5|15|3|1|5|15|3|1|1|15|3|1|1|15|6|1|1|15|106|1|2|15|1|1|2|15|3|1|2|3|1|1|1|3|99|1|1|15|1|1|1|15|1|1|1|15|3|1|1|3|1|1|2|3|436|1|1|15|15|1|1|15|94|1|1|15|15|1|1|15|88|1|1|15|5|1|1|15|15|1|1|15|55|1|1|15|15|1|1|15|15|1|1|15|2|1|2|15|2|1|1|15|2|1|2|15|3|1|1|15|2|1|2|15|3|1|1|15|4|1|3|15|3|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|5|1|2|15|6|1|3|15|5|1|3|15|5|1|3|15|3|1|2|15|3|1|1|15|4|1|3|15|3|1|2|15|2|1|2|15|2|1|2|15|2|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|10|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|7|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|2|1|1|15|4|1|2|15|1|1|1|15|6|1|1|15|6|1|2|15|1|1|1|15|7|1|1|15|3|1|3|15|1|1|1|15|3|1|1|15|1|1|4|15|3|1|2|15|1|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|4|1|1|15|2|1|1|15|3|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|6|1|1|15|5|1|1|15|2|1|2|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|2|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|2|15|2|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|3|1|2|15|2|1|1|15|2|1|3|15|1|1|1|15|3|1|1|15|3|1|1|15|6|1|1|15|5|1|1|15|3|1|1|15|6|1|2|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|2|1|1|15|2|1|2|15|1|1|2|15|3|1|5|15|5|1|2|15|5|1|2|15|2|1|1|15|6|1|2|15|3|1|1|15|3|1|1|15|3|1|5|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|495|1|3|15|5|1|2|15|5|1|1|15|2|1|1|15|91|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|1|1|2|15|40|1|1|15|51|1|1|15|6|1|1|15|2|1|1|15|5|1|1|15|1|1|1|15|28|1|1|15|3|1|1|15|3|1|4|15|53|1|1|15|6|1|1|15|1|1|1|15|7|1|1|15|28|1|4|15|4|1|2|15|1|1|2|15|14|1|1|15|37|1|1|15|8|1|1|15|7|1|1|15|44|1|3|15|4|1|4|15|13|1|3|15|7|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|5|1|3|15|5|1|3|15|5|1|3|15|19|1|1|15|3|1|1|15|3|1|3|15|1|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|6|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|22|1|1|15|7|1|1|15|4|1|3|15|8|1|1|15|6|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|7|1|1|15|18|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|15|1|1|15|6|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|4|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|7|1|1|15|18|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|2|1|1|15|7|1|1|15|6|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|4|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|7|1|1|15|18|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|8|1|1|15|6|1|2|15|3|1|2|15|1|1|2|15|5|1|2|15|7|1|2|15|6|1|2|15|3|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|7|1|1|15|18|1|5|15|3|1|5|15|15|1|1|15|6|1|2|15|3|1|2|15|1|1|2|15|5|1|2|15|7|1|2|15|6|1|2|15|3|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|7|1|1|15|94|1|1|15|7|1|1|15|7|1|1|15|94|1|1|15|7|1|1|15|7|1|1|15|94|1|1|15|7|1|1|15|7|1|1|15|298|1|2|15|6|1|1|15|6|1|2|15|5|1|3|15|1|1|1|15|5|1|1|15|21|1|2|15|17|1|1|15|6|1|2|15|5|1|1|15|1|1|1|15|21|1|1|15|7|1|1|15|7|1|2|15|4|1|1|15|1|1|2|15|5|1|3|15|3|1|2|15|15|1|2|15|5|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|53|1|1|15|4|1|2|15|120|1|1|15|103|1|3|15|2|1|4|15|101|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|104|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|104|1|1|15|1|1|4|15|105|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|104|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|104|1|1|15|1|1|4|15|109|1|1|15|45|1|2|15|6|1|1|15|1|1|1|15|101|1|1|15|7|1|2|15|518|1|1|15|111|1|1|15|110|1|1|15|18|1|1|15|5|1|1|15|1|1|1|15|4|1|1|15|12|1|1|15|6|1|1|15|7|1|1|15|34|1|4|15|4|1|4|15|4|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|1|1|1|15|4|1|3|15|5|1|3|15|6|1|1|15|6|1|1|15|1|1|1|15|2|1|1|15|3|1|3|15|7|1|1|15|34|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|1|1|3|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|7|1|1|15|10|1|2|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|7|1|3|15|35|1|1|15|4|1|1|15|2|1|1|15|1|1|2|15|1|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|7|1|1|15|12|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|7|1|1|15|2|1|1|15|35|1|1|15|4|1|1|15|2|1|1|15|1|1|2|15|1|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|1|1|2|15|4|1|1|15|1|1|2|15|5|1|2|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|34|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|6|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|35|1|4|15|4|1|2|15|2|1|1|15|3|1|5|15|2|1|2|15|1|1|1|15|1|1|1|15|3|1|4|15|4|1|4|15|5|1|3|15|3|1|1|15|1|1|1|15|1|1|2|15|3|1|1|15|1|1|2|15|3|1|2|15|3|1|1|15|366|1|ENDimg|\"),\n            \"กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรลวศษสหฬอฮะาเแโใไฤฦๅั็ํิีึืุู์่้๊๋ำ฿๐๑๒๓๔๕๖๗๘๙\",\n            \"ั็ํิีึืุู์่้๊๋\",\n            \"ั็ํิีึื์่้๊๋\",\n            \"ำ\",\n            8,\n            16,\n            1,\n            0,\n            15,\n            3\n        )\n        setCharArrFromSheet(\n            tid,\n            _loadImg(\"image|img.1|111|48|3|1|1|15|7|1|2|15|6|1|2|15|7|1|1|15|7|1|1|15|6|1|2|15|6|1|2|15|7|1|1|15|6|1|1|15|6|1|2|15|6|1|2|15|7|1|1|15|7|1|1|15|7|1|2|15|5|1|1|15|8|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|6|1|1|15|7|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|5|1|1|15|7|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|6|1|1|15|8|1|2|15|29|1|1|15|31|1|1|15|7|1|1|15|8|1|1|15|7|1|1|15|5|1|1|15|1|1|1|15|18|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|3|1|4|15|5|1|4|15|4|1|4|15|4|1|4|15|19|1|4|15|4|1|4|15|4|1|4|15|4|1|4|15|6|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|3|1|2|15|1|1|2|15|4|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|2|1|5|15|4|1|5|15|1225|1|2|15|6|1|1|15|7|1|1|15|6|1|2|15|6|1|2|15|7|1|1|15|8|1|1|15|6|1|2|15|6|1|2|15|6|1|1|15|7|1|1|15|6|1|2|15|6|1|2|15|7|1|1|15|6|1|1|15|1|1|1|15|4|1|3|15|6|1|1|15|7|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|7|1|1|15|7|1|2|15|5|1|1|15|1|1|1|15|4|1|3|15|6|1|1|15|7|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|13|1|1|15|31|1|1|15|31|1|1|15|31|1|1|15|23|1|1|15|7|1|1|15|7|1|1|15|7|1|1|15|7|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|4|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|3|1|5|15|2|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|4|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|2|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|1225|1|1|15|5|1|2|15|6|1|2|15|7|1|1|15|26|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|35|1|1|15|6|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|25|1|1|15|7|1|1|15|7|1|1|15|7|1|1|15|59|1|1|15|86|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|34|1|1|15|6|1|2|15|5|1|1|15|1|1|1|15|34|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|22|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|149|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|2|1|3|15|1|1|2|15|2|1|3|15|1|1|2|15|68|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|2|15|3|1|1|15|2|1|2|15|3|1|1|15|2|1|1|15|70|1|1|15|7|1|1|15|7|1|1|15|7|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|70|1|1|15|7|1|1|15|7|1|1|15|7|1|2|15|3|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|70|1|1|15|7|1|1|15|7|1|1|15|7|1|2|15|3|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|70|1|1|15|7|1|1|15|7|1|1|15|7|1|3|15|2|1|1|15|2|1|3|15|2|1|1|15|2|1|1|15|70|1|1|15|7|1|1|15|7|1|1|15|7|1|3|15|2|1|1|15|2|1|3|15|2|1|1|15|2|1|1|15|99|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|99|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|99|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|63|1|ENDimg|\"),\n            [\n                \"ั่\",\n                \"ั้\",\n                \"ั๊\",\n                \"ั๋\",\n                \"ํ่\",\n                \"ํ้\",\n                \"ํ๊\",\n                \"ํ๋\",\n                \"็่\",\n                \"็้\",\n                \"็๊\",\n                \"็๋\",\n                \"ิ่\",\n                \"ิ้\",\n                \"ิ๊\",\n                \"ิ๋\",\n                \"ี่\",\n                \"ี้\",\n                \"ี๊\",\n                \"ี๋\",\n                \"ึ่\",\n                \"ึ้\",\n                \"ึ๊\",\n                \"ึ๋\",\n                \"ื่\",\n                \"ื้\",\n                \"ื๊\",\n                \"ื๋\",\n                \"่ำ\",\n                \"้ำ\",\n                \"๊ำ\",\n                \"๋ำ\",\n                \"ฤๅ\",\n                \"ฦๅ\",\n                \"ิ์\",\n                \"ี์\",\n                \"ึ์\",\n                \"ื์\"\n            ],\n            [\n                \"ั่\",\n                \"ั้\",\n                \"ั๊\",\n                \"ั๋\",\n                \"ํ่\",\n                \"ํ้\",\n                \"ํ๊\",\n                \"ํ๋\",\n                \"็่\",\n                \"็้\",\n                \"็๊\",\n                \"็๋\",\n                \"ิ่\",\n                \"ิ้\",\n                \"ิ๊\",\n                \"ิ๋\",\n                \"ี่\",\n                \"ี้\",\n                \"ี๊\",\n                \"ี๋\",\n                \"ึ่\",\n                \"ึ้\",\n                \"ึ๊\",\n                \"ึ๋\",\n                \"ื่\",\n                \"ื้\",\n                \"ื๊\",\n                \"ื๋\",\n                \"ิ์\",\n                \"ี์\",\n                \"ึ์\",\n                \"ื์\"\n            ],\n            [\n                \"ั่\",\n                \"ั้\",\n                \"ั๊\",\n                \"ั๋\",\n                \"ํ่\",\n                \"ํ้\",\n                \"ํ๊\",\n                \"ํ๋\",\n                \"็่\",\n                \"็้\",\n                \"็๊\",\n                \"็๋\",\n                \"ิ่\",\n                \"ิ้\",\n                \"ิ๊\",\n                \"ิ๋\",\n                \"ี่\",\n                \"ี้\",\n                \"ี๊\",\n                \"ี๋\",\n                \"ึ่\",\n                \"ึ้\",\n                \"ึ๊\",\n                \"ึ๋\",\n                \"ื่\",\n                \"ื้\",\n                \"ื๊\",\n                \"ื๋\",\n                \"ิ์\",\n                \"ี์\",\n                \"ึ์\",\n                \"ื์\"\n            ],\n            [\n                \"่ำ\",\n                \"้ำ\",\n                \"๊ำ\",\n                \"๋ำ\"\n            ],\n            8,\n            16,\n            1,\n            0,\n            0,\n            0\n        )\n    }\n\n    export function _arcadefont(tid: number = 0) {\n        setCharFromSheet(\n            tid,\n            _loadImg(\"image|img.1|111|56|9|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|6|1|1|15|5|1|2|15|2|1|1|15|12|1|1|15|7|1|1|15|6|1|1|15|7|1|1|15|3|1|1|15|35|1|1|15|7|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|4|15|3|1|2|15|1|1|1|15|4|1|2|15|7|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|1|1|1|15|36|1|1|15|14|1|5|15|3|1|1|15|1|1|1|15|8|1|1|15|4|1|1|15|1|1|1|15|13|1|1|15|8|1|1|15|6|1|5|15|5|1|1|15|29|1|1|15|15|1|1|15|1|1|1|15|5|1|3|15|6|1|1|15|6|1|1|15|14|1|1|15|8|1|1|15|7|1|1|15|1|1|1|15|6|1|1|15|29|1|1|15|14|1|5|15|5|1|1|15|1|1|1|15|4|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|11|1|1|15|8|1|1|15|6|1|1|15|3|1|1|15|3|1|5|15|11|1|5|15|27|1|1|15|1|1|1|15|4|1|4|15|5|1|1|15|1|1|2|15|3|1|1|15|2|1|1|15|12|1|1|15|8|1|1|15|16|1|1|15|5|1|2|15|14|1|2|15|6|1|1|15|15|1|1|15|1|1|1|15|6|1|1|15|5|1|1|15|2|1|2|15|4|1|2|15|1|1|1|15|12|1|1|15|6|1|1|15|17|1|1|15|6|1|1|15|14|1|2|15|93|1|1|15|26|1|1|15|109|1|1|15|5|1|2|15|6|1|1|15|7|1|2|15|6|1|2|15|8|1|1|15|4|1|4|15|5|1|2|15|5|1|4|15|5|1|2|15|6|1|2|15|31|1|1|15|4|1|1|15|2|1|1|15|4|1|2|15|6|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|6|1|2|15|4|1|1|15|7|1|1|15|2|1|1|15|7|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|2|15|6|1|2|15|9|1|2|15|4|1|1|15|5|1|1|15|1|1|2|15|5|1|1|15|9|1|1|15|6|1|1|15|6|1|1|15|1|1|1|15|4|1|3|15|5|1|3|15|8|1|1|15|5|1|2|15|5|1|1|15|2|1|1|15|4|1|2|15|6|1|2|15|7|1|2|15|5|1|1|15|6|1|2|15|1|1|1|15|5|1|1|15|8|1|1|15|8|1|1|15|4|1|1|15|2|1|1|15|7|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|5|1|1|15|2|1|1|15|5|1|3|15|20|1|1|15|7|1|1|15|6|1|1|15|2|1|1|15|5|1|1|15|7|1|1|15|6|1|1|15|2|1|1|15|4|1|5|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|5|1|1|15|6|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|2|15|6|1|2|15|7|1|2|15|4|1|1|15|8|1|2|15|5|1|3|15|5|1|4|15|5|1|2|15|8|1|1|15|5|1|2|15|6|1|2|15|6|1|1|15|7|1|2|15|6|1|2|15|5|1|2|15|7|1|1|15|9|1|2|15|98|1|1|15|142|1|3|15|5|1|3|15|5|1|2|15|5|1|3|15|6|1|2|15|5|1|3|15|5|1|4|15|4|1|4|15|5|1|2|15|5|1|1|15|2|1|1|15|4|1|3|15|8|1|1|15|11|1|2|15|6|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|5|1|1|15|9|1|1|15|3|1|5|15|5|1|2|15|7|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|3|15|5|1|1|15|7|1|1|15|2|1|1|15|4|1|3|15|5|1|3|15|5|1|1|15|7|1|4|15|5|1|1|15|9|1|1|15|15|1|1|15|5|1|1|15|5|1|1|15|1|1|2|15|4|1|4|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|7|1|1|15|1|1|2|15|4|1|1|15|2|1|1|15|5|1|1|15|9|1|1|15|3|1|5|15|5|1|2|15|12|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|5|1|1|15|6|1|1|15|2|1|1|15|11|1|2|15|8|1|1|15|6|1|4|15|3|1|1|15|2|1|1|15|4|1|3|15|6|1|2|15|5|1|3|15|5|1|4|15|4|1|1|15|8|1|2|15|5|1|1|15|2|1|1|15|4|1|3|15|6|1|2|15|226|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|5|1|2|15|5|1|3|15|6|1|2|15|5|1|3|15|6|1|2|15|5|1|5|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|5|1|1|15|7|1|2|15|1|1|2|15|3|1|2|15|1|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|3|1|2|15|6|1|1|15|7|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|2|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|5|1|1|15|8|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|5|1|1|15|4|1|2|15|6|1|1|15|7|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|3|15|5|1|2|15|1|1|1|15|4|1|3|15|7|1|1|15|7|1|1|15|5|1|1|15|2|1|1|15|5|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|5|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|1|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|5|1|1|15|2|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|4|15|4|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|5|1|2|15|5|1|1|15|8|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|5|1|2|15|7|1|1|15|6|1|2|15|7|1|1|15|6|1|1|15|1|1|1|15|4|1|1|15|3|1|1|15|129|1|2|15|6|1|1|15|7|1|2|15|15|1|1|15|6|1|1|15|54|1|1|15|3|1|1|15|3|1|4|15|4|1|1|15|8|1|1|15|7|1|1|15|14|1|1|15|1|1|1|15|6|1|1|15|14|1|1|15|18|1|1|15|14|1|1|15|4|1|1|15|3|1|1|15|6|1|1|15|4|1|1|15|8|1|1|15|7|1|1|15|14|1|1|15|1|1|1|15|21|1|1|15|18|1|1|15|13|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|6|1|1|15|5|1|1|15|9|1|1|15|6|1|1|15|31|1|3|15|4|1|3|15|6|1|3|15|5|1|3|15|5|1|2|15|6|1|1|15|7|1|1|15|6|1|1|15|6|1|1|15|10|1|1|15|5|1|1|15|30|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|1|1|2|15|4|1|3|15|6|1|1|15|5|1|1|15|7|1|1|15|10|1|1|15|5|1|1|15|30|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|2|1|1|15|4|1|2|15|7|1|1|15|7|1|1|15|5|1|4|15|4|1|2|15|10|1|1|15|3|1|2|15|6|1|5|15|20|1|3|15|4|1|3|15|6|1|3|15|5|1|3|15|5|1|3|15|5|1|1|15|244|1|1|15|8|1|1|15|5|1|1|15|7|1|2|15|63|1|1|15|6|1|3|15|28|1|1|15|8|1|1|15|30|1|3|15|6|1|3|15|21|1|1|15|5|1|1|15|2|1|1|15|4|1|3|15|5|1|2|15|7|1|2|15|5|1|1|15|1|1|1|15|6|1|1|15|6|1|2|15|1|1|1|15|4|1|3|15|6|1|2|15|5|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|1|1|1|15|6|1|3|15|4|1|3|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|5|1|1|15|8|1|1|15|5|1|2|15|7|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|2|15|1|1|1|15|4|1|2|15|7|1|1|15|6|1|3|15|4|1|1|15|2|1|1|15|5|1|1|15|6|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|6|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|3|15|6|1|3|15|4|1|1|15|9|1|2|15|5|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|3|15|6|1|1|15|6|1|1|15|2|1|1|15|4|1|3|15|5|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|5|1|2|15|5|1|1|15|10|1|1|15|4|1|1|15|7|1|3|15|7|1|1|15|5|1|2|15|69|1|1|15|10|1|1|15|76|1|2|15|5|1|1|15|7|1|2|15|94|1|1|15|6|1|1|15|8|1|1|15|77|1|1|15|2|1|1|15|13|1|1|15|6|1|1|15|8|1|1|15|45|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|4|15|4|1|2|15|6|1|1|15|8|1|2|15|6|1|2|15|1|1|1|15|34|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|2|15|5|1|1|15|2|1|1|15|6|1|1|15|6|1|1|15|6|1|1|15|8|1|1|15|6|1|1|15|1|1|2|15|35|1|1|15|2|1|1|15|5|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|4|1|2|15|6|1|3|15|5|1|1|15|7|1|1|15|6|1|1|15|8|1|1|15|46|1|3|15|6|1|1|15|6|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|4|15|5|1|2|15|5|1|1|15|7|1|2|15|78|1|2|15|76|1|ENDimg|\"),\n            \"!\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\",\n            \"\",\n            \"\",\n            \"\",\n            8,\n            8,\n            1,\n            0,\n            0,\n            0\n        )\n    }\n\n    export function _latinmini(tid: number = 0) {\n        setCharFromSheet(\n            tid,\n            _loadImg(\"image|img.1|79|32|80|1|1|15|2|1|2|15|3|1|2|15|1|1|2|15|2|1|3|15|1|1|3|15|2|1|2|15|1|1|1|15|1|1|1|15|1|1|3|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|2|1|3|15|1|1|2|15|2|1|3|15|2|1|2|15|1|1|4|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|3|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|1|1|3|15|1|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|2|1|1|15|1|1|1|15|1|1|3|15|2|1|1|15|4|1|1|15|1|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|2|15|1|1|2|15|2|1|3|15|1|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|2|15|2|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|2|15|1|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|1|15|80|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|72|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|3|15|2|1|1|15|2|1|2|15|2|1|2|15|4|1|1|15|1|1|3|15|2|1|2|15|1|1|3|15|1|1|2|15|3|1|2|15|10|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|2|15|4|1|1|15|3|1|1|15|2|1|2|15|1|1|1|15|3|1|1|15|5|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|6|1|1|15|1|1|1|15|3|1|2|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|3|15|6|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|5|1|1|15|1|1|3|15|3|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|10|1|1|15|3|1|2|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|3|15|1|1|3|15|1|1|3|15|1|1|3|15|1|1|2|15|4|1|1|15|1|1|2|15|2|1|2|15|2|1|1|15|4|1|2|15|1|1|2|15|14|1|1|15|81|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|37|1|1|15|7|1|1|15|35|1|1|15|1|1|1|15|4|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|14|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|2|15|3|1|1|15|2|1|2|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|2|15|2|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|4|1|1|15|1|1|3|15|2|1|2|15|1|1|2|15|3|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|2|15|3|1|2|15|1|1|1|15|9|1|1|15|6|1|1|15|7|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|10|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|2|15|8|1|1|15|2|1|1|15|2|1|1|15|3|1|3|15|1|1|2|15|2|1|2|15|19|1|1|15|1|1|1|15|4|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|20|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|54|1|1|15|33|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|238|1|1|15|3|1|1|15|153|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|70|1|1|15|7|1|1|15|65|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|ENDimg|\"),\n            \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-*/()[]{}<=>^\\\\|%#$_!?'\\\":;.,\",\n            \"\",\n            \"\",\n            \"\",\n            4,\n            8,\n            1,\n            2,\n            15,\n            15\n        )\n        setCharFromSheet(\n            tid,\n            _loadImg(\"image|img.1|79|32|80|1|1|15|2|1|2|15|3|1|2|15|1|1|2|15|2|1|3|15|1|1|3|15|2|1|2|15|1|1|1|15|1|1|1|15|1|1|3|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|2|1|3|15|1|1|2|15|2|1|3|15|2|1|2|15|1|1|4|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|3|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|1|1|3|15|1|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|2|1|1|15|1|1|1|15|1|1|3|15|2|1|1|15|4|1|1|15|1|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|2|15|1|1|2|15|2|1|3|15|1|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|2|15|2|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|2|15|1|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|1|15|80|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|72|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|3|15|2|1|1|15|2|1|2|15|2|1|2|15|4|1|1|15|1|1|3|15|2|1|2|15|1|1|3|15|1|1|2|15|3|1|2|15|10|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|2|15|4|1|1|15|3|1|1|15|2|1|2|15|1|1|1|15|3|1|1|15|5|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|6|1|1|15|1|1|1|15|3|1|2|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|3|15|6|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|5|1|1|15|1|1|3|15|3|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|10|1|1|15|3|1|2|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|3|15|1|1|3|15|1|1|3|15|1|1|3|15|1|1|2|15|4|1|1|15|1|1|2|15|2|1|2|15|2|1|1|15|4|1|2|15|1|1|2|15|14|1|1|15|81|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|37|1|1|15|7|1|1|15|35|1|1|15|1|1|1|15|4|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|14|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|2|15|3|1|1|15|2|1|2|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|2|15|2|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|4|1|1|15|1|1|3|15|2|1|2|15|1|1|2|15|3|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|2|15|3|1|2|15|1|1|1|15|9|1|1|15|6|1|1|15|7|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|10|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|2|15|8|1|1|15|2|1|1|15|2|1|1|15|3|1|3|15|1|1|2|15|2|1|2|15|19|1|1|15|1|1|1|15|4|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|20|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|54|1|1|15|33|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|238|1|1|15|3|1|1|15|153|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|70|1|1|15|7|1|1|15|65|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|ENDimg|\"),\n            \"abcdefghijklmnopqrstuvwxyz\",\n            \"\",\n            \"\",\n            \"\",\n            4,\n            8,\n            1,\n            2,\n            15,\n            15\n        )\n    }\n\n}\n","main-dataserial.ts":"\nnamespace Renfont {\n\n    let cidk: { [key: string]: number } = {}\n\n    export function _indexKeyShadow(name: string) {\n        return name\n    }\n\n    export function _startIdxKey(name: string, start: number) {\n        cidk[name] = start\n    }\n\n    export function _getIdxKey(name: string) {\n        return cidk[name]\n    }\n\n    export function _write(strval: string) {\n        let oval = \"\", curc = \"\"\n        for (let i = 0; i < strval.length; i++) {\n            curc = strval.charAt(i)\n            if (\"\\\\|\".includes(curc)) {\n                oval = \"\" + oval + \"\\\\\"\n            }\n            oval = \"\" + oval + curc\n        }\n        oval = \"\" + oval + \"|\"\n        return oval\n    }\n\n    export function _read(txt: string, name: string) {\n        if (cidk[name] == null) return \"\";\n        let idx = cidk[name]\n        let oval = \"\", curc = \"\"\n        while (idx < txt.length) {\n            curc = txt.charAt(idx)\n            if (\"|\".includes(curc)) {\n                break\n            } else if (\"\\\\\".includes(curc)) {\n                idx += 1\n                curc = txt.charAt(idx)\n            }\n            oval = \"\" + oval + curc\n            idx += 1\n        }\n        idx += 1, cidk[name] = idx\n        return oval\n    }\n\n    export function _saveImg(InputImg: Image) {\n        let OutputStr = \"\"\n        OutputStr = \"\" + OutputStr + _write(\"image\")\n        OutputStr = \"\" + OutputStr + _write(\"img.1\")\n        OutputStr = \"\" + OutputStr + _write(convertToText(InputImg.width))\n        OutputStr = \"\" + OutputStr + _write(convertToText(InputImg.height))\n        let NumVal = InputImg.getPixel(0, 0), Count = 1, Ix = 0, Iy = 0\n        for (let index = 0; index <= InputImg.width * InputImg.height - 2; index++) {\n            Ix = (index + 1) % InputImg.width, Iy = Math.floor((index + 1) / InputImg.width)\n            if (NumVal == InputImg.getPixel(Ix, Iy)) {\n                Count += 1\n            } else {\n                OutputStr = \"\" + OutputStr + _write(convertToText(Count)), OutputStr = \"\" + OutputStr + _write(convertToText(NumVal))\n                NumVal = InputImg.getPixel(Ix, Iy), Count = 1\n            }\n        }\n        OutputStr = \"\" + OutputStr + _write(convertToText(Count)), OutputStr = \"\" + OutputStr + _write(convertToText(NumVal)), OutputStr = \"\" + OutputStr + _write(\"ENDimg\")\n        return OutputStr\n    }\n\n    export function _loadImg(DataStr: string) {\n        if (DataStr.isEmpty()) return undefined;\n        _startIdxKey(\"_ImgData\", 0)\n        let StrVal = _read(DataStr, \"_ImgData\")\n        let NumVal = 0, Ix = 0, Iy = 0\n        if (!(StrVal.includes(\"image\"))) return undefined;\n        StrVal = _read(DataStr, \"_ImgData\")\n        if (!(StrVal.includes(\"img.\"))) return undefined;\n        let Widt = parseFloat(_read(DataStr, \"_ImgData\")), Heig = parseFloat(_read(DataStr, \"_ImgData\"))\n        let OutputImg = image.create(Widt, Heig)\n        let I = 0, CountStr = _read(DataStr, \"_ImgData\"), Count = parseFloat(CountStr)\n        while (_getIdxKey(\"_ImgData\") < DataStr.length) {\n            Ix = I % Widt\n            Iy = Math.floor(I / Widt)\n            NumVal = parseFloat(_read(DataStr, \"_ImgData\"))\n            for (let index = 0; index < Count; index++) {\n                OutputImg.setPixel(Ix, Iy, NumVal)\n                I += 1\n                Ix = I % Widt\n                Iy = Math.floor(I / Widt)\n            }\n            CountStr = _read(DataStr, \"_ImgData\")\n            if (CountStr.includes(\"END\")) break;\n            Count = parseFloat(CountStr)\n        }\n        return OutputImg\n    }\n}\n","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"arcade-renfont\",\n    \"description\": \"basic text engine render like standard ascii text engine\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"main-temp.ts\",\n        \"main-dataserial.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"yotta\": {\n        \"config\": {\n            \"PXT_GC_CHECKS\": 1\n        }\n    }\n}\n"}},{"timestamp":1749442509579,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"\nnamespace SpriteKind {\n    export const Renfont = SpriteKind.create()\n}\n\n//% block=\"Ren font\" color=\"#12d48a\" icon=\"\\uf031\"\nnamespace Renfont {\n\n    let rendering = false, tablename: number[] = [], ligs: string[][] = [], ligages: Image[][] = [], ligwidth: number[][] = [], ligsubw: number[][] = [], ligdir: number[][] = [], ligcol: number[][] = [], ligul: number[][] = [], storeid: number[] = [], letterspace: number = 1, curid: number = 0, lineheight: number = 1;\n\n    function gettableid(name: number) {\n        if (tablename.indexOf(name) < 0) {\n            tablename.push(name); storeid.push(curid); ligs.push([]); ligages.push([]); ligwidth.push([]); ligsubw.push([]); ligdir.push([]); ligcol.push([]); ligul.push([]); curid += 1;\n            return tablename.length - 1\n        }\n        return tablename.indexOf(name)\n    }\n\n    function drawTransparentImage(src: Image, to: Image, x: number, y: number) {\n        if (!src || !to) { return; }\n        to.drawTransparentImage(src, x, y)\n    }\n\n    function findCommand(tvj: string, chj: string = \"\", nvj: number): boolean {\n        if (((nvj < tvj.length && tvj.charAt(nvj)) && (nvj + 1 < tvj.length && tvj.charAt(nvj + 1) == \"\\\\\")) && ((nvj + 2 < tvj.length && chj.length <= 0))) { return true }\n        if (chj.length != 1) { return false }\n        if (((nvj + 1 < tvj.length && tvj.charAt(nvj + 1) == \"\\\\\")) && ((nvj + 2 < tvj.length && tvj.charAt(nvj + 2) == chj))) { return true }\n        return false\n    }\n\n    function deepChar(tid: number = 0, idx: number = 0, charstr: string = \"\", reverse: boolean = false) {\n        let ustr = charstr.charAt(idx)\n        let ic = 1\n        let uc = charstr.charAt(idx + ic)\n        let istr = \"\" + ustr + uc\n        if (ligs[tid].indexOf(istr) < 0) { return ustr }\n        while (ligs[tid].indexOf(istr) >= 0) {\n            ustr = \"\" + ustr + uc\n            if (reverse) ic--;\n            else ic++;\n            uc = charstr.charAt(idx + ic)\n            istr = \"\" + ustr + uc\n            if (idx + ic >= charstr.length) { break }\n        }\n        return ustr\n    }\n\n    function drawOutline(Inputi: Image, color: number, dir8: boolean) {\n        let dxl: number[] = [1, 0, -1, 0]\n        let dyl: number[] = [0, 1, 0, -1]\n        if (dir8) {\n            dxl = [1, 1, 1, 0, -1, -1, -1, 0]\n            dyl = [1, 0, -1, -1, -1, 0, 1, 1]\n        }\n        let Uinputi = Inputi.clone()\n        for (let curcol = 1; curcol < 16; curcol++) {\n            Uinputi.replace(curcol, color)\n        }\n        let Outputi = image.create(Inputi.width + 2, Inputi.height + 2)\n        for (let curdir = 0; curdir < Math.min(dxl.length, dyl.length); curdir++) {\n            drawTransparentImage(Uinputi, Outputi, 1 + dxl[curdir], 1 + dyl[curdir])\n        }\n        drawTransparentImage(Inputi, Outputi, 1, 1)\n        return Outputi\n    }\n\n    function SetImgFrame(ImgF: Image, Wh: number, Ht: number) {\n        let ImgOutput = image.create(Wh, Ht)\n        let Twidt = Math.floor(ImgF.width / 3)\n        let Theig = Math.floor(ImgF.height / 3)\n        let ImgTable: Image[] = []\n        let Uimg: Image = null\n        let sw = 0\n        let sh = 0\n        for (let hj = 0; hj < 3; hj++) {\n            for (let wi = 0; wi < 3; wi++) {\n                Uimg = image.create(Twidt, Theig)\n                drawTransparentImage(ImgF, Uimg, 0 - wi * Twidt, 0 - hj * Theig)\n                ImgTable.push(Uimg.clone())\n            }\n        }\n        for (let wi2 = 0; wi2 < Math.floor(Wh / Twidt); wi2++) {\n            for (let hj2 = 0; hj2 < Math.floor(Ht / Theig); hj2++) {\n                sw = Math.min(wi2 * Twidt, Wh - Twidt)\n                sh = Math.min(hj2 * Theig, Ht - Theig)\n                if (hj2 == 0 && wi2 == 0) {\n                    drawTransparentImage(ImgTable[0], ImgOutput, sw, sh)\n                } else if (hj2 == Math.floor(Ht / Theig) - 1 && wi2 == Math.floor(Wh / Twidt) - 1) {\n                    drawTransparentImage(ImgTable[8], ImgOutput, sw, sh)\n                } else if (hj2 == Math.floor(Ht / Theig) - 1 && wi2 == 0) {\n                    drawTransparentImage(ImgTable[6], ImgOutput, sw, sh)\n                } else if (hj2 == 0 && wi2 == Math.floor(Wh / Twidt) - 1) {\n                    drawTransparentImage(ImgTable[2], ImgOutput, sw, sh)\n                } else {\n                    if (wi2 > 0 && wi2 < Math.floor(Wh / Twidt) - 1) {\n                        if (hj2 == 0) {\n                            drawTransparentImage(ImgTable[1], ImgOutput, sw, sh)\n                        } else if (hj2 == Math.floor(Ht / Theig) - 1) {\n                            drawTransparentImage(ImgTable[7], ImgOutput, sw, sh)\n                        } else {\n                            drawTransparentImage(ImgTable[4], ImgOutput, sw, sh)\n                        }\n                    } else if (hj2 > 0 && hj2 < Math.floor(Ht / Theig) - 1) {\n                        if (wi2 == 0) {\n                            drawTransparentImage(ImgTable[3], ImgOutput, sw, sh)\n                        } else if (wi2 == Math.floor(Wh / Twidt) - 1) {\n                            drawTransparentImage(ImgTable[5], ImgOutput, sw, sh)\n                        } else {\n                            drawTransparentImage(ImgTable[4], ImgOutput, sw, sh)\n                        }\n                    } else {\n                        drawTransparentImage(ImgTable[4], ImgOutput, sw, sh)\n                    }\n                }\n            }\n        }\n        return ImgOutput\n    }\n\n    //% blockid=renfont_tablenameshadow\n    //% block=\"$name\"\n    //% blockHidden=true shim=TD_ID\n    //% name.fieldEditor=\"autocomplete\" name.fieldOptions.decompileLiterals=true\n    //% name.fieldOptions.key=\"tablenameshadow\"\n    //% group=\"create\"\n    //% weight=1\n    export function _tableKindShadow(name: number) {\n        return name\n    }\n\n    /**\n     * add charcter glyph to the table\n     */\n    //% blockid=renfont_setcharecter\n    //% block=\"set table id $gid and set letter $glyph to img $imgi=screen_image_picker||and the letter can move? $notmove and stay on or under the letter? $onthechar and substract width $inchar erase col $bcol spacebar col $scol base col $mcol guard col $ncol\"\n    //% gid.shadow=renfont_tablenameshadow\n    //% bcol.shadow=colorindexpicker\n    //% scol.shadow=colorindexpicker\n    //% mcol.shadow=colorindexpicker\n    //% ncol.shadow=colorindexpicker\n    //% group=\"create\"\n    //% weight=2\n    export function setCharecter(gid: number, glyph: string = \"\", imgi: Image = image.create(5, 8), notmove: boolean = false, onthechar: boolean = false, inchar: boolean = false, bcol: number = 0, scol: number = 0, mcol: number = 0, ncol: number = 0) {\n        let tid = gettableid(gid), sncol = true, scnwidt = true, scwidt = false, wi3 = 0, wj = 0, si = 0;\n        if (bcol > 0 && bcol < 16) imgi.replace(bcol, 0)\n        let uimg = imgi.clone()\n        let start = false, stop = false\n        let bufv = pins.createBuffer(uimg.height), count = [], i = 0, x0 = 0, x1 = imgi.width, y0 = 0, y1 = imgi.height\n        for (let x = 0; x < uimg.width; x += i) {\n            count = []\n            for (i = 0; x + i < uimg.width; i++) {\n                uimg.getRows(x + i, bufv)\n                let sumif = bufv.toArray(NumberFormat.UInt8LE).filter(val => (val == mcol)).length\n                sumif += bufv.toArray(NumberFormat.UInt8LE).filter(val => (val == ncol && ncol > 0)).length\n                sumif += bufv.toArray(NumberFormat.UInt8LE).filter(val => (val == scol && scol > 0)).length\n                count.push(sumif)\n                if ((stop && (count[i - 1] > 0 && count[i] <= 0)) || (!stop && (start && count[i] <= 0) || (!start && count[i] > 0))) break;\n            }\n            if (start) {\n                if (stop) {\n                    if (x + i < uimg.width) x1 = x + i\n                } else {\n                    x1 = x + i\n                    stop = true\n                }\n            } else {\n                x0 = x + i\n                start = true\n            }\n        }\n        wi3 = x0, wj = x1\n        let vimg = image.create(Math.abs(x0 - x1), Math.abs(y0 - y1))\n        vimg.drawImage(imgi, -x0, -y0)\n        let imgj = vimg.clone()\n        let uwid = 0\n        if (inchar) {\n            for (let xw2 = imgi.width - 1; xw2 >= 0; xw2--) {\n                si = 0\n                for (let yh2 = 0; yh2 < imgi.height; yh2++) {\n                    if (imgi.getPixel(xw2, yh2) > 0) { si += 1 }\n                }\n                if (scnwidt) {\n                    if (scwidt) {\n                        if (si <= 0) { wj = xw2; scnwidt = false; break; }\n                    } else {\n                        if (si > 0) { wi3 = xw2; scwidt = true; }\n                    }\n                }\n            }\n            if (scnwidt) { wj = imgi.width; scnwidt = false; }\n            uwid = Math.abs(wi3 - wj);\n            if (true) uwid = wj\n        }\n\n        if (ligs[tid].indexOf(glyph) < 0) {\n            ligul[tid].push(ncol)\n            ligcol[tid].push(mcol)\n            ligs[tid].push(glyph); ligages[tid].push(imgj);\n            if (notmove) {\n                if (onthechar) {\n                    ligdir[tid].push(10)\n                } else {\n                    ligdir[tid].push(-10)\n                }\n                ligwidth[tid].push(0)\n                ligsubw[tid].push(0)\n            } else {\n                if (uwid == 0) {\n                    ligsubw[tid].push(imgj.width)\n                } else {\n                    ligsubw[tid].push(uwid)\n                }\n                ligwidth[tid].push(imgj.width)\n                ligdir[tid].push(0)\n            }\n        } else {\n            ligul[tid][ligs[tid].indexOf(glyph)] = ncol\n            ligcol[tid][ligs[tid].indexOf(glyph)] = mcol\n            ligages[tid][ligs[tid].indexOf(glyph)] = imgj\n            if (notmove) {\n                if (onthechar) {\n                    ligdir[tid][ligs[tid].indexOf(glyph)] = 10\n                } else {\n                    ligdir[tid][ligs[tid].indexOf(glyph)] = -10\n                }\n                ligwidth[tid][ligs[tid].indexOf(glyph)] = 0\n                ligsubw[tid][ligs[tid].indexOf(glyph)] = 0\n            } else {\n                if (uwid == 0) {\n                    ligsubw[tid][ligs[tid].indexOf(glyph)] = imgj.width\n                } else {\n                    ligsubw[tid][ligs[tid].indexOf(glyph)] = uwid\n                }\n                ligwidth[tid][ligs[tid].indexOf(glyph)] = imgj.width\n                ligdir[tid][ligs[tid].indexOf(glyph)] = 0\n            }\n        }\n    }\n\n    /**\n     * add more glyph\n     * from charcter sheet\n     * to the table\n     */\n    //% blockid=renfont_setcharfromimgsheet\n    //% block=\"set table id $tid and set img sheet $PngSheet=screen_image_picker with letters $GroupChar||and staying letters $StayChar letters on the letters $CharOnChar and Char Substact $CharSubW width $twid height $thei erase col $bcl space col $scl base col $mcl guard col $ncl\"\n    //% tid.shadow=renfont_tablenameshadow\n    //% bcl.shadow=colorindexpicker\n    //% scl.shadow=colorindexpicker\n    //% mcl.shadow=colorindexpicker\n    //% ncl.shadow=colorindexpicker\n    //% group=\"create\"\n    //% weight=4\n    export function setCharFromSheet(tid: number, PngSheet: Image = image.create(10, 16), GroupChar: string = \"\", StayChar: string = \"\", CharOnChar: string = \"\", CharSubW: string = \"\", twid: number = 5, thei: number = 8, bcl: number = 0, scl: number = 0, mcl: number = 0, ncl: number = 0) {\n        let gwid = Math.round(PngSheet.width / twid), uig = image.create(twid, thei), txi = 0, tyi = 0;\n        for (let tvn = 0; tvn < GroupChar.length; tvn++) {\n            uig = image.create(twid, thei); txi = twid * (tvn % gwid); tyi = thei * Math.floor(tvn / gwid); drawTransparentImage(PngSheet, uig, 0 - txi, 0 - tyi); setCharecter(tid, GroupChar.charAt(tvn), uig, StayChar.includes(GroupChar.charAt(tvn)), CharOnChar.includes(GroupChar.charAt(tvn)), CharSubW.includes(GroupChar.charAt(tvn)), bcl, scl, mcl, ncl);\n        }\n    }\n\n    /**\n     * add more long glyph array\n     * from charcter sheet\n     * to the table\n     */\n    //% blockid=renfont_setchararrfromimgsheet\n    //% block=\"set table id $tid and set img sheet $PngSheet=screen_image_picker with array of letters $GroupChar||and  array of staying letters $StayChar array of letters on the letters $CharOnChar and array of Char Substact $CharSubW width $twid height $thei erase col $bcl space col $scl base col $mcl guard col $ncl\"\n    //% tid.shadow=renfont_tablenameshadow\n    //% bcl.shadow=colorindexpicker\n    //% scl.shadow=colorindexpicker\n    //% mcl.shadow=colorindexpicker\n    //% ncl.shadow=colorindexpicker\n    //% group=\"create\"\n    //% weight=6\n    export function setCharArrFromSheet(tid: number, PngSheet: Image = image.create(10, 16), GroupChar: string[] = [], StayChar: string[] = [], CharOnChar: string[] = [], CharSubW: string[] = [], twid: number = 5, thei: number = 8, bcl: number = 0, scl: number = 0, mcl: number = 0, ncl: number = 0) {\n        let gwid2 = Math.round(PngSheet.width / twid), uig2 = image.create(twid, thei), txi2 = 0, tyi2 = 0;\n        for (let tvn2 = 0; tvn2 < GroupChar.length; tvn2++) {\n            uig2 = image.create(twid, thei); txi2 = twid * (tvn2 % gwid2); tyi2 = thei * Math.floor(tvn2 / gwid2); drawTransparentImage(PngSheet, uig2, 0 - txi2, 0 - tyi2); setCharecter(tid, GroupChar[tvn2], uig2, StayChar.indexOf(GroupChar[tvn2]) >= 0, CharOnChar.indexOf(GroupChar[tvn2]) >= 0, CharSubW.indexOf(GroupChar[tvn2]) >= 0, bcl, scl, mcl, ncl);\n        }\n    }\n\n    /**\n     * read the length of\n     * my charcter in table\n     */\n    //% blockid=renfont_numofglyphs\n    //% block=\"number of glyphs in table id $gid\"\n    //% gid.shadow=renfont_tablenameshadow\n    //% group=\"datainfo\"\n    //% weight=2\n    export function numOfGlyphs(gid: number): number {\n        let tid2 = gettableid(gid)\n        return ligs[tid2].length\n    }\n\n    /**\n     * read the array charcter image\n     * of my table\n     */\n    //% blockid=renfont_arrofgypimg\n    //% block=\"array of glyph images in table id $gid\"\n    //% gid.shadow=renfont_tablenameshadow\n    //% group=\"datainfo\"\n    //% weight=4\n    export function imageArray(gid: number): Image[] {\n        let tid3 = gettableid(gid)\n        return ligages[tid3]\n    }\n\n    /**\n     * read the array charcter\n     * of my table\n     */\n    //% blockid=renfont_arrofglyphs\n    //% block=\"array of glyphs in table id $gid\"\n    //% gid.shadow=renfont_tablenameshadow\n    //% group=\"datainfo\"\n    //% weight=6\n    export function glyphArray(gid: number): String[] {\n        let tid4 = gettableid(gid)\n        return ligs[tid4]\n    }\n\n    function findLetter(curstr: string, curidx: number, fromchr: string, tochr: string) {\n        let lenfrom = fromchr.length, lento = tochr.length\n        if (curstr.substr(curidx, lento) == tochr) return true\n        if (curstr.substr(curidx, lenfrom) != fromchr) return false\n        while (curidx < curstr.length) {\n            curidx++\n            if (curstr.substr(curidx, lento) == tochr) return true\n            if (curstr.substr(curidx, lenfrom) != fromchr) return false\n        }\n        return false\n    }\n\n    function setTextImgValue(arrm: boolean, input: string, iwidt: number, lid: number, icol: number = 0, bcol: number = 0, alm: number = 0, spacew: number = undefined, lineh: number = undefined) {\n        let tid5 = gettableid(lid)\n        if (rendering) { if (arrm) { return [image.create(1, 1)] as Image[] } else { return image.create(1, 1) as Image } }\n        rendering = true\n        if (lineh == undefined) { lineh = lineheight }\n        if (spacew == undefined) { spacew = letterspace }\n        let curchar = \"\", curchar2 = \"\", uhei = 0, outputarr: Image[] = [], lnwit: number[] = [], heig = 0, widt = 0, curwidt = 0, uwidt = 0, swidt = 0, nwidt = 0, wie = 0, hie = 0, hvi = 0;\n        for (let currentletter = 0; currentletter < input.length; currentletter++) {\n            curchar = deepChar(tid5, currentletter, input)\n            if (!(ligs[tid5].indexOf(curchar) < 0)) {\n                uwidt = ligwidth[tid5][(ligs[tid5].indexOf(curchar))]\n                if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] <= 0) {\n                    nwidt = ligages[tid5][(ligs[tid5].indexOf(curchar))].width\n                } else {\n                    nwidt = 0\n                }\n                if (uwidt > 0) {\n                    swidt = uwidt\n                } else {\n                    swidt = 0\n                }\n                curchar2 = deepChar(tid5, currentletter + 1, input)\n                if ((curchar2 != curchar) && Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]) > 0) {\n                    wie += Math.abs(ligwidth[tid5][ligs[tid5].indexOf(curchar)] - Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]))\n                } else if (Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar)] - ligwidth[tid5][ligs[tid5].indexOf(curchar)]) > 0) {\n                    wie += ligsubw[tid5][(ligs[tid5].indexOf(curchar))]\n                } else if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] > 0) {\n                    wie += Math.abs(uwidt - nwidt)\n                }\n                if ((iwidt <= 0 || !(findCommand(input, \"n\", currentletter))) && (ligwidth[tid5][(ligs[tid5].indexOf(input.charAt(Math.min(currentletter + Math.max(curchar.length, 1), input.length - 1))))] > 0 || currentletter + (curchar.length - 1) >= input.length - 1)) {\n                    wie += spacew\n                }\n                hvi = ligages[tid5][(ligs[tid5].indexOf(curchar))].height\n            } else if (input.charAt(currentletter) == \" \") {\n                wie += 3 * spacew\n            } else {\n                wie += 2 * spacew\n            }\n            uhei = Math.max(uhei, hvi), heig = Math.max(heig, hie + hvi)\n            if (iwidt > 0) {\n                if (wie >= iwidt || findCommand(input, \"n\", currentletter)) {\n                    if (uhei > hvi) {\n                        hie += uhei\n                    } else {\n                        hie += hvi\n                    }\n                    hie += lineh\n                    wie = 0;\n                    if (findCommand(input, \"n\", currentletter)) {\n                        currentletter += 2\n                    }\n                }\n            } else if (findCommand(input, \"n\", currentletter)) {\n                currentletter += 2\n            }\n            if (curchar.length - 1 > 0) { currentletter += curchar.length - 1 }\n        }\n        wie = 0, widt = 0\n        let hix = 0;\n        for (let currentletter2 = 0; currentletter2 < input.length; currentletter2++) {\n            curchar = deepChar(tid5, currentletter2, input)\n            if (!(ligs[tid5].indexOf(curchar) < 0)) {\n                uwidt = ligwidth[tid5][(ligs[tid5].indexOf(curchar))]\n                if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] <= 0) {\n                    nwidt = ligages[tid5][(ligs[tid5].indexOf(curchar))].width\n                } else {\n                    nwidt = 0\n                }\n                if (ligwidth[tid5][(ligs[tid5].indexOf(input.charAt(Math.min(currentletter2 + curchar.length, input.length - 1))))] <= 0) {\n                    swidt = uwidt\n                } else {\n                    swidt = 0\n                }\n                curchar2 = deepChar(tid5, currentletter2 + 1, input)\n                if ((curchar2 != curchar) && Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]) > 0) {\n                    wie += Math.abs(ligwidth[tid5][ligs[tid5].indexOf(curchar)] - Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]))\n                } else if (Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar)] - ligwidth[tid5][ligs[tid5].indexOf(curchar)]) > 0) {\n                    wie += ligsubw[tid5][(ligs[tid5].indexOf(curchar))]\n                } else if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] > 0) {\n                    wie += Math.abs(uwidt - nwidt)\n                }\n                if ((iwidt <= 0 || !(findCommand(input, \"n\", currentletter2))) && (ligwidth[tid5][(ligs[tid5].indexOf(input.charAt(Math.min(currentletter2 + Math.max(curchar.length, 1), input.length - 1))))] > 0 || currentletter2 + (curchar.length - 1) >= input.length - 1)) {\n                    wie += spacew\n                }\n            } else if (input.charAt(currentletter2) == \" \") {\n                wie += 3 * spacew\n            } else {\n                wie += 2 * spacew\n            }\n            if (false) { widt = Math.max(widt, wie) }\n            if (iwidt > 0) {\n                if (wie >= iwidt || findCommand(input, \"n\", currentletter2)) {\n                    widt = Math.max(widt, wie)\n                    lnwit.push(wie); wie = 0; hix += 1\n                    if (findCommand(input, \"n\", currentletter2)) {\n                        currentletter2 += 2\n                    }\n                } else {\n                    widt = Math.max(widt, wie)\n                }\n            } else if (findCommand(input, \"n\", currentletter2)) {\n                widt = Math.max(widt, wie); currentletter2 += 2;\n            } else {\n                widt = Math.max(widt, wie)\n            }\n            if (curchar.length - 1 > 0) { currentletter2 += curchar.length - 1 }\n        }\n        wie -= letterspace; lnwit.push(wie);\n        let hgi = 0, limg = image.create(lnwit[hgi], heig), scwidt2 = true, underc = false, scnwidt2 = false, rimg = image.create(8, 8), output = image.create(widt, heig), sc = 0; hie = 0; wie = 0; curwidt = 0;\n        let uoutput: Image = image.create(output.width, output.height), uuoutput: Image = image.create(output.width, output.height);\n        if (bcol > 0) { uoutput = image.create(output.width + 2, output.height + 2) }\n        for (let currentletter3 = 0; currentletter3 < input.length; currentletter3++) {\n            wie = 0; curchar = deepChar(tid5, currentletter3, input)\n            if (!(ligs[tid5].indexOf(curchar) < 0)) {\n                hvi = ligages[tid5][(ligs[tid5].indexOf(curchar))].height; uwidt = ligwidth[tid5][(ligs[tid5].indexOf(curchar))];\n                if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] <= 0) {\n                    nwidt = ligages[tid5][(ligs[tid5].indexOf(curchar))].width\n                } else {\n                    nwidt = 0\n                }\n                scwidt2 = false; scnwidt2 = false; wie = 0; rimg = ligages[tid5][(ligs[tid5].indexOf(curchar))].clone()\n                let ccol = ligul[tid5][ligs[tid5].indexOf(input.charAt(currentletter3))];\n                if (ligwidth[tid5][ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + curchar.length, input.length - 1)))] > 0 && ligdir[tid5][ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + curchar.length, input.length - 1)))] == 0) {\n                    rimg.replace(ccol, ligcol[tid5][ligs[tid5].indexOf(curchar)])\n                } else if (ligwidth[tid5][ligs[tid5].indexOf(curchar)] > 0 && ligdir[tid5][ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + curchar.length, input.length - 1)))] < 0) {\n                    rimg.replace(ccol, 0)\n                } else if (ligwidth[tid5][ligs[tid5].indexOf(curchar)] > 0 && ligdir[tid5][ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + curchar.length, input.length - 1)))] > 0) {\n                    rimg.replace(ccol, ligcol[tid5][ligs[tid5].indexOf(curchar)])\n                }\n                if (Math.abs(ligdir[tid5][ligs[tid5].indexOf(curchar)]) > 0 && Math.abs(ligdir[tid5][ligs[tid5].indexOf(input.charAt(Math.max(currentletter3 - 1, 0)))]) == 0) {\n                    sc = 1; wie = 0;\n                    while (sc > 0) {\n                        sc = 0\n                        for (let yh3 = 0; yh3 < rimg.height; yh3++) {\n                            if (limg.getPixel((curwidt - letterspace) - wie, yh3) == rimg.getPixel(rimg.width - 1, yh3) && (limg.getPixel((curwidt - letterspace) - wie, yh3) != 0 && limg.getPixel((curwidt - letterspace) - wie, yh3) != 0)) {\n                                sc += 1\n                            }\n                        }\n                        if (sc > 0 || (sc == 0 && wie > 0)) {\n                            wie += 1\n                        }\n                    }\n                }\n                if (wie < 0) { wie = Math.abs(wie) }\n                drawTransparentImage(rimg, limg, curwidt - (nwidt + wie), 0 + (hvi - ligages[tid5][(ligs[tid5].indexOf(curchar))].height))\n                if (ligwidth[tid5][(ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + curchar.length, input.length - 1))))] == 0) {\n                    swidt = uwidt\n                } else {\n                    swidt = 0\n                }\n                curchar2 = deepChar(tid5, currentletter3 + 1, input)\n                if ((curchar2 != curchar) && Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]) > 0) {\n                    curwidt += Math.abs(ligwidth[tid5][ligs[tid5].indexOf(curchar)] - Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]))\n                } else if (Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar)] - ligwidth[tid5][ligs[tid5].indexOf(curchar)]) > 0) {\n                    curwidt += ligsubw[tid5][(ligs[tid5].indexOf(curchar))]\n                } else if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] > 0) {\n                    curwidt += Math.abs(uwidt - nwidt)\n                }\n                if ((iwidt <= 0 || !(findCommand(input, \"n\", currentletter3))) && (ligwidth[tid5][(ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + Math.max(curchar.length, 1), input.length - 1))))] > 0 || currentletter3 + (curchar.length - 1) >= input.length - 1)) {\n                    curwidt += spacew\n                }\n            } else if (input.charAt(currentletter3) == \" \") {\n                if (iwidt > 0 && findLetter(input, currentletter3, \" \", \"\\\\n\") || findLetter(input, currentletter3, \" \", \"\\n\")) curwidt += 3 * spacew\n            } else {\n                if (iwidt > 0 && findLetter(input, currentletter3, \" \", \"\\\\n\") || findLetter(input, currentletter3, \" \", \"\\n\")) curwidt += 2 * spacew\n            }\n            uhei = Math.max(uhei, hvi)\n            uuoutput = output.clone()\n            if (alm < 0) {\n                drawTransparentImage(limg.clone(), uuoutput, 0, hie)\n            } else if (alm > 0) {\n                drawTransparentImage(limg.clone(), uuoutput, Math.abs(output.width - Math.min(curwidt, limg.width)), hie)\n            } else if (alm == 0) {\n                drawTransparentImage(limg.clone(), uuoutput, Math.abs((output.width / 2) - (Math.min(curwidt, limg.width) / 2)), hie)\n            }\n            if (icol > 0) {\n                for (let ico = 1; ico < 16; ico++) {\n                    uuoutput.replace(ico, icol)\n                }\n            }\n            if (bcol > 0) { uuoutput = drawOutline(uuoutput.clone(), bcol, true) } else { uoutput = uuoutput.clone() }\n            outputarr.push(uuoutput.clone())\n            if (iwidt > 0) {\n                if (curwidt >= iwidt || findCommand(input, \"n\", currentletter3)) {\n                    if (alm < 0) {\n                        drawTransparentImage(limg.clone(), output, 0, hie)\n                    } else if (alm > 0) {\n                        drawTransparentImage(limg.clone(), output, Math.abs(output.width - limg.width), hie)\n                    } else if (alm == 0) {\n                        drawTransparentImage(limg.clone(), output, Math.abs((output.width / 2) - (limg.width / 2)), hie)\n                    }\n                    if (icol > 0) {\n                        for (let ico2 = 1; ico2 < 16; ico2++) {\n                            output.replace(ico2, icol)\n                        }\n                    }\n                    if (bcol > 0) { uoutput = drawOutline(output.clone(), bcol, true) } else { uoutput = output.clone() }\n                    outputarr.push(uoutput.clone())\n                    hgi += 1; limg = image.create(lnwit[hgi], heig); curwidt = 0;\n                    if (uhei > hvi) {\n                        hie += uhei\n                    } else {\n                        hie += hvi\n                    }\n                    hie += lineh\n                    if (findCommand(input, \"n\", currentletter3) || input.charAt(currentletter3) == \"\\n\") {\n                        currentletter3 += 2\n                    }\n                }\n            } else if (findCommand(input, \"n\", currentletter3) || input.charAt(currentletter3) == \"\\n\") {\n                currentletter3 += 2\n            }\n            if (curchar.length - 1 > 0) { currentletter3 += curchar.length - 1 }\n        }\n        if (alm < 0) {\n            drawTransparentImage(limg.clone(), output, 0, hie)\n        } else if (alm > 0) {\n            drawTransparentImage(limg.clone(), output, Math.abs(output.width - limg.width), hie)\n        } else if (alm == 0) {\n            drawTransparentImage(limg.clone(), output, Math.abs((output.width / 2) - (limg.width / 2)), hie)\n        }\n        if (icol > 0) {\n            for (let ico3 = 1; ico3 < 16; ico3++) {\n                output.replace(ico3, icol)\n            }\n        }\n        if (bcol > 0) { uoutput = drawOutline(output, bcol, true) } else { uoutput = output.clone() }\n        outputarr.push(uoutput.clone())\n        rendering = false\n        if (arrm) { return outputarr as Image[] }\n        output = uoutput.clone()\n        return output as Image\n    }\n\n    /**\n     * render text from my table\n     * to the image\n     */\n    //% blockid=renfont_setimgfromtext\n    //% block=\"create the image of text $input in page width $iwidt from table id $tid||and fill col $icol with outline $bcol and got alignment $alm gapwidth $spacew lineheight $lineh\"\n    //% tid.shadow=renfont_tablenameshadow\n    //% alm.min=-1 alm.max=1 alm.defl=0\n    //% icol.shadow=colorindexpicker\n    //% bcol.shadow=colorindexpicker\n    //% group=\"render\"\n    //% weight=4\n    export function setTextImage(input: string = \"\", iwidt: number, tid: number, icol: number = 0, bcol: number = 0, alm: number = 0, spacew: number = 0, lineh: number = 0) {\n        return setTextImgValue(false, input, iwidt, tid, icol, bcol, alm, spacew, lineh) as Image\n    }\n\n    /**\n     * render text from my table\n     * like basic text animation\n     * to image array\n     */\n    //% blockid=renfont_setimgframefromtext\n    //% block=\"create the image frame of text $input in page width $iwidt from table id $tid||and fill col $icol with outline $bcol and got alignment $alm gapwidth $spacew lineheight $lineh\"\n    //% tid.shadow=renfont_tablenameshadow\n    //% alm.min=-1 alm.max=1 alm.defl=0\n    //% icol.shadow=colorindexpicker\n    //% bcol.shadow=colorindexpicker\n    //% group=\"render\"\n    //% weight=2\n    export function setTextImageArray(input: string = \"\", iwidt: number, tid: number, icol: number = 0, bcol: number = 0, alm: number = 0, spacew: number = 0, lineh: number = 0) {\n        return setTextImgValue(true, input, iwidt, tid, icol, bcol, alm, spacew, lineh) as Image[]\n    }\n\n    /** \n     * render text\n     * and stamp to \n     * my dialog frame\n     */\n    //% blockid=renfont_stamptexttoframe\n    //% block=\"StampStrImgToTheDialogFrame $Fimg=dialog_image_picker Text $Txt Text width $Wval TableId $arrid||And text color col $ucol and outline $bcol Alignment $ualm gapwidth $spacew lineheight $lineh\"\n    //% arrid.shadow=renfont_tablenameshadow\n    //% ualm.min=-1 ualm.max=1 ualm.defl=0\n    //% ucol.shadow=colorindexpicker\n    //% bcol.shadow=colorindexpicker\n    //% group=\"Dialog render\"\n    //% weight=4\n    export function stampStrToDialog(Fimg: Image, Txt: string, Wval: number, arrid: number, ucol: number = 0, bcol: number = 0, ualm: number = 0, spacew: number = 0, lineh: number = 0) {\n        let StrImg: Image = setTextImage(Txt, Wval, arrid, ucol, bcol, ualm, spacew, lineh)\n        let gapw = Math.floor(Fimg.width / 3)\n        let gaph = Math.floor(Fimg.height / 3)\n        let UfImg: Image = SetImgFrame(Fimg, StrImg.width + ((gapw * 2) + Math.floor(gapw / 2)), StrImg.height + ((gaph * 2) + Math.floor(gaph / 2)))\n        drawTransparentImage(StrImg.clone(), UfImg, gapw, gaph)\n        return UfImg\n    }\n\n    /**\n     * render text\n     * like basic text animation\n     * and stamp to \n     * my dialog frame\n     * as image array\n     */\n    //% blockid=renfont_stamptextarrtoframe\n    //% block=\"StampStrAnimToDialogFrame $Fimg=dialog_image_picker Text input $Txt In text width $Wval At table id $arrid||and text color $ucol with outline $bcol And alignment $ualm gapwidth $spacew lineheight $lineh\"\n    //% arrid.shadow=renfont_tablenameshadow\n    //% ualm.min=-1 ualm.max=1 ualm.defl=0\n    //% ucol.shadow=colorindexpicker\n    //% bcol.shadow=colorindexpicker\n    //% group=\"Dialog render\"\n    //% weight=2\n    export function stampStrArrToDialog(Fimg: Image, Txt: string, Wval: number, arrid: number, ucol: number = 0, bcol: number = 0, ualm: number = 0, spacew: number = 0, lineh: number = 0) {\n        let StrImg2: Image[] = setTextImageArray(Txt, Wval, arrid, ucol, bcol, ualm, spacew, lineh)\n        let gapw2 = Math.floor(Fimg.width / 3)\n        let gaph2 = Math.floor(Fimg.height / 3)\n        let UfImg2: Image = SetImgFrame(Fimg, StrImg2[0].width + ((gapw2 * 2) + Math.floor(gapw2 / 2)), StrImg2[0].height + ((gaph2 * 2) + Math.floor(gaph2 / 2)))\n        let imgArr: Image[] = []\n        let uimg: Image = null\n        for (let mgi = 0; mgi < StrImg2.length; mgi++) {\n            uimg = UfImg2.clone()\n            drawTransparentImage(StrImg2[mgi].clone(), uimg, gapw2, gaph2)\n            imgArr.push(uimg)\n        }\n        return imgArr\n    }\n\n    /**\n     * set the letterspace by value\n     */\n    //% blockid=renfont_setletterspacing\n    //% block=\"set letter spacing to $input\"\n    //% group=\"main property\"\n    //% weight=8\n    export function setSpace(input: number) {\n        letterspace = input\n    }\n\n    /**\n     * change the letterspace by value\n     */\n    //% blockid=renfont_changeletterspacing\n    //% block=\"change letter spacing by $input\"\n    //% group=\"main property\"\n    //% weight=6\n    export function changeSpace(input: number) {\n        letterspace += input\n    }\n\n    /**\n     * set the line gap by value\n     */\n    //% blockid=renfont_setlinegap\n    //% block=\"set line gap by $input\"\n    //% group=\"main property\"\n    //% weight=4\n    export function setLine(input: number) {\n        lineheight = input\n    }\n\n    /**\n     * change the line gap by value\n     */\n    //% blockid=renfont_changelinegap\n    //% block=\"change line gap by $input\"\n    //% group=\"main property\"\n    //% weight=2\n    export function changeLine(input: number) {\n        lineheight += input\n    }\n\n    export enum align { left = -1, center = 0, right = 1 }\n\n    /**\n     * get alignment value\n     */\n    //% blockid=renfont_getalignmentval\n    //% block=\"get $alg of alignment\"\n    //% group=\"main property\"\n    export function getAlign(alg: align) {\n        return alg\n    }\n\n    export enum tempfont { MainFont = 1, ArcadeFont = 2, LatinMini = 3 }\n\n    /**\n     * set charcter\n     * from template\n     */\n    //% blockid=renfont_presetfont\n    //% block=\"SetupPresetFont $tempf with table id $tid\"\n    //% tid.shadow=renfont_tablenameshadow\n    //% group=\"create\"\n    //% weight=10\n    export function SetupPresetFont(tempf: tempfont, tid: number) {\n        switch (tempf) {\n            case 1: default: _mainfont(tid); break;\n            case 2: _arcadefont(tid); break;\n            case 3: _latinmini(tid); break;\n        }\n    }\n\n    export enum SprDataNumType { Tcol = 1, Bcol = 2, PageW = 3, Talg = 4 }\n\n    export enum spacetype { letterspace = 1, lineheight = 2 }\n\n    export enum colortype { solidcolor = 1, outlinecolor = 2 }\n\n    export enum delaytype { delaypermsec = 1, multisec = 2 }\n\n    /**\n     * create the renfont as sprite\n     */\n    //% blockid=renfont_sprite_create\n    //% block=\"create renfont sprite as $Text in color $Col with outline $Bcol in alignment $alg and tableid $Tid||and page width $PageW\"\n    //% Tid.shadow=renfont_tablenameshadow\n    //% Col.shadow=colorindexpicker\n    //% Bcol.shadow=colorindexpicker\n    //% blockSetVariable=\"myRenfont\"\n    //% group=\"sprite mode\"\n    //% weight=22\n    export function createRenfontSprite(Text: string, Col: number, Bcol: number, alg: align, Tid: number, PageW: number = 0) {\n        let renfontSprite = new RenfontSprite(Text, Col, Bcol, alg, Tid, PageW)\n        renfontSprite.setKind(SpriteKind.Renfont)\n        return renfontSprite\n    }\n\n    class RenfontSprite extends Sprite {\n        stxt: string\n        scol: number\n        stid: number\n        stxw: number\n        salg: number\n        pagew: number\n        spacew: number\n        lineh: number\n        bcol: number\n        scval: number\n        sidx: number\n        anim: boolean\n        anip: boolean\n        sdim: Image\n        nimg: Image\n        imgarr: Image[]\n\n        constructor(txt: string, tcol: number, bcol: number, alg: align, tid: number, pagew: number = 0) {\n            super(image.create(0, 0))\n            this.stxt = txt, this.scol = tcol, this.bcol = bcol, this.salg = alg, this.stid = tid, this.pagew = pagew\n            this.spriteUpdate()\n            this.setPosition(Math.round(scene.screenWidth() / 2), Math.round(scene.screenHeight() / 2))\n        }\n\n        spriteUpdate() {\n            if (this.sdim && !(this.sdim).equals(image.create(0, 0))) {\n                this.nimg = stampStrToDialog(\n                    this.sdim, \n                    this.stxt, \n                    this.pagew, \n                    this.stid, \n                    this.scol, \n                    this.bcol, \n                    this.salg, \n                    this.spacew, \n                    this.lineh\n                )\n            } else {\n                this.nimg = setTextImage(\n                    this.stxt, \n                    this.pagew, \n                    this.stid, \n                    this.scol, \n                    this.bcol, \n                    this.salg, \n                    this.spacew, \n                    this.lineh\n                )\n            }\n            if (this.image.equals(this.nimg)) return;\n            this.setImage(this.nimg)\n        }\n\n    }\n\n\n    /**\n     * get text data\n     * from unifont sprite\n     */\n    //% blockid=renfont_sprite_readtxt\n    //% block=\"get $me as text data\"\n    //% me.shadow=variables_get me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=18\n    export function getTextData(me: RenfontSprite) { return me.stxt }\n\n    /**\n     * set alignment as enum\n     * to unifont sprite\n     */\n    //% blockid=renfont_sprite_setalign\n    //% block=\" $me set align to $alg\"\n    //% me.shadow=variables_get me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=14\n    export function setAlign(me: RenfontSprite, alg: align) {\n        if (me.salg == getAlign(alg)) return;\n        me.salg = getAlign(alg);\n        me.spriteUpdate();\n    }\n\n    /**\n     * set alignment as number\n     * to unifont sprite\n     */\n    //% blockid=renfont_sprite_setalignnum\n    //% block=\" $me set align value to $aln\"\n    //% me.shadow=variables_get me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=12\n    export function setAlignNum(me: RenfontSprite, aln: number) {\n        if (me.salg == aln) return;\n        me.salg = aln;\n        me.spriteUpdate();\n    }\n\n    /**\n     * add or set dialog frame\n     * to unifont sprite\n     */\n    //% blockid=renfont_sprite_setdialog\n    //% block=\" $me set dialog frame to $DlImg=dialog_image_picker\"\n    //% me.shadow=variables_get me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=10\n    export function setDialogTxt(me: RenfontSprite, DlImg: Image) {\n        if (me.sdim && (me.sdim.equals(DlImg) && (me.sdim.equals(image.create(0, 0))))) return;\n        me.sdim = DlImg;\n        me.spriteUpdate();\n    }\n\n    /**\n     * remove dialog frame\n     * at unifont sprite\n     */\n    //% blockid=renfont_sprite_cleardialog\n    //% block=\" $me clear dialog frame\"\n    //% me.shadow=variables_get me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=9\n    export function clearDialog(me: RenfontSprite) {\n        if (!(me.sdim)) { return; }\n        me.sdim = undefined;\n        me.spriteUpdate();\n    }\n\n    /**\n     * get text data\n     * from unifont sprite\n     */\n    //% blockid=renfont_sprite_readtxt\n    //% block=\"get $me as text data\"\n    //% me.shadow=variables_get me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=18\n    export function getSpriteText(me: RenfontSprite) { return me.stxt }\n\n    /**\n     * set gap space \n     * to unifont sprite\n     */\n    //% blockid=renfont_sprite_setlinespace\n    //% block=\" $me set $gaptype to $value\"\n    //% me.shadow=variables_get me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=8\n    export function setGapSpr(me: RenfontSprite, gaptype: spacetype, value: number = 0) {\n        switch (gaptype) {\n            case 1:\n                if (me.spacew == value) return;\n                me.spacew = value\n                break;\n            case 2:\n                if (me.lineh == value) return;\n                me.lineh = value\n                break;\n            default:\n                return;\n        }\n        me.spriteUpdate()\n    }\n\n    /**\n     * clear gap space\n     * at unifont sprite\n     */\n    //% blockid=renfont_sprite_setdefaultlinespace\n    //% block=\" $me set $gaptype to default value\"\n    //% me.shadow=variables_get me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=7\n    export function setDefaultGapSpr(me: RenfontSprite, gaptype: spacetype) {\n        switch (gaptype) {\n            case 1:\n                if (me.spacew == undefined) return;\n                me.spacew = undefined\n                break;\n            case 2:\n                if (me.lineh == undefined) return;\n                me.lineh = undefined\n                break;\n            default:\n                return;\n        }\n        me.spriteUpdate()\n    }\n\n    /**\n     * set text to render\n     * to unifont sprite\n     */\n    //% blockid=renfont_sprite_settextdata\n    //% block=\" $me set text to $Text\"\n    //% me.shadow=variables_get me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=20\n    export function setSpriteText(me: RenfontSprite, Text: string = \"\") {\n        if (me.stxt == Text) return;\n        me.stxt = Text;\n        me.spriteUpdate();\n    }\n\n    /**\n     * set text color index\n     * to unifont sprite\n     */\n    //% blockid=renfont_sprite_settextcolor\n    //% block=\" $me set $colortexttype to $ncolor\"\n    //% me.shadow=variables_get me.defl=myRenfont\n    //% ncolor.shadow=colorindexpicker\n    //% group=\"sprite mode\"\n    //% weight=6\n    export function setSpriteTextCol(me: RenfontSprite, colortexttype: colortype, ncolor: number = 0) {\n        switch (colortexttype) {\n            case 1:\n                if (me.scol == ncolor) return;\n                me.scol = ncolor\n                break;\n            case 2:\n                if (me.bcol == ncolor) return;\n                me.bcol = ncolor\n                break;\n            default:\n                return;\n        }\n        me.spriteUpdate()\n    }\n\n    /**\n     * set table id \n     * to unifont sprite\n     */\n    //% blockid=renfont_sprite_settableid\n    //% block=\" $me set Table id to $Tid\"\n    //% Tid.shadow=renfont_tablenameshadow\n    //% me.shadow=variables_get me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=3\n    export function setSpriteTableId(me: RenfontSprite, Tid: number) {\n        if (me.stid == Tid) return;\n        me.stid = Tid;\n        me.spriteUpdate();\n    }\n\n    /**\n     * set page width\n     * to unifont sprite\n     */\n    //% blockid=renfont_sprite_setpagewidth\n    //% block=\" $me set page width to $PageW\"\n    //% me.shadow=variables_get me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=4\n    export function setSpritePageWidth(me: RenfontSprite, PageW: number = 0) {\n        if (me.stxw == PageW) return;\n        me.stxw = PageW;\n        me.spriteUpdate();\n    }\n\n\n\n    /**\n     * play text animation\n     * from unifont sprite\n     */\n    //% blockid=renfont_sprite_playanimatiom\n    //% block=\" $me get animation play for pause type $delaymode in (ms) $secval||and run Background $paused\"\n    //% secval.defl=100\n    //% paused.shadow=toggleYesNo\n    //% me.shadow=variables_get me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=2\n    export function getSpriteAnimPlay(me: RenfontSprite, delaymode: delaytype, secval: number, paused: boolean = false) {\n        if (me.anim) return;\n        me.scval = 0\n        let umsec = 0, lensec = 0;\n        if (me.sdim) {\n            me.imgarr = stampStrArrToDialog(\n                me.sdim,\n                me.stxt,\n                me.pagew,\n                me.stid,\n                me.scol,\n                me.bcol,\n                me.salg,\n                me.spacew,\n                me.lineh\n            )\n        } else {\n            me.imgarr = setTextImageArray(\n                me.stxt,\n                me.pagew,\n                me.stid,\n                me.scol,\n                me.bcol,\n                me.salg,\n                me.spacew,\n                me.lineh\n            )\n        }\n        switch (delaymode) {\n            case 1:\n                me.scval = secval\n                umsec = secval\n                lensec = secval * me.imgarr.length\n                break;\n            case 2:\n                me.scval = secval / me.imgarr.length\n                umsec = secval\n                lensec = secval\n                break;\n            default:\n                return;\n        }\n        me.sidx = 0\n        if (!me.anim && !me.anip) {\n            me.anip = true;\n            me.anim = true;\n            animation.runImageAnimation(me, me.imgarr, me.scval, false)\n        } else if (me.image.equals(me.nimg)) {\n            me.anip = false;\n            me.anim = false;\n        }\n        setTimeout(function () {\n            me.anip = false;\n            me.anim = false;\n            me.setImage(me.nimg);\n        }, lensec)\n        if (paused) pause(lensec);\n    }\n\n    /**\n     * check unifont sprite\n     * playing animation until done\n     */\n    //% blockid=renfont_sprite_playanimisdone\n    //% block=\" $from get animation is stop\"\n    //% me.shadow=variables_get me.defl=myRenfont\n    //% group=\"sprite mode\"\n    //% weight=1\n    export function animdone(me: RenfontSprite) {\n        return !(me.anim)\n    }\n}\n","main-temp.ts":"\nnamespace Renfont {\n\n    export function _mainfont(tid: number = 0) {\n        setCharFromSheet(\n            tid,\n            _loadImg(\"image|img.1|111|112|514|1|1|15|1|1|1|15|8|1|1|15|3|1|1|15|43|1|1|15|1|1|1|15|14|1|1|15|23|1|1|15|9|1|1|15|3|1|1|15|8|1|1|15|1|1|1|15|37|1|1|15|6|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|4|1|5|15|2|1|3|15|3|1|1|15|3|1|1|15|8|1|1|15|9|1|1|15|3|1|1|15|7|1|5|15|25|1|3|15|1|1|1|15|1|1|1|15|4|1|1|15|14|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|1|1|1|15|16|1|1|15|5|1|1|15|7|1|1|15|1|1|1|15|6|1|1|15|20|1|1|15|2|1|3|15|4|1|1|15|13|1|5|15|2|1|1|15|2|1|1|15|4|1|2|15|2|1|1|15|4|1|1|15|1|1|1|15|16|1|1|15|5|1|1|15|6|1|1|15|3|1|1|15|5|1|1|15|20|1|1|15|2|1|1|15|1|1|1|15|4|1|1|15|14|1|1|15|1|1|1|15|4|1|5|15|5|1|1|15|6|1|1|15|17|1|1|15|5|1|1|15|14|1|5|15|11|1|5|15|2|1|1|15|2|1|1|15|1|1|1|15|4|1|1|15|13|1|5|15|5|1|1|15|2|1|1|15|3|1|1|15|2|1|2|15|2|1|1|15|1|1|1|15|1|1|1|15|14|1|1|15|5|1|1|15|16|1|1|15|45|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|15|1|1|15|5|1|1|15|16|1|1|15|7|1|1|15|22|1|1|15|14|1|1|15|1|1|1|15|4|1|5|15|2|1|1|15|3|1|3|15|3|1|2|15|1|1|1|15|15|1|1|15|3|1|1|15|25|1|1|15|46|1|1|15|33|1|1|15|3|1|1|15|24|1|1|15|82|1|1|15|1|1|1|15|828|1|1|15|4|1|3|15|6|1|1|15|6|1|3|15|5|1|3|15|7|1|1|15|4|1|5|15|4|1|3|15|4|1|5|15|4|1|3|15|5|1|3|15|30|1|1|15|4|1|1|15|3|1|1|15|4|1|2|15|5|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|2|15|4|1|1|15|7|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|29|1|1|15|4|1|2|15|2|1|1|15|5|1|1|15|9|1|1|15|7|1|1|15|4|1|1|15|1|1|1|15|4|1|1|15|7|1|1|15|10|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|1|15|14|1|1|15|5|1|1|15|1|1|1|15|1|1|1|15|5|1|1|15|8|1|1|15|6|1|2|15|4|1|1|15|2|1|1|15|4|1|4|15|4|1|4|15|7|1|1|15|5|1|3|15|5|1|4|15|5|1|1|15|7|1|1|15|13|1|1|15|6|1|1|15|2|1|2|15|5|1|1|15|7|1|1|15|9|1|1|15|3|1|5|15|7|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|5|1|1|15|3|1|1|15|7|1|1|15|20|1|1|15|6|1|1|15|6|1|1|15|3|1|1|15|5|1|1|15|6|1|1|15|6|1|1|15|3|1|1|15|6|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|5|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|1|15|6|1|1|15|5|1|1|15|8|1|3|15|5|1|3|15|4|1|5|15|4|1|3|15|7|1|1|15|5|1|3|15|5|1|3|15|5|1|1|15|7|1|3|15|5|1|3|15|6|1|1|15|7|1|1|15|109|1|1|15|918|1|3|15|5|1|4|15|4|1|3|15|4|1|4|15|5|1|3|15|4|1|4|15|4|1|5|15|3|1|5|15|4|1|3|15|4|1|1|15|3|1|1|15|4|1|3|15|6|1|2|15|11|1|2|15|6|1|1|15|3|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|5|1|2|15|5|1|5|15|5|1|2|15|8|1|1|15|2|1|1|15|2|1|2|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|7|1|1|15|7|1|1|15|3|1|1|15|5|1|1|15|4|1|1|15|19|1|1|15|6|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|5|15|3|1|4|15|4|1|1|15|7|1|1|15|3|1|1|15|3|1|3|15|5|1|3|15|5|1|1|15|2|1|2|15|3|1|5|15|5|1|1|15|5|1|2|15|5|1|5|15|5|1|2|15|6|1|1|15|4|1|1|15|2|1|3|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|2|15|11|1|2|15|14|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|30|1|1|15|6|1|5|15|2|1|1|15|3|1|1|15|3|1|4|15|5|1|3|15|4|1|4|15|4|1|5|15|3|1|1|15|8|1|3|15|4|1|1|15|3|1|1|15|4|1|3|15|1006|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|4|1|4|15|5|1|3|15|4|1|4|15|5|1|3|15|4|1|5|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|6|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|7|1|2|15|1|1|2|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|5|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|6|1|1|15|3|1|1|15|1|1|1|15|5|1|1|15|7|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|9|1|1|15|5|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|6|1|1|15|3|1|2|15|6|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|2|1|2|15|3|1|1|15|3|1|1|15|3|1|4|15|4|1|1|15|3|1|1|15|3|1|4|15|5|1|3|15|6|1|1|15|5|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|5|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|5|1|1|15|5|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|5|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|4|1|3|15|4|1|1|15|3|1|1|15|3|1|5|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|4|1|1|15|8|1|2|15|1|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|6|1|1|15|6|1|3|15|6|1|1|15|6|1|1|15|1|1|1|15|807|1|3|15|9|1|3|15|8|1|1|15|14|1|1|15|72|1|1|15|13|1|1|15|7|1|1|15|1|1|1|15|14|1|1|15|44|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|5|15|6|1|1|15|4|1|1|15|8|1|1|15|6|1|1|15|3|1|1|15|27|1|1|15|19|1|1|15|11|1|1|15|1|1|1|15|4|1|1|15|3|1|1|15|7|1|1|15|6|1|1|15|5|1|1|15|7|1|1|15|38|1|1|15|19|1|1|15|11|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|7|1|1|15|7|1|1|15|5|1|1|15|7|1|1|15|30|1|4|15|4|1|1|15|1|1|2|15|5|1|3|15|5|1|2|15|1|1|1|15|4|1|3|15|5|1|1|15|6|1|1|15|1|1|1|15|6|1|1|15|8|1|1|15|6|1|1|15|6|1|1|15|34|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|2|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|6|1|1|15|6|1|1|15|9|1|1|15|7|1|1|15|5|1|1|15|31|1|4|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|3|1|5|15|3|1|1|15|1|1|1|15|6|1|1|15|5|1|1|15|10|1|1|15|7|1|1|15|5|1|1|15|30|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|6|1|1|15|3|1|1|15|5|1|1|15|5|1|5|15|6|1|1|15|8|1|1|15|4|1|1|15|31|1|4|15|3|1|4|15|5|1|3|15|5|1|4|15|4|1|4|15|29|1|1|15|13|1|1|15|96|1|3|15|9|1|3|15|14|1|5|15|830|1|2|15|11|1|1|15|9|1|1|15|7|1|1|15|5|1|1|15|8|1|1|15|63|1|1|15|13|1|1|15|9|1|1|15|7|1|1|15|5|1|1|15|8|1|1|15|62|1|3|15|5|1|2|15|1|1|1|15|3|1|1|15|1|1|2|15|20|1|1|15|2|1|1|15|5|1|1|15|6|1|2|15|1|1|1|15|4|1|1|15|1|1|2|15|5|1|3|15|4|1|1|15|1|1|2|15|5|1|4|15|3|1|1|15|1|1|2|15|5|1|4|15|4|1|1|15|5|1|1|15|2|1|2|15|3|1|2|15|2|1|1|15|5|1|1|15|7|1|1|15|5|1|1|15|1|1|1|15|6|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|8|1|1|15|5|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|1|15|5|1|2|15|7|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|8|1|3|15|5|1|1|15|6|1|4|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|1|15|5|1|1|15|1|1|1|15|6|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|4|15|5|1|4|15|3|1|1|15|11|1|1|15|4|1|1|15|9|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|7|1|1|15|5|1|1|15|2|1|1|15|6|1|1|15|5|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|4|1|1|15|11|1|1|15|3|1|1|15|7|1|4|15|11|1|4|15|21|1|1|15|46|1|1|15|11|1|1|15|98|1|1|15|11|1|1|15|551|1|3|15|79|1|2|15|4|1|1|15|5|1|2|15|15|1|1|15|1|1|1|15|78|1|1|15|6|1|1|15|7|1|1|15|14|1|3|15|20|1|1|15|57|1|1|15|6|1|1|15|7|1|1|15|21|1|5|15|3|1|5|15|3|1|1|15|57|1|1|15|6|1|1|15|7|1|1|15|20|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|4|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|5|15|6|1|1|15|6|1|1|15|7|1|1|15|7|1|2|15|1|1|1|15|9|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|2|1|1|15|6|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|4|1|1|15|3|1|1|15|6|1|1|15|5|1|2|15|7|1|1|15|8|1|2|15|4|1|1|15|1|1|2|15|10|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|1|15|2|1|1|15|6|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|5|1|1|15|6|1|1|15|1|1|1|15|6|1|1|15|8|1|1|15|6|1|1|15|7|1|1|15|20|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|6|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|9|1|1|15|6|1|1|15|7|1|1|15|20|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|3|1|2|15|5|1|4|15|5|1|1|15|6|1|1|15|1|1|1|15|4|1|1|15|3|1|1|15|5|1|1|15|5|1|5|15|6|1|1|15|6|1|1|15|7|1|1|15|21|1|5|15|3|1|5|15|43|1|1|15|17|1|1|15|6|1|1|15|7|1|1|15|76|1|1|15|19|1|2|15|4|1|1|15|5|1|2|15|147|1|ENDimg|\"),\n            \"™!\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°©®\",\n            \"\",\n            \"\",\n            \"\",\n            8,\n            16,\n            1,\n            0,\n            15,\n            3\n        )\n        setCharFromSheet(\n            tid,\n            _loadImg(\"image|img.1|111|96|668|1|3|15|4|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|3|15|5|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|2|1|1|15|5|1|2|15|4|1|3|15|4|1|3|15|5|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|4|1|3|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|3|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|3|15|2|1|1|15|6|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|3|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|3|1|3|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|7|1|1|15|6|1|1|15|6|1|2|15|6|1|2|15|4|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|3|1|3|15|1|1|1|15|3|1|3|15|1|1|1|15|5|1|1|15|2|1|1|15|3|1|1|15|2|1|1|15|4|1|2|15|1|1|1|15|2|1|2|15|2|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|1|1|1|15|5|1|2|15|5|1|1|15|1|1|1|15|3|1|1|15|1|1|3|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|4|15|2|1|2|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|2|1|1|15|3|1|1|15|4|1|3|15|5|1|3|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|2|15|1|1|2|15|6|1|1|15|6|1|2|15|3|1|2|15|1|1|2|15|4|1|3|15|5|1|3|15|3|1|1|15|1|1|2|15|1|1|1|15|2|1|2|15|1|1|3|15|3|1|2|15|2|1|1|15|110|1|1|15|99|1|1|3|2|1|1|3|3|1|5|15|99|1|3|3|4|1|3|15|1|1|1|15|435|1|1|15|110|1|1|15|110|1|1|15|11|1|3|15|5|1|3|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|4|1|3|15|5|1|1|15|1|1|1|15|5|1|3|15|3|1|2|15|1|1|2|15|5|1|4|15|2|1|2|15|2|1|1|15|3|1|2|15|3|1|1|15|2|1|2|15|3|1|1|15|3|1|2|15|2|1|1|15|2|1|1|15|3|1|1|15|3|1|3|15|4|1|4|15|2|1|1|15|1|1|4|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|6|1|1|15|5|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|4|1|4|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|3|1|2|15|1|1|1|15|5|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|3|15|1|1|1|15|3|1|3|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|7|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|2|1|2|15|2|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|3|1|1|15|1|1|1|15|1|1|4|15|2|1|2|15|1|1|4|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|1|1|3|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|2|15|2|1|2|15|2|1|1|15|4|1|2|15|6|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|1|1|1|15|2|1|2|15|1|1|1|15|1|1|2|15|2|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|4|1|4|15|3|1|2|15|1|1|2|15|3|1|5|15|3|1|5|15|3|1|1|15|3|1|1|15|6|1|1|15|106|1|2|15|1|1|2|15|3|1|2|3|1|1|1|3|99|1|1|15|1|1|1|15|1|1|1|15|3|1|1|3|1|1|2|3|436|1|1|15|15|1|1|15|94|1|1|15|15|1|1|15|88|1|1|15|5|1|1|15|15|1|1|15|55|1|1|15|15|1|1|15|15|1|1|15|2|1|2|15|2|1|1|15|2|1|2|15|3|1|1|15|2|1|2|15|3|1|1|15|4|1|3|15|3|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|5|1|2|15|6|1|3|15|5|1|3|15|5|1|3|15|3|1|2|15|3|1|1|15|4|1|3|15|3|1|2|15|2|1|2|15|2|1|2|15|2|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|5|1|1|15|10|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|7|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|3|1|1|15|2|1|1|15|4|1|2|15|1|1|1|15|6|1|1|15|6|1|2|15|1|1|1|15|7|1|1|15|3|1|3|15|1|1|1|15|3|1|1|15|1|1|4|15|3|1|2|15|1|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|4|1|1|15|2|1|1|15|3|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|6|1|1|15|5|1|1|15|2|1|2|15|7|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|2|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|2|15|2|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|3|1|2|15|2|1|1|15|2|1|3|15|1|1|1|15|3|1|1|15|3|1|1|15|6|1|1|15|5|1|1|15|3|1|1|15|6|1|2|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|2|1|1|15|2|1|2|15|1|1|2|15|3|1|5|15|5|1|2|15|5|1|2|15|2|1|1|15|6|1|2|15|3|1|1|15|3|1|1|15|3|1|5|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|495|1|3|15|5|1|2|15|5|1|1|15|2|1|1|15|91|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|1|1|2|15|40|1|1|15|51|1|1|15|6|1|1|15|2|1|1|15|5|1|1|15|1|1|1|15|28|1|1|15|3|1|1|15|3|1|4|15|53|1|1|15|6|1|1|15|1|1|1|15|7|1|1|15|28|1|4|15|4|1|2|15|1|1|2|15|14|1|1|15|37|1|1|15|8|1|1|15|7|1|1|15|44|1|3|15|4|1|4|15|13|1|3|15|7|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|5|1|3|15|5|1|3|15|5|1|3|15|19|1|1|15|3|1|1|15|3|1|3|15|1|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|3|1|1|15|6|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|22|1|1|15|7|1|1|15|4|1|3|15|8|1|1|15|6|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|7|1|1|15|18|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|15|1|1|15|6|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|4|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|7|1|1|15|18|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|2|1|1|15|7|1|1|15|6|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|4|1|1|15|3|1|1|15|4|1|1|15|2|1|1|15|7|1|1|15|18|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|4|1|3|15|8|1|1|15|6|1|2|15|3|1|2|15|1|1|2|15|5|1|2|15|7|1|2|15|6|1|2|15|3|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|7|1|1|15|18|1|5|15|3|1|5|15|15|1|1|15|6|1|2|15|3|1|2|15|1|1|2|15|5|1|2|15|7|1|2|15|6|1|2|15|3|1|2|15|2|1|1|15|3|1|2|15|2|1|1|15|7|1|1|15|94|1|1|15|7|1|1|15|7|1|1|15|94|1|1|15|7|1|1|15|7|1|1|15|94|1|1|15|7|1|1|15|7|1|1|15|298|1|2|15|6|1|1|15|6|1|2|15|5|1|3|15|1|1|1|15|5|1|1|15|21|1|2|15|17|1|1|15|6|1|2|15|5|1|1|15|1|1|1|15|21|1|1|15|7|1|1|15|7|1|2|15|4|1|1|15|1|1|2|15|5|1|3|15|3|1|2|15|15|1|2|15|5|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|53|1|1|15|4|1|2|15|120|1|1|15|103|1|3|15|2|1|4|15|101|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|104|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|104|1|1|15|1|1|4|15|105|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|104|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|104|1|1|15|1|1|4|15|109|1|1|15|45|1|2|15|6|1|1|15|1|1|1|15|101|1|1|15|7|1|2|15|518|1|1|15|111|1|1|15|110|1|1|15|18|1|1|15|5|1|1|15|1|1|1|15|4|1|1|15|12|1|1|15|6|1|1|15|7|1|1|15|34|1|4|15|4|1|4|15|4|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|1|1|1|15|4|1|3|15|5|1|3|15|6|1|1|15|6|1|1|15|1|1|1|15|2|1|1|15|3|1|3|15|7|1|1|15|34|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|1|1|3|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|7|1|1|15|10|1|2|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|7|1|3|15|35|1|1|15|4|1|1|15|2|1|1|15|1|1|2|15|1|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|7|1|1|15|12|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|7|1|1|15|2|1|1|15|35|1|1|15|4|1|1|15|2|1|1|15|1|1|2|15|1|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|1|1|2|15|4|1|1|15|1|1|2|15|5|1|2|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|34|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|6|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|35|1|4|15|4|1|2|15|2|1|1|15|3|1|5|15|2|1|2|15|1|1|1|15|1|1|1|15|3|1|4|15|4|1|4|15|5|1|3|15|3|1|1|15|1|1|1|15|1|1|2|15|3|1|1|15|1|1|2|15|3|1|2|15|3|1|1|15|366|1|ENDimg|\"),\n            \"กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรลวศษสหฬอฮะาเแโใไฤฦๅั็ํิีึืุู์่้๊๋ำ฿๐๑๒๓๔๕๖๗๘๙\",\n            \"ั็ํิีึืุู์่้๊๋\",\n            \"ั็ํิีึื์่้๊๋\",\n            \"ำ\",\n            8,\n            16,\n            1,\n            0,\n            15,\n            3\n        )\n        setCharArrFromSheet(\n            tid,\n            _loadImg(\"image|img.1|111|48|3|1|1|15|7|1|2|15|6|1|2|15|7|1|1|15|7|1|1|15|6|1|2|15|6|1|2|15|7|1|1|15|6|1|1|15|6|1|2|15|6|1|2|15|7|1|1|15|7|1|1|15|7|1|2|15|5|1|1|15|8|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|6|1|1|15|7|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|5|1|1|15|7|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|6|1|1|15|8|1|2|15|29|1|1|15|31|1|1|15|7|1|1|15|8|1|1|15|7|1|1|15|5|1|1|15|1|1|1|15|18|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|5|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|3|1|4|15|5|1|4|15|4|1|4|15|4|1|4|15|19|1|4|15|4|1|4|15|4|1|4|15|4|1|4|15|6|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|3|1|2|15|1|1|2|15|4|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|2|1|5|15|4|1|5|15|1225|1|2|15|6|1|1|15|7|1|1|15|6|1|2|15|6|1|2|15|7|1|1|15|8|1|1|15|6|1|2|15|6|1|2|15|6|1|1|15|7|1|1|15|6|1|2|15|6|1|2|15|7|1|1|15|6|1|1|15|1|1|1|15|4|1|3|15|6|1|1|15|7|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|7|1|1|15|7|1|2|15|5|1|1|15|1|1|1|15|4|1|3|15|6|1|1|15|7|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|13|1|1|15|31|1|1|15|31|1|1|15|31|1|1|15|23|1|1|15|7|1|1|15|7|1|1|15|7|1|1|15|7|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|4|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|3|1|5|15|2|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|4|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|2|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|1225|1|1|15|5|1|2|15|6|1|2|15|7|1|1|15|26|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|35|1|1|15|6|1|2|15|5|1|1|15|1|1|1|15|5|1|3|15|25|1|1|15|7|1|1|15|7|1|1|15|7|1|1|15|59|1|1|15|86|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|34|1|1|15|6|1|2|15|5|1|1|15|1|1|1|15|34|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|22|1|5|15|3|1|5|15|3|1|5|15|3|1|5|15|149|1|2|15|6|1|2|15|6|1|2|15|6|1|2|15|2|1|3|15|1|1|2|15|2|1|3|15|1|1|2|15|68|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|2|15|3|1|1|15|2|1|2|15|3|1|1|15|2|1|1|15|70|1|1|15|7|1|1|15|7|1|1|15|7|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|70|1|1|15|7|1|1|15|7|1|1|15|7|1|2|15|3|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|70|1|1|15|7|1|1|15|7|1|1|15|7|1|2|15|3|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|70|1|1|15|7|1|1|15|7|1|1|15|7|1|3|15|2|1|1|15|2|1|3|15|2|1|1|15|2|1|1|15|70|1|1|15|7|1|1|15|7|1|1|15|7|1|3|15|2|1|1|15|2|1|3|15|2|1|1|15|2|1|1|15|99|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|99|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|99|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|63|1|ENDimg|\"),\n            [\n                \"ั่\",\n                \"ั้\",\n                \"ั๊\",\n                \"ั๋\",\n                \"ํ่\",\n                \"ํ้\",\n                \"ํ๊\",\n                \"ํ๋\",\n                \"็่\",\n                \"็้\",\n                \"็๊\",\n                \"็๋\",\n                \"ิ่\",\n                \"ิ้\",\n                \"ิ๊\",\n                \"ิ๋\",\n                \"ี่\",\n                \"ี้\",\n                \"ี๊\",\n                \"ี๋\",\n                \"ึ่\",\n                \"ึ้\",\n                \"ึ๊\",\n                \"ึ๋\",\n                \"ื่\",\n                \"ื้\",\n                \"ื๊\",\n                \"ื๋\",\n                \"่ำ\",\n                \"้ำ\",\n                \"๊ำ\",\n                \"๋ำ\",\n                \"ฤๅ\",\n                \"ฦๅ\",\n                \"ิ์\",\n                \"ี์\",\n                \"ึ์\",\n                \"ื์\"\n            ],\n            [\n                \"ั่\",\n                \"ั้\",\n                \"ั๊\",\n                \"ั๋\",\n                \"ํ่\",\n                \"ํ้\",\n                \"ํ๊\",\n                \"ํ๋\",\n                \"็่\",\n                \"็้\",\n                \"็๊\",\n                \"็๋\",\n                \"ิ่\",\n                \"ิ้\",\n                \"ิ๊\",\n                \"ิ๋\",\n                \"ี่\",\n                \"ี้\",\n                \"ี๊\",\n                \"ี๋\",\n                \"ึ่\",\n                \"ึ้\",\n                \"ึ๊\",\n                \"ึ๋\",\n                \"ื่\",\n                \"ื้\",\n                \"ื๊\",\n                \"ื๋\",\n                \"ิ์\",\n                \"ี์\",\n                \"ึ์\",\n                \"ื์\"\n            ],\n            [\n                \"ั่\",\n                \"ั้\",\n                \"ั๊\",\n                \"ั๋\",\n                \"ํ่\",\n                \"ํ้\",\n                \"ํ๊\",\n                \"ํ๋\",\n                \"็่\",\n                \"็้\",\n                \"็๊\",\n                \"็๋\",\n                \"ิ่\",\n                \"ิ้\",\n                \"ิ๊\",\n                \"ิ๋\",\n                \"ี่\",\n                \"ี้\",\n                \"ี๊\",\n                \"ี๋\",\n                \"ึ่\",\n                \"ึ้\",\n                \"ึ๊\",\n                \"ึ๋\",\n                \"ื่\",\n                \"ื้\",\n                \"ื๊\",\n                \"ื๋\",\n                \"ิ์\",\n                \"ี์\",\n                \"ึ์\",\n                \"ื์\"\n            ],\n            [\n                \"่ำ\",\n                \"้ำ\",\n                \"๊ำ\",\n                \"๋ำ\"\n            ],\n            8,\n            16,\n            1,\n            0,\n            0,\n            0\n        )\n    }\n\n    export function _arcadefont(tid: number = 0) {\n        setCharFromSheet(\n            tid,\n            _loadImg(\"image|img.1|111|56|9|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|6|1|1|15|5|1|2|15|2|1|1|15|12|1|1|15|7|1|1|15|6|1|1|15|7|1|1|15|3|1|1|15|35|1|1|15|7|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|4|15|3|1|2|15|1|1|1|15|4|1|2|15|7|1|1|15|6|1|1|15|8|1|1|15|7|1|1|15|1|1|1|15|36|1|1|15|14|1|5|15|3|1|1|15|1|1|1|15|8|1|1|15|4|1|1|15|1|1|1|15|13|1|1|15|8|1|1|15|6|1|5|15|5|1|1|15|29|1|1|15|15|1|1|15|1|1|1|15|5|1|3|15|6|1|1|15|6|1|1|15|14|1|1|15|8|1|1|15|7|1|1|15|1|1|1|15|6|1|1|15|29|1|1|15|14|1|5|15|5|1|1|15|1|1|1|15|4|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|11|1|1|15|8|1|1|15|6|1|1|15|3|1|1|15|3|1|5|15|11|1|5|15|27|1|1|15|1|1|1|15|4|1|4|15|5|1|1|15|1|1|2|15|3|1|1|15|2|1|1|15|12|1|1|15|8|1|1|15|16|1|1|15|5|1|2|15|14|1|2|15|6|1|1|15|15|1|1|15|1|1|1|15|6|1|1|15|5|1|1|15|2|1|2|15|4|1|2|15|1|1|1|15|12|1|1|15|6|1|1|15|17|1|1|15|6|1|1|15|14|1|2|15|93|1|1|15|26|1|1|15|109|1|1|15|5|1|2|15|6|1|1|15|7|1|2|15|6|1|2|15|8|1|1|15|4|1|4|15|5|1|2|15|5|1|4|15|5|1|2|15|6|1|2|15|31|1|1|15|4|1|1|15|2|1|1|15|4|1|2|15|6|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|6|1|2|15|4|1|1|15|7|1|1|15|2|1|1|15|7|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|2|15|6|1|2|15|9|1|2|15|4|1|1|15|5|1|1|15|1|1|2|15|5|1|1|15|9|1|1|15|6|1|1|15|6|1|1|15|1|1|1|15|4|1|3|15|5|1|3|15|8|1|1|15|5|1|2|15|5|1|1|15|2|1|1|15|4|1|2|15|6|1|2|15|7|1|2|15|5|1|1|15|6|1|2|15|1|1|1|15|5|1|1|15|8|1|1|15|8|1|1|15|4|1|1|15|2|1|1|15|7|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|5|1|1|15|2|1|1|15|5|1|3|15|20|1|1|15|7|1|1|15|6|1|1|15|2|1|1|15|5|1|1|15|7|1|1|15|6|1|1|15|2|1|1|15|4|1|5|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|5|1|1|15|6|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|2|15|6|1|2|15|7|1|2|15|4|1|1|15|8|1|2|15|5|1|3|15|5|1|4|15|5|1|2|15|8|1|1|15|5|1|2|15|6|1|2|15|6|1|1|15|7|1|2|15|6|1|2|15|5|1|2|15|7|1|1|15|9|1|2|15|98|1|1|15|142|1|3|15|5|1|3|15|5|1|2|15|5|1|3|15|6|1|2|15|5|1|3|15|5|1|4|15|4|1|4|15|5|1|2|15|5|1|1|15|2|1|1|15|4|1|3|15|8|1|1|15|11|1|2|15|6|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|5|1|1|15|9|1|1|15|3|1|5|15|5|1|2|15|7|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|3|15|5|1|1|15|7|1|1|15|2|1|1|15|4|1|3|15|5|1|3|15|5|1|1|15|7|1|4|15|5|1|1|15|9|1|1|15|15|1|1|15|5|1|1|15|5|1|1|15|1|1|2|15|4|1|4|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|7|1|1|15|1|1|2|15|4|1|1|15|2|1|1|15|5|1|1|15|9|1|1|15|3|1|5|15|5|1|2|15|12|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|5|1|1|15|6|1|1|15|2|1|1|15|11|1|2|15|8|1|1|15|6|1|4|15|3|1|1|15|2|1|1|15|4|1|3|15|6|1|2|15|5|1|3|15|5|1|4|15|4|1|1|15|8|1|2|15|5|1|1|15|2|1|1|15|4|1|3|15|6|1|2|15|226|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|5|1|2|15|5|1|3|15|6|1|2|15|5|1|3|15|6|1|2|15|5|1|5|15|3|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|5|1|1|15|7|1|2|15|1|1|2|15|3|1|2|15|1|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|3|1|2|15|6|1|1|15|7|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|2|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|5|1|1|15|8|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|5|1|1|15|4|1|2|15|6|1|1|15|7|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|3|15|5|1|2|15|1|1|1|15|4|1|3|15|7|1|1|15|7|1|1|15|5|1|1|15|2|1|1|15|5|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|5|1|1|15|4|1|1|15|1|1|1|15|5|1|1|15|7|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|1|1|1|15|5|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|6|1|1|15|5|1|1|15|2|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|4|15|4|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|5|1|2|15|5|1|1|15|8|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|5|1|2|15|7|1|1|15|6|1|2|15|7|1|1|15|6|1|1|15|1|1|1|15|4|1|1|15|3|1|1|15|129|1|2|15|6|1|1|15|7|1|2|15|15|1|1|15|6|1|1|15|54|1|1|15|3|1|1|15|3|1|4|15|4|1|1|15|8|1|1|15|7|1|1|15|14|1|1|15|1|1|1|15|6|1|1|15|14|1|1|15|18|1|1|15|14|1|1|15|4|1|1|15|3|1|1|15|6|1|1|15|4|1|1|15|8|1|1|15|7|1|1|15|14|1|1|15|1|1|1|15|21|1|1|15|18|1|1|15|13|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|6|1|1|15|5|1|1|15|9|1|1|15|6|1|1|15|31|1|3|15|4|1|3|15|6|1|3|15|5|1|3|15|5|1|2|15|6|1|1|15|7|1|1|15|6|1|1|15|6|1|1|15|10|1|1|15|5|1|1|15|30|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|2|1|1|15|4|1|1|15|1|1|2|15|4|1|3|15|6|1|1|15|5|1|1|15|7|1|1|15|10|1|1|15|5|1|1|15|30|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|7|1|1|15|2|1|1|15|4|1|2|15|7|1|1|15|7|1|1|15|5|1|4|15|4|1|2|15|10|1|1|15|3|1|2|15|6|1|5|15|20|1|3|15|4|1|3|15|6|1|3|15|5|1|3|15|5|1|3|15|5|1|1|15|244|1|1|15|8|1|1|15|5|1|1|15|7|1|2|15|63|1|1|15|6|1|3|15|28|1|1|15|8|1|1|15|30|1|3|15|6|1|3|15|21|1|1|15|5|1|1|15|2|1|1|15|4|1|3|15|5|1|2|15|7|1|2|15|5|1|1|15|1|1|1|15|6|1|1|15|6|1|2|15|1|1|1|15|4|1|3|15|6|1|2|15|5|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|1|1|1|15|6|1|3|15|4|1|3|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|5|1|1|15|8|1|1|15|5|1|2|15|7|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|2|15|1|1|1|15|4|1|2|15|7|1|1|15|6|1|3|15|4|1|1|15|2|1|1|15|5|1|1|15|6|1|1|15|1|1|1|15|5|1|1|15|1|1|1|15|6|1|1|15|6|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|3|15|6|1|3|15|4|1|1|15|9|1|2|15|5|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|3|15|6|1|1|15|6|1|1|15|2|1|1|15|4|1|3|15|5|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|5|1|2|15|5|1|1|15|10|1|1|15|4|1|1|15|7|1|3|15|7|1|1|15|5|1|2|15|69|1|1|15|10|1|1|15|76|1|2|15|5|1|1|15|7|1|2|15|94|1|1|15|6|1|1|15|8|1|1|15|77|1|1|15|2|1|1|15|13|1|1|15|6|1|1|15|8|1|1|15|45|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|4|15|4|1|2|15|6|1|1|15|8|1|2|15|6|1|2|15|1|1|1|15|34|1|1|15|2|1|1|15|4|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|4|1|2|15|5|1|1|15|2|1|1|15|6|1|1|15|6|1|1|15|6|1|1|15|8|1|1|15|6|1|1|15|1|1|2|15|35|1|1|15|2|1|1|15|5|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|4|1|2|15|6|1|3|15|5|1|1|15|7|1|1|15|6|1|1|15|8|1|1|15|46|1|3|15|6|1|1|15|6|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|4|1|1|15|2|1|1|15|4|1|4|15|5|1|2|15|5|1|1|15|7|1|2|15|78|1|2|15|76|1|ENDimg|\"),\n            \"!\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\",\n            \"\",\n            \"\",\n            \"\",\n            8,\n            8,\n            1,\n            0,\n            0,\n            0\n        )\n    }\n\n    export function _latinmini(tid: number = 0) {\n        setCharFromSheet(\n            tid,\n            _loadImg(\"image|img.1|79|32|80|1|1|15|2|1|2|15|3|1|2|15|1|1|2|15|2|1|3|15|1|1|3|15|2|1|2|15|1|1|1|15|1|1|1|15|1|1|3|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|2|1|3|15|1|1|2|15|2|1|3|15|2|1|2|15|1|1|4|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|3|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|1|1|3|15|1|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|2|1|1|15|1|1|1|15|1|1|3|15|2|1|1|15|4|1|1|15|1|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|2|15|1|1|2|15|2|1|3|15|1|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|2|15|2|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|2|15|1|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|1|15|80|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|72|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|3|15|2|1|1|15|2|1|2|15|2|1|2|15|4|1|1|15|1|1|3|15|2|1|2|15|1|1|3|15|1|1|2|15|3|1|2|15|10|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|2|15|4|1|1|15|3|1|1|15|2|1|2|15|1|1|1|15|3|1|1|15|5|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|6|1|1|15|1|1|1|15|3|1|2|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|3|15|6|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|5|1|1|15|1|1|3|15|3|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|10|1|1|15|3|1|2|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|3|15|1|1|3|15|1|1|3|15|1|1|3|15|1|1|2|15|4|1|1|15|1|1|2|15|2|1|2|15|2|1|1|15|4|1|2|15|1|1|2|15|14|1|1|15|81|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|37|1|1|15|7|1|1|15|35|1|1|15|1|1|1|15|4|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|14|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|2|15|3|1|1|15|2|1|2|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|2|15|2|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|4|1|1|15|1|1|3|15|2|1|2|15|1|1|2|15|3|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|2|15|3|1|2|15|1|1|1|15|9|1|1|15|6|1|1|15|7|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|10|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|2|15|8|1|1|15|2|1|1|15|2|1|1|15|3|1|3|15|1|1|2|15|2|1|2|15|19|1|1|15|1|1|1|15|4|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|20|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|54|1|1|15|33|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|238|1|1|15|3|1|1|15|153|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|70|1|1|15|7|1|1|15|65|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|ENDimg|\"),\n            \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-*/()[]{}<=>^\\\\|%#$_!?'\\\":;.,\",\n            \"\",\n            \"\",\n            \"\",\n            4,\n            8,\n            1,\n            2,\n            15,\n            15\n        )\n        setCharFromSheet(\n            tid,\n            _loadImg(\"image|img.1|79|32|80|1|1|15|2|1|2|15|3|1|2|15|1|1|2|15|2|1|3|15|1|1|3|15|2|1|2|15|1|1|1|15|1|1|1|15|1|1|3|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|2|1|3|15|1|1|2|15|2|1|3|15|2|1|2|15|1|1|4|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|3|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|1|1|3|15|1|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|2|1|1|15|1|1|1|15|1|1|3|15|2|1|1|15|4|1|1|15|1|1|2|15|2|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|2|15|2|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|2|15|1|1|2|15|2|1|3|15|1|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|2|15|2|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|2|15|1|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|2|15|3|1|1|15|80|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|72|1|1|15|1|1|1|15|4|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|3|15|2|1|1|15|2|1|2|15|2|1|2|15|4|1|1|15|1|1|3|15|2|1|2|15|1|1|3|15|1|1|2|15|3|1|2|15|10|1|1|15|4|1|2|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|1|1|1|15|1|1|1|15|1|1|2|15|4|1|1|15|3|1|1|15|2|1|2|15|1|1|1|15|3|1|1|15|5|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|6|1|1|15|1|1|1|15|3|1|2|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|2|15|2|1|2|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|3|15|6|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|1|1|3|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|3|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|5|1|1|15|1|1|3|15|3|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|3|1|1|15|2|1|1|15|10|1|1|15|3|1|2|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|3|15|1|1|3|15|1|1|3|15|1|1|3|15|1|1|2|15|4|1|1|15|1|1|2|15|2|1|2|15|2|1|1|15|4|1|2|15|1|1|2|15|14|1|1|15|81|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|37|1|1|15|7|1|1|15|35|1|1|15|1|1|1|15|4|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|14|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|2|15|3|1|1|15|2|1|2|15|3|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|2|15|2|1|1|15|1|1|1|15|1|1|1|15|4|1|1|15|4|1|1|15|1|1|3|15|2|1|2|15|1|1|2|15|3|1|1|15|4|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|2|1|2|15|3|1|2|15|1|1|1|15|9|1|1|15|6|1|1|15|7|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|2|15|2|1|1|15|3|1|1|15|10|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|3|1|2|15|1|1|3|15|1|1|2|15|8|1|1|15|2|1|1|15|2|1|1|15|3|1|3|15|1|1|2|15|2|1|2|15|19|1|1|15|1|1|1|15|4|1|2|15|1|1|2|15|3|1|2|15|1|1|2|15|20|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|1|1|1|15|1|1|1|15|2|1|1|15|2|1|1|15|1|1|1|15|2|1|1|15|3|1|1|15|54|1|1|15|33|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|238|1|1|15|3|1|1|15|153|1|1|15|3|1|1|15|3|1|1|15|3|1|1|15|70|1|1|15|7|1|1|15|65|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|1|1|3|2|ENDimg|\"),\n            \"abcdefghijklmnopqrstuvwxyz\",\n            \"\",\n            \"\",\n            \"\",\n            4,\n            8,\n            1,\n            2,\n            15,\n            15\n        )\n    }\n\n}\n","main-dataserial.ts":"\nnamespace Renfont {\n\n    let cidk: { [key: string]: number } = {}\n\n    export function _indexKeyShadow(name: string) {\n        return name\n    }\n\n    export function _startIdxKey(name: string, start: number) {\n        cidk[name] = start\n    }\n\n    export function _getIdxKey(name: string) {\n        return cidk[name]\n    }\n\n    export function _write(strval: string) {\n        let oval = \"\", curc = \"\"\n        for (let i = 0; i < strval.length; i++) {\n            curc = strval.charAt(i)\n            if (\"\\\\|\".includes(curc)) {\n                oval = \"\" + oval + \"\\\\\"\n            }\n            oval = \"\" + oval + curc\n        }\n        oval = \"\" + oval + \"|\"\n        return oval\n    }\n\n    export function _read(txt: string, name: string) {\n        if (cidk[name] == null) return \"\";\n        let idx = cidk[name]\n        let oval = \"\", curc = \"\"\n        while (idx < txt.length) {\n            curc = txt.charAt(idx)\n            if (\"|\".includes(curc)) {\n                break\n            } else if (\"\\\\\".includes(curc)) {\n                idx += 1\n                curc = txt.charAt(idx)\n            }\n            oval = \"\" + oval + curc\n            idx += 1\n        }\n        idx += 1, cidk[name] = idx\n        return oval\n    }\n\n    export function _saveImg(InputImg: Image) {\n        let OutputStr = \"\"\n        OutputStr = \"\" + OutputStr + _write(\"image\")\n        OutputStr = \"\" + OutputStr + _write(\"img.1\")\n        OutputStr = \"\" + OutputStr + _write(convertToText(InputImg.width))\n        OutputStr = \"\" + OutputStr + _write(convertToText(InputImg.height))\n        let NumVal = InputImg.getPixel(0, 0), Count = 1, Ix = 0, Iy = 0\n        for (let index = 0; index <= InputImg.width * InputImg.height - 2; index++) {\n            Ix = (index + 1) % InputImg.width, Iy = Math.floor((index + 1) / InputImg.width)\n            if (NumVal == InputImg.getPixel(Ix, Iy)) {\n                Count += 1\n            } else {\n                OutputStr = \"\" + OutputStr + _write(convertToText(Count)), OutputStr = \"\" + OutputStr + _write(convertToText(NumVal))\n                NumVal = InputImg.getPixel(Ix, Iy), Count = 1\n            }\n        }\n        OutputStr = \"\" + OutputStr + _write(convertToText(Count)), OutputStr = \"\" + OutputStr + _write(convertToText(NumVal)), OutputStr = \"\" + OutputStr + _write(\"ENDimg\")\n        return OutputStr\n    }\n\n    export function _loadImg(DataStr: string) {\n        if (DataStr.isEmpty()) return undefined;\n        _startIdxKey(\"_ImgData\", 0)\n        let StrVal = _read(DataStr, \"_ImgData\")\n        let NumVal = 0, Ix = 0, Iy = 0\n        if (!(StrVal.includes(\"image\"))) return undefined;\n        StrVal = _read(DataStr, \"_ImgData\")\n        if (!(StrVal.includes(\"img.\"))) return undefined;\n        let Widt = parseFloat(_read(DataStr, \"_ImgData\")), Heig = parseFloat(_read(DataStr, \"_ImgData\"))\n        let OutputImg = image.create(Widt, Heig)\n        let I = 0, CountStr = _read(DataStr, \"_ImgData\"), Count = parseFloat(CountStr)\n        while (_getIdxKey(\"_ImgData\") < DataStr.length) {\n            Ix = I % Widt\n            Iy = Math.floor(I / Widt)\n            NumVal = parseFloat(_read(DataStr, \"_ImgData\"))\n            for (let index = 0; index < Count; index++) {\n                OutputImg.setPixel(Ix, Iy, NumVal)\n                I += 1\n                Ix = I % Widt\n                Iy = Math.floor(I / Widt)\n            }\n            CountStr = _read(DataStr, \"_ImgData\")\n            if (CountStr.includes(\"END\")) break;\n            Count = parseFloat(CountStr)\n        }\n        return OutputImg\n    }\n}\n","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"arcade-renfont\",\n    \"description\": \"basic text engine render like standard ascii text engine\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"main-temp.ts\",\n        \"main-dataserial.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1749442615935}